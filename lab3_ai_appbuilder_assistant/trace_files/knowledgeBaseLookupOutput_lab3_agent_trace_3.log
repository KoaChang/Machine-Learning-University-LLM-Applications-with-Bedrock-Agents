{
  "retrievedReferences": [
    {
      "content": {
        "text": "When two services may reside within a common network boundary, it is still best practice to encrypt, authenticate, and authorize communications between those services.\\n    \\n\\n      As an example, AWS service APIs use the AWS Signature Version 4 (SigV4) signature protocol to authenticate the caller, no matter what network the request originates from. This authentication ensures that AWS APIs can verify the identity that requested the action, and that identity can then be combined with policies to make an authorization decision to determine whether the action should be allowed or not.\\n    \\n\\n      Services such as Amazon VPC Lattice and Amazon API Gateway allow you use the same SigV4 signature protocol to add authentication and authorization to east-west traffic in your own workloads. If resources outside of your AWS environment need to communicate with services that require SigV4-based authentication and authorization, you can use AWS Identity and Access Management (IAM) Roles Anywhere on the non-AWS resource to acquire temporary AWS credentials. These credentials can be used to sign requests to services using SigV4 to authorize access.\\n    \\n\\n      Another common mechanism for authenticating east-west traffic is TLS mutual authentication (mTLS). Many Internet of Things (IoT), business-to-business applications, and microservices use mTLS to validate the identity of both sides of a TLS communication through the use of both client and server-side X.509 certificates. These certificates can be issued by AWS Private Certificate Authority (AWS Private CA). You can use services such as Amazon API Gateway and AWS App Mesh to provide mTLS authentication for inter- or intra-workload communication. While mTLS provides authentication information for both sides of a TLS communication, it does not provide a mechanism for authorization.\\n    \\n\\n      Finally, OAuth 2.0 and OpenID Connect (OIDC) are two protocols typically used for controlling access to services by users, but are now becoming popular for service-to-service traffic as well. API Gateway provides a JSON Web Token (JWT) authorizer, allowing workloads to restrict access to API routes using JWTs issued from OIDC or OAuth 2.0 identity providers. OAuth2 scopes can be used as a source for basic authorization decisions, but the authorization checks still need to be implemented in the application layer, and OAuth2 scopes alone cannot support more complex authorization needs.\\n    \\nImplementation steps\\n\\n\\n\\nDefine and document your workload network flows: The first step in implementing a defense-in-depth strategy is defining your workload\\u2019s traffic flows. \\n          \\n\\n\\n\\n                Create a data flow diagram that clearly defines how data is transmitted between different services that comprise your workload. This diagram is the first step to enforcing those flows through authenticated network channels.\\n              \\n\\n\\n                Instrument your workload in development and testing phases to validate that the data flow diagram accurately reflects the workload\\u2019s behavior at runtime.\\n              \\n\\n\\n                A data flow diagram can also be useful when performing a threat modeling exercise, as described in SEC01-BP07 Identify threats and prioritize mitigations using a threat model.\\n              \\n\\n\\n\\nEstablish network controls: Consider AWS capabilities to establish network controls aligned to your data flows. While network boundaries should not be the only security control, they provide a layer in the defense-in-depth strategy to protect your workload.\\n          \\n\\n\\n\\n                Use security groups to establish define and restrict data flows between resources.\\n              \\n\\n\\n                Consider using AWS PrivateLink to communicate with both AWS and third-party services that support AWS PrivateLink. Data sent through a AWS PrivateLink interface endpoint stays within the AWS network backbone and does not traverse the public Internet.\\n              \\n\\n\\n\\nImplement authentication and authorization across services in your workload: Choose the set of AWS services most appropriate to provide authenticated, encrypted traffic flows in your workload.\\n          \\n\\n\\n\\n                Consider Amazon VPC Lattice to secure service-to-service communication. VPC Lattice can use SigV4 authentication combined with auth policies to control service-to-service access.\\n              \\n\\n\\n                For service-to-service communication using mTLS, consider API Gateway or App Mesh. AWS Private CA can be used to establish a private CA hierarchy capable of issuing certificates for use with mTLS.\\n              \\n\\n\\n                When integrating with services using OAuth 2.0 or OIDC, consider API Gateway using the JWT authorizer.\\n              \\n\\n\\n                For communication between your workload and IoT devices, consider AWS IoT Core, which provides several options for network traffic encryption and authentication.\\n              \\n\\n\\n\\nMonitor for unauthorized access: Continually monitor for unintended communication channels, unauthorized principals attempting to access protected resources, and other improper access patterns.\\n          \\n\\n\\n\\n                If using VPC Lattice to manage access to your services, consider enabling and monitoring VPC Lattice access logs. These access logs include information on the requesting entity, network information including source and destination VPC, and request metadata.\\n              \\n\\n\\n                Consider enabling VPC flow logs to capture metadata on network flows and periodically review for anomalies.\\n              \\n\\n\\n                Refer to the AWS Security Incident Response Guide and the Incident Response section of the AWS Well-Architected Framework security pillar for more guidance on planning, simulating, and responding to security incidents."
      },
      "location": {
        "s3Location": {
          "uri": "s3://l2ecb7c0-agent-kb-339712993987/kbaws_l2ecb7c0/framework_347_sec_protect_data_transit_authentication.txt"
        },
        "type": "S3"
      }
    },
    {
      "content": {
        "text": "When two services may reside within a common network boundary, it is still best practice to encrypt, authenticate, and authorize communications between those services.\\n    \\n\\n      As an example, AWS service APIs use the AWS Signature Version 4 (SigV4) signature protocol to authenticate the caller, no matter what network the request originates from. This authentication ensures that AWS APIs can verify the identity that requested the action, and that identity can then be combined with policies to make an authorization decision to determine whether the action should be allowed or not.\\n    \\n\\n      Services such as Amazon VPC Lattice and Amazon API Gateway allow you use the same SigV4 signature protocol to add authentication and authorization to east-west traffic in your own workloads. If resources outside of your AWS environment need to communicate with services that require SigV4-based authentication and authorization, you can use AWS Identity and Access Management (IAM) Roles Anywhere on the non-AWS resource to acquire temporary AWS credentials. These credentials can be used to sign requests to services using SigV4 to authorize access.\\n    \\n\\n      Another common mechanism for authenticating east-west traffic is TLS mutual authentication (mTLS). Many Internet of Things (IoT), business-to-business applications, and microservices use mTLS to validate the identity of both sides of a TLS communication through the use of both client and server-side X.509 certificates. These certificates can be issued by AWS Private Certificate Authority (AWS Private CA). You can use services such as Amazon API Gateway and AWS App Mesh to provide mTLS authentication for inter- or intra-workload communication. While mTLS provides authentication information for both sides of a TLS communication, it does not provide a mechanism for authorization.\\n    \\n\\n      Finally, OAuth 2.0 and OpenID Connect (OIDC) are two protocols typically used for controlling access to services by users, but are now becoming popular for service-to-service traffic as well. API Gateway provides a JSON Web Token (JWT) authorizer, allowing workloads to restrict access to API routes using JWTs issued from OIDC or OAuth 2.0 identity providers. OAuth2 scopes can be used as a source for basic authorization decisions, but the authorization checks still need to be implemented in the application layer, and OAuth2 scopes alone cannot support more complex authorization needs.\\n    \\nImplementation steps\\n\\n\\n\\nDefine and document your workload network flows: The first step in implementing a defense-in-depth strategy is defining your workload\\u2019s traffic flows. \\n          \\n\\n\\n\\n                Create a data flow diagram that clearly defines how data is transmitted between different services that comprise your workload. This diagram is the first step to enforcing those flows through authenticated network channels.\\n              \\n\\n\\n                Instrument your workload in development and testing phases to validate that the data flow diagram accurately reflects the workload\\u2019s behavior at runtime.\\n              \\n\\n\\n                A data flow diagram can also be useful when performing a threat modeling exercise, as described in SEC01-BP07 Identify threats and prioritize mitigations using a threat model.\\n              \\n\\n\\n\\nEstablish network controls: Consider AWS capabilities to establish network controls aligned to your data flows. While network boundaries should not be the only security control, they provide a layer in the defense-in-depth strategy to protect your workload.\\n          \\n\\n\\n\\n                Use security groups to establish define and restrict data flows between resources.\\n              \\n\\n\\n                Consider using AWS PrivateLink to communicate with both AWS and third-party services that support AWS PrivateLink. Data sent through a AWS PrivateLink interface endpoint stays within the AWS network backbone and does not traverse the public Internet.\\n              \\n\\n\\n\\nImplement authentication and authorization across services in your workload: Choose the set of AWS services most appropriate to provide authenticated, encrypted traffic flows in your workload.\\n          \\n\\n\\n\\n                Consider Amazon VPC Lattice to secure service-to-service communication. VPC Lattice can use SigV4 authentication combined with auth policies to control service-to-service access.\\n              \\n\\n\\n                For service-to-service communication using mTLS, consider API Gateway or App Mesh. AWS Private CA can be used to establish a private CA hierarchy capable of issuing certificates for use with mTLS.\\n              \\n\\n\\n                When integrating with services using OAuth 2.0 or OIDC, consider API Gateway using the JWT authorizer.\\n              \\n\\n\\n                For communication between your workload and IoT devices, consider AWS IoT Core, which provides several options for network traffic encryption and authentication.\\n              \\n\\n\\n\\nMonitor for unauthorized access: Continually monitor for unintended communication channels, unauthorized principals attempting to access protected resources, and other improper access patterns.\\n          \\n\\n\\n\\n                If using VPC Lattice to manage access to your services, consider enabling and monitoring VPC Lattice access logs. These access logs include information on the requesting entity, network information including source and destination VPC, and request metadata.\\n              \\n\\n\\n                Consider enabling VPC flow logs to capture metadata on network flows and periodically review for anomalies.\\n              \\n\\n\\n                Refer to the AWS Security Incident Response Guide and the Incident Response section of the AWS Well-Architected Framework security pillar for more guidance on planning, simulating, and responding to security incidents."
      },
      "location": {
        "s3Location": {
          "uri": "s3://l2ecb7c0-agent-kb-339712993987/kbaws_l2ecb7c0/security-pillar_77_sec_protect_data_transit_authentication.txt"
        },
        "type": "S3"
      }
    },
    {
      "content": {
        "text": "Other AWS services use\\u00a0VPC endpoints\\u00a0within your Amazon VPCs. Many\\n    AWS services, including Amazon S3 and Amazon DynamoDB, support VPC endpoints, and this technology has\\n    been generalized in\\u00a0AWS PrivateLink. We\\n    recommend you use this approach to access AWS services, third-party services, and your own\\n    services hosted in other VPCs securely. All network traffic on AWS PrivateLink stays on the global\\n    AWS backbone and never traverses the internet. Connectivity can only be initiated by the\\n    consumer of the service, and not by the provider of the service. Using AWS PrivateLink for\\n    external service access allows you to create air-gapped VPCs with no internet access and helps\\n    protect your VPCs from external threat vectors. Third-party services can use AWS PrivateLink to\\n    allow their customers to connect to the services from their VPCs over private IP addresses. For\\n    VPC assets that need to make outbound connections to the internet, these can be made outbound\\n    only (one-way) through an AWS managed NAT gateway, outbound only internet gateway, or web\\n    proxies that you create and manage. \\nLevel of risk exposed if this best practice\\n    is not established: High\\n  \\nImplementation guidance\\n\\n\\n\\n          Control network traffic in a VPC: Implement VPC best practices\\n          to control traffic.\\n        \\n\\n\\n\\nAmazon VPC\\n                security\\n\\n\\n\\nVPC\\n                endpoints\\n\\n\\n\\nAmazon VPC\\n                security group\\n\\n\\n\\nNetwork\\n                ACLs\\n\\n\\n\\n Control traffic at the edge: Implement edge services, such as Amazon CloudFront, to provide an\\n          additional layer of protection and other features. \\n\\n\\n\\nAmazon CloudFront use\\n                cases\\n\\n\\n\\nAWS\\n                Global Accelerator\\n\\n\\n\\nAWS Web\\n                Application Firewall (AWS WAF)\\n\\n\\n\\nAmazon Route\\u00a053\\n\\n\\n\\nAmazon VPC Ingress Routing\\n\\n\\n\\n Control private network traffic: Implement services that protect your private traffic\\n          for your workload. \\n\\n\\n\\nAmazon VPC\\n                Peering\\n\\n\\n\\nAmazon VPC\\n                Endpoint Services (AWS PrivateLink)\\n\\n\\n\\nAmazon VPC\\n                Transit Gateway\\n\\n\\n\\nAWS Direct Connect\\n\\n\\n\\nAWS Site-to-Site\\n                VPN\\n\\n\\n\\nAWS Client VPN\\n\\n\\n\\nAmazon S3 Access\\n                Points\\n\\n\\n\\nResources\\n\\nRelated documents:\\n\\n\\n\\n\\nAWS Firewall Manager\\n\\n\\n\\nAmazon Inspector\\n\\n\\n\\nGetting\\n          started with AWS WAF\\n\\n\\n\\nRelated videos:\\n\\n\\n\\n\\nAWS Transit\\n          Gateway reference architectures for many VPCs\\n\\n\\n\\nApplication Acceleration and Protection with\\n            Amazon CloudFront, AWS WAF, and AWS Shield\\n\\n\\nRelated examples:\\n\\n\\n\\n\\nLab:\\n          Automated Deployment of VPC\\n\\n\\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC05-BP01 Create network layersSEC05-BP03 Automate network protectionDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.\", \"metadata\": {\"source\": \"https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_network_protection_layered.html\", \"title\": \"SEC05-BP02 Control traffic at all layers - Security Pillar\", \"description\": \"When architecting your network topology, you should examine the connectivity requirements of each component. For example, if a component requires internet accessibility (inbound and outbound), connectivity to VPCs, edge services, and external data centers.\", \"language\": \"en-US\"}}"
      },
      "location": {
        "s3Location": {
          "uri": "s3://l2ecb7c0-agent-kb-339712993987/kbaws_l2ecb7c0/security-pillar_50_sec_network_protection_layered.txt"
        },
        "type": "S3"
      }
    },
    {
      "content": {
        "text": "Other AWS services use\\u00a0VPC endpoints\\u00a0within your Amazon VPCs. Many\\n    AWS services, including Amazon S3 and Amazon DynamoDB, support VPC endpoints, and this technology has\\n    been generalized in\\u00a0AWS PrivateLink. We\\n    recommend you use this approach to access AWS services, third-party services, and your own\\n    services hosted in other VPCs securely. All network traffic on AWS PrivateLink stays on the global\\n    AWS backbone and never traverses the internet. Connectivity can only be initiated by the\\n    consumer of the service, and not by the provider of the service. Using AWS PrivateLink for\\n    external service access allows you to create air-gapped VPCs with no internet access and helps\\n    protect your VPCs from external threat vectors. Third-party services can use AWS PrivateLink to\\n    allow their customers to connect to the services from their VPCs over private IP addresses. For\\n    VPC assets that need to make outbound connections to the internet, these can be made outbound\\n    only (one-way) through an AWS managed NAT gateway, outbound only internet gateway, or web\\n    proxies that you create and manage. \\nLevel of risk exposed if this best practice\\n    is not established: High\\n  \\nImplementation guidance\\n\\n\\n\\n          Control network traffic in a VPC: Implement VPC best practices\\n          to control traffic.\\n        \\n\\n\\n\\nAmazon VPC\\n                security\\n\\n\\n\\nVPC\\n                endpoints\\n\\n\\n\\nAmazon VPC\\n                security group\\n\\n\\n\\nNetwork\\n                ACLs\\n\\n\\n\\n Control traffic at the edge: Implement edge services, such as Amazon CloudFront, to provide an\\n          additional layer of protection and other features. \\n\\n\\n\\nAmazon CloudFront use\\n                cases\\n\\n\\n\\nAWS\\n                Global Accelerator\\n\\n\\n\\nAWS Web\\n                Application Firewall (AWS WAF)\\n\\n\\n\\nAmazon Route\\u00a053\\n\\n\\n\\nAmazon VPC Ingress Routing\\n\\n\\n\\n Control private network traffic: Implement services that protect your private traffic\\n          for your workload. \\n\\n\\n\\nAmazon VPC\\n                Peering\\n\\n\\n\\nAmazon VPC\\n                Endpoint Services (AWS PrivateLink)\\n\\n\\n\\nAmazon VPC\\n                Transit Gateway\\n\\n\\n\\nAWS Direct Connect\\n\\n\\n\\nAWS Site-to-Site\\n                VPN\\n\\n\\n\\nAWS Client VPN\\n\\n\\n\\nAmazon S3 Access\\n                Points\\n\\n\\n\\nResources\\n\\nRelated documents:\\n\\n\\n\\n\\nAWS Firewall Manager\\n\\n\\n\\nAmazon Inspector\\n\\n\\n\\nGetting\\n          started with AWS WAF\\n\\n\\n\\nRelated videos:\\n\\n\\n\\n\\nAWS Transit\\n          Gateway reference architectures for many VPCs\\n\\n\\n\\nApplication Acceleration and Protection with\\n            Amazon CloudFront, AWS WAF, and AWS Shield\\n\\n\\nRelated examples:\\n\\n\\n\\n\\nLab:\\n          Automated Deployment of VPC\\n\\n\\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC05-BP01 Create network layersSEC05-BP03 Automate network protectionDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.\", \"metadata\": {\"source\": \"https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_network_protection_layered.html\", \"title\": \"SEC05-BP02 Control traffic at all layers - AWS Well-Architected Framework\", \"description\": \"When architecting your network topology, you should examine the connectivity requirements of each component. For example, if a component requires internet accessibility (inbound and outbound), connectivity to VPCs, edge services, and external data centers.\", \"language\": \"en-US\"}}"
      },
      "location": {
        "s3Location": {
          "uri": "s3://l2ecb7c0-agent-kb-339712993987/kbaws_l2ecb7c0/framework_320_sec_network_protection_layered.txt"
        },
        "type": "S3"
      }
    },
    {
      "content": {
        "text": "\\n      \\n\\nBenefits of establishing this best\\n    practice: This ensures that you can accommodate the\\n    growth of your workloads and continue to provide availability as you\\n    scale up.\\n  \\nLevel of risk exposed if this best practice\\n    is not established: Medium\\n  \\nImplementation guidance\\n\\n\\n        Plan your network to accommodate for growth, regulatory\\n        compliance, and integration with others. Growth can be\\n        underestimated, regulatory compliance can change, and acquisitions\\n        or private network connections can be difficult to implement\\n        without proper planning.\\n      \\n\\n\\n Select relevant AWS accounts and Regions based on your service requirements,\\n              latency, regulatory, and disaster recovery (DR) requirements. \\n\\n Identify your needs for regional VPC deployments. \\n\\n Identify the size of the VPCs. \\n\\n\\n Determine if you are going to deploy multi-VPC connectivity. \\n\\n\\n\\nWhat Is a Transit Gateway?\\n\\n\\n\\nSingle\\n                        Region Multi-VPC Connectivity\\n\\n\\n\\n Determine if you need segregated networking for regulatory requirements.\\n                \\n\\n Make VPCs as large as possible. The initial VPC CIDR block allocated to your\\n                  VPC cannot be changed or deleted, but you can add additional non-overlapping CIDR\\n                  blocks to the VPC. This however may fragment your address ranges. \\n\\n\\nResources\\n\\nRelated documents:\\n\\n\\n\\n\\nAPN\\n          Partner: partners that can help plan your networking\\n\\n\\n\\nAWS Marketplace for Network Infrastructure\\n\\n\\n\\nAmazon Virtual Private Cloud Connectivity Options Whitepaper\\n\\n\\n\\nMultiple\\n          data center HA network connectivity\\n\\n\\n\\nSingle\\n          Region Multi-VPC Connectivity\\n\\n\\n\\nWhat\\n          Is Amazon VPC?\\n\\n\\n\\nRelated videos:\\n\\n\\n\\n\\nAWS re:Invent\\n          2018: Advanced VPC Design and New Capabilities for Amazon VPC\\n          (NET303)\\n\\n\\n\\nAWS re:Invent\\n          2019: AWS Transit Gateway reference architectures for many\\n          VPCs (NET406-R1)\\n\\n\\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL02-BP02 Provision redundant connectivity between private\\n  networks in the cloud and on-premises environmentsREL02-BP04 Prefer hub-and-spoke topologies over many-to-many\\n  meshDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.\", \"metadata\": {\"source\": \"https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_planning_network_topology_ip_subnet_allocation.html\", \"title\": \"REL02-BP03 Ensure IP subnet allocation accounts for expansion and availability - Reliability Pillar\", \"description\": \"Amazon VPC IP address ranges must be large enough to accommodate workload requirements, including factoring in future expansion and allocation of IP addresses to subnets across Availability Zones. This includes load balancers, EC2 instances, and container-based applications.\", \"language\": \"en-US\"}}"
      },
      "location": {
        "s3Location": {
          "uri": "s3://l2ecb7c0-agent-kb-339712993987/kbaws_l2ecb7c0/reliability-pillar_749_rel_planning_network_topology_ip_subnet_allocation.txt"
        },
        "type": "S3"
      }
    }
  ]
}