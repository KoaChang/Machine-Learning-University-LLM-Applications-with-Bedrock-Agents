{"page_content": "PERF04-BP04 Use load balancing to distribute traffic across multiple resources - AWS Well-Architected FrameworkPERF04-BP04 Use load balancing to distribute traffic across multiple resources - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesPERF04-BP04 Use load balancing to distribute traffic across\n  multiple resources\n    Distribute traffic across multiple resources or services to allow\n    your workload to take advantage of the elasticity that the cloud\n    provides. You can also use load balancing for offloading encryption\n    termination to improve performance, reliability and manage and route\n    traffic effectively.\n  \nCommon anti-patterns:\n\n\n\n        You don\u2019t consider your workload requirements when choosing the\n        load balancer type.\n      \n\n\n        You don\u2019t leverage the load balancer features for performance\n        optimization.\n      \n\n\n        The workload is exposed directly to the internet without a load\n        balancer.\n      \n\n\n        You route all internet traffic through existing load balancers.\n      \n\n\n        You use generic TCP load balancing and making each compute node\n        handle SSL encryption.\n      \n\nBenefits of establishing this best\n    practice: A load balancer handles the varying load of\n    your application traffic in a single Availability Zone or across\n    multiple Availability Zones and enables high availability, automatic\n    scaling, and better utilization for your workload.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n      Load balancers act as the entry point for your workload, from\n      which point they distribute the traffic to your backend targets,\n      such as compute instances or containers, to improve utilization.\n    \n\n      Choosing the right load balancer type is the first step to\n      optimize your architecture. Start by listing your workload\n      characteristics, such as protocol (like TCP, HTTP, TLS, or\n      WebSockets), target type (like instances, containers, or\n      serverless), application requirements (like long running\n      connections, user authentication, or stickiness), and placement\n      (like Region, Local Zone, Outpost, or zonal isolation).\n    \n\n      AWS provides multiple models for your applications to use load\n      balancing. Application Load Balancer is best suited for load\n      balancing of HTTP and HTTPS traffic and provides advanced request\n      routing targeted at the delivery of modern application\n      architectures, including microservices and containers.\n    \n\nNetwork Load Balancer is best suited for load balancing of TCP\n      traffic where extreme performance is required. It is capable of\n      handling millions of requests per second while maintaining\n      ultra-low latencies, and it is optimized to handle sudden and\n      volatile traffic patterns.\n    \n\nElastic Load Balancing provides integrated certificate\n      management and SSL/TLS decryption, allowing you the flexibility to\n      centrally manage the SSL settings of the load balancer and offload\n      CPU intensive work from your workload.\n    \n\n      After choosing the right load balancer, you can start leveraging\n      its features to reduce the amount of effort your backend has to\n      do to serve the traffic.\n    \n\n      For example, using both Application Load Balancer (ALB) and\n      Network Load Balancer (NLB), you can perform SSL/TLS encryption\n      offloading, which is an opportunity to avoid the CPU-intensive TLS\n      handshake from being completed by your targets and also to improve\n      certificate management.\n    \n\n      When you configure SSL/TLS offloading in your load balancer, it\n      becomes responsible for the encryption of the traffic from and to\n      clients while delivering the traffic unencrypted to your\n      backends, freeing up your backend resources and improving the\n      response time for the clients.\n    \n\n      Application Load Balancer can also serve HTTP/2 traffic without\n      needing to support it on your targets. This simple decision can\n      improve your application response time, as HTTP/2 uses TCP\n      connections more efficiently.\n    \n\n      Your workload latency requirements should be considered when\n      defining the architecture. As an example, if you have a\n      latency-sensitive application, you may decide to use Network Load Balancer, which offers extremely low latencies. Alternatively, you\n      may decide to bring your workload closer to your customers by\n      leveraging Application Load Balancer\n      in\u00a0AWS       Local Zones\u00a0or\n      even\u00a0AWS Outposts.\n    \n\n      Another consideration for latency-sensitive workloads is\n      cross-zone load balancing. With cross-zone load balancing, each\n      load balancer node distributes traffic across the registered\n      targets in all allowed Availability Zones.\n    \n\n      Use Auto Scaling integrated with your load balancer. One of the\n      key aspects of a performance efficient system has to do with\n      right-sizing your backend resources. To do this, you can leverage\n      load balancer integrations for backend target resources. Using\n      the load balancer integration with Auto Scaling groups, targets\n      will be added or removed from the load balancer as required in\n      response to incoming traffic. Load balancers can also integrate\n      with Amazon ECS and Amazon EKS for containerized workloads.\n    \n\n\n\nAmazon ECS - Service load balancing\n\n\n\nApplication\n          load balancing on Amazon EKS\n\n\n\nNetwork\n          load balancing on Amazon EKS\n\n\nImplementation steps\n\n\n\n            Define your load balancing requirements including traffic\n            volume, availability and application scalability.\n          \n\n\n            Choose the right load balancer type for your application.\n          \n\n\n\n                Use Application Load Balancer for HTTP/HTTPS workloads.\n              \n\n\n                Use Network Load Balancer for non-HTTP workloads that\n                run on TCP or UDP.\n              \n\n\n                Use a combination of both\n                (ALB\n                as a target of NLB) if you want to leverage\n                features of both products. For example, you can do this\n                if you want to use the static IPs of NLB together with\n                HTTP header based routing from ALB, or if you want to\n                expose your HTTP workload to\n                an\u00a0AWS PrivateLink.\n              \n\n\n                For a full comparison of load balancers,\n                see\u00a0ELB\n                product comparison.\n              \n\n\n\n            Use SSL/TLS offloading if possible.\n          \n\n\n\n                Configure HTTPS/TLS listeners with\n                both\u00a0Application Load Balancer\u00a0and\u00a0Network Load Balancer\u00a0integrated\n                with\u00a0AWS Certificate Manager.\n              \n\n\n                Note that some workloads may require end-to-end\n                encryption for compliance reasons. In this case, it is a\n                requirement to allow encryption at the targets.\n              \n\n\n                For security best practices,\n                see\u00a0SEC09-BP02\n                Enforce encryption in transit.\n              \n\n\n\n            Select the right routing algorithm (only ALB).\n          \n\n\n\n                The routing algorithm can make a difference in how\n                well-used your backend targets are and therefore how\n                they impact performance. For example, ALB\n                provides\u00a0two\n                options for routing algorithms:\n              \n\n\nLeast outstanding\n                requests:\u00a0Use to achieve a better load\n                distribution to your backend targets for cases when the\n                requests for your application vary in complexity or your\n                targets vary in processing capability.\n              \n\n\nRound robin:\u00a0Use when\n                the requests and targets are similar, or if you need to\n                distribute requests equally among targets.\n              \n\n\n\n            Consider cross-zone or zonal isolation.\n          \n\n\n\n                Use cross-zone turned off (zonal isolation) for latency\n                improvements and zonal failure domains. It is turned off\n                by default in NLB and\n                in\u00a0ALB\n                you can turn it off per target group.\n              \n\n\n                Use cross-zone turned on for increased availability and\n                flexibility. By default, cross-zone is turned on for ALB\n                and\n                in\u00a0NLB\n                you can turn it on per target group.\n              \n\n\n\n            Turn on HTTP keep-alives for your HTTP workloads (only ALB).\n            With this feature, the load balancer can reuse backend\n            connections until the keep-alive timeout expires, improving\n            your HTTP request and response time and also reducing\n            resource utilization on your backend targets. For detail on\n            how to do this for Apache and Nginx,\n            see\u00a0What\n            are the optimal settings for using Apache or NGINX as a\n            backend server for ELB?\n\n\n\n            Turn on monitoring for your load balancer.\n          \n\n\n\n                Turn on access logs for\n                your\u00a0Application Load Balancer\u00a0and\u00a0Network Load Balancer.\n              \n\n\n                The main fields to consider for ALB\n                are\u00a0request_processing_time,\u00a0request_processing_time,\n                and\u00a0response_processing_time.\n              \n\n\n                The main fields to consider for NLB\n                are\u00a0connection_time\u00a0and\u00a0tls_handshake_time.\n              \n\n\n                Be ready to query the logs when you need them. You can\n                use Amazon Athena to query\n                both\u00a0ALB\n                logs\u00a0and\u00a0NLB\n                logs.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/perf_networking_load_balancing_distribute_traffic.html", "title": "PERF04-BP04 Use load balancing to distribute traffic across multiple resources - AWS Well-Architected Framework", "description": "Distribute traffic across multiple resources or services to allow your workload to take advantage of the elasticity that the cloud provides. You can also use load balancing for offloading encryption termination to improve performance, reliability and manage and route traffic effectively.", "language": "en-US"}}