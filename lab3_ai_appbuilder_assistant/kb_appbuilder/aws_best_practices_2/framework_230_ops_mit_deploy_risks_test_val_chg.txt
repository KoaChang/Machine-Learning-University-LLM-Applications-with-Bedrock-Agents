{"page_content": "OPS06-BP02 Test deployments - AWS Well-Architected FrameworkOPS06-BP02 Test deployments - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesOPS06-BP02 Test deployments\n    Test release procedures in pre-production by using the same deployment configuration, security controls, steps, and procedures as in production. Validate that all deployed steps are completed as expected, such as inspecting files, configurations, and services. Further test all changes with functional, integration, and load tests, along with any monitoring such as health checks. By doing these tests, you can identify deployment issues early with an opportunity to plan and mitigate them prior to production.\n  \n    You can create temporary parallel environments for testing every change. Automate the deployment of the test environments using infrastructure as code (IaC) to help reduce amount of work involved and ensure stability, consistency, and faster feature delivery.\n  \nDesired outcome: Your organization adopts a test-driven development culture that includes testing deployments. This ensures teams are focused on delivering business value rather than managing releases. Teams are engaged early upon identification of deployment risks to determine the appropriate course of mitigation.\n  \nCommon anti-patterns:\n\n\n\n        During production releases, untested deployments cause frequent issues that require troubleshooting and escalation.\n      \n\n\n        Your release contains infrastructure as code (IaC) that updates existing resources. You are unsure if the IaC runs successfully or causes impact to the resources.\n      \n\n\n        You deploy a new feature to your application. It doesn't work as intended and there is no visibility until it gets reported by impacted users.\n      \n\n\n        You update your certificates. You accidentally install the certificates to the wrong components, which goes undetected and impacts website visitors because a secure connection to the website can't be established.\n      \n\nBenefits of establishing this best\n      practice: Extensive testing in pre-production of deployment procedures, and the changes introduced by them, minimizes the potential impact to production caused by the deployments steps. This increases confidence during production release and minimizes operational support without slowing down velocity of the changes being delivered.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n        Testing your deployment process is as important as testing the changes that result from your deployment. This can be achieved by testing your deployment steps in a pre-production environment that mirrors production as closely as possible. Common issues, such as incomplete or incorrect deployment steps, or misconfigurations, can be caught as a result before going to production. In addition, you can test your recovery steps.\n      \n\nCustomer example\n\n\n      As part of their continuous integration and continuous delivery (CI/CD) pipeline, AnyCompany Retail performs the defined steps needed to release infrastructure and software updates for its customers in a production-like environment. The pipeline is comprised of pre-checks to detect drift (detecting changes to resources performed outside of your IaC) in resources prior to deployment, as well as validate actions that the IaC takes upon its initiation. It validates deployment steps, like verifying that certain files and configurations are in place and services are in running states and are responding correctly to health checks on local host before re-registering with the load balancer. Additionally, all changes flag a number of automated tests, such as functional, security, regression, integration, and load tests.\n    \nImplementation steps\n\n\n\n            Perform pre-install checks to mirror the pre-production environment to production.\n            \n          \n\n\n\n                Use drift detection to detect when resources have been changed outside of AWS CloudFormation.\n              \n\n\n                Use change sets to validate that the intent of a stack update matches the actions that AWS CloudFormation takes when the change set is initiated.\n              \n\n\n\n            This triggers a manual approval step in AWS CodePipeline to authorize the deployment to the pre-production environment.\n          \n\n\n            Use deployment configurations such as AWS CodeDeploy AppSpec files to define deployment and validation steps.\n          \n\n\n            Where applicable, integrate AWS CodeDeploy with other AWS services or integrate AWS CodeDeploy with partner product and services.\n          \n\n\nMonitor deployments using Amazon CloudWatch, AWS CloudTrail, and Amazon SNS event notifications.\n          \n\n\n            Perform post-deployment automated testing, including functional, security, regression, integration, and load testing.\n          \n\n\nTroubleshoot deployment issues.\n          \n\n\n            Successful validation of preceding steps should initiate a manual approval workflow to authorize deployment to production.\n          \n\n\nLevel of effort for the implementation plan: High\n      \nResources\n\nRelated best practices:\n\n\n\n\nOPS05-BP02 Test and validate changes\n\n\n\nRelated documents:\n\n\n\nAWS Builders' Library | Automating safe, hands-off deployments | Test Deployments\n        \n\nAWS Whitepaper | Practicing Continuous Integration and Continuous Delivery on AWS\n\n\n          The Story of Apollo - Amazon's Deployment Engine\n        \n\n\nHow\n          to test and debug AWS CodeDeploy locally before you ship your\n          code\n\n\n\n          Integrating Network Connectivity Testing with Infrastructure Deployment\n        \n\n\nRelated videos:\n\n\n\n\n          re:Invent 2020 | Testing software and systems at Amazon\n        \n\n\nRelated examples:\n\n\n\n\n          Tutorial | Deploy and Amazon ECS service with a validation test\n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsOPS06-BP01 Plan for unsuccessful changesOPS06-BP03 Employ safe deployment strategiesDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/ops_mit_deploy_risks_test_val_chg.html", "title": "OPS06-BP02 Test deployments - AWS Well-Architected Framework", "description": "Test release procedures in pre-production by using the same deployment configuration, security controls, steps, and procedures as in production. Validate that all deployed steps are completed as expected, such as inspecting files, configurations, and services. Further test all changes with functional, integration, and load tests, along with any monitoring such as health checks. By doing these tests, you can identify deployment issues early with an opportunity to plan and mitigate them prior to production.", "language": "en-US"}}