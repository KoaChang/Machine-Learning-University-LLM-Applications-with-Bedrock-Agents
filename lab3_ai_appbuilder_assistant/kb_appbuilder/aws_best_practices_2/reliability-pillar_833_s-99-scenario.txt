{"page_content": "2 9s (99%) scenario - Reliability Pillar2 9s (99%) scenario - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkMonitor resourcesAdapt to changes in demandImplement changeBack up dataArchitect for resiliencyTest resiliencyPlan for disaster recovery (DR)Availability design goalSummary2 9s (99%) scenario \n        These workloads are helpful to the business, but it\u2019s only an\n        inconvenience if they are unavailable. This\n        type of workload can be internal tooling, internal knowledge\n        management, or project tracking. Or these can be actual\n        customer-facing workloads but served from an experimental\n        service, with a feature toggle that can hide the service if\n        needed.\n      \n        These workloads can be deployed with one Region and one\n        Availability Zone.\n      \nMonitor resources\n\n          We will have simple monitoring, indicating whether the service\n          home page is returning an HTTP 200 OK status. When problems\n          occur, our playbook will indicate that logging from the\n          instance will be used to establish root cause.\n        \nAdapt to changes in demand\n\n          We will have playbooks for common hardware failures, urgent\n          software updates, and other disruptive changes.\n        \nImplement change\n\n          We will use AWS CloudFormation to define our infrastructure as\n          code, and specifically to speed up reconstruction in the event\n          of a failure.\n        \n\n          Software updates are manually performed using a runbook, with\n          downtime required for the installation and restart of the\n          service. If a problem happens during deployment, the runbook\n          describes how to roll back to the previous version.\n        \n\n          Any corrections of the error are done using analysis of logs\n          by the operations and development teams, and the correction is\n          deployed after the fix is prioritized and completed.\n        \nBack up data\n\n          We will use a vendor or purpose built backup solution to send\n          encrypted backup data to Amazon S3 using a runbook. We will\n          test that the backups work by restoring the data and ensuring\n          the ability to use it on a regular basis using a runbook. We\n          configure versioning on our Amazon S3 objects and remove\n          permissions for deletion of the backups. We use an Amazon S3\n          bucket lifecycle policy to archive or permanently delete\n          according to our requirements.\n        \nArchitect for resiliency\n\n          Workloads are deployed with one Region and one Availability\n          Zone. We deploy the application, including the database, to a\n          single instance.\n        \nTest resiliency\n\n          The deployment pipeline of new software is scheduled, with\n          some unit testing, but mostly white-box/black-box testing of\n          the assembled workload.\n        \nPlan for disaster recovery (DR)\n\n          During failures we wait for the failure to finish, optionally\n          routing requests to a static website using DNS modification\n          via a runbook. The recovery time for this will be determined\n          by the speed at which the infrastructure can be deployed and\n          the database restored to the most recent backup. This\n          deployment can either be into the same Availability Zone, or\n          into a different Availability Zone, in the event of an\n          Availability Zone failure, using a runbook.\n        \nAvailability design goal\n\n          We take 30 minutes to understand and decide to invoke\n          recovery, deploy the whole stack in AWS CloudFormation in 10\n          minutes, assume that we deploy to a new Availability Zone, and\n          assume that the database can be restored in 30 minutes. This\n          implies that it takes about 70 minutes to recover from a\n          failure. Assuming one failure per quarter, our estimated\n          impact time for the year is 280 minutes, or four hours and 40\n          minutes.\n        \n\n          This means that the upper limit on availability is 99.9%. The\n          actual availability also depends on the real rate of failure,\n          the duration of failure, and how quickly each failure actually\n          recovers. For this architecture, we require the application to\n          be offline for updates (estimating 24 hours per year: four\n          hours per change, six times per year), plus actual events. So\n          referring to the table on application availability earlier in\n          the whitepaper we see that our\n          availability design goal is\n          99%.\n        \nSummary\n\n\n\nTopic\n\n\nImplementation\n\n\n\n\n\n                  Monitor resources\n                \n\n                  Site health check only; no alerting.\n                \n\n\n\n                  Adapt to changes in demand\n                \n\n                  Vertical scaling via re-deployment.\n                \n\n\n\n                  Implement change\n                \n\n                  Runbook for deploy and rollback.\n                \n\n\n\n                  Back up data\n                \n\n                  Runbook for backup and restore.\n                \n\n\n\n                  Architect for resiliency\n                \n\n                  Complete rebuild; restore from backup.\n                \n\n\n\n                  Test resiliency\n                \n\n                  Complete rebuild; restore from backup.\n                \n\n\n\n                  Plan for disaster recovery (DR)\n                \n\n                  Encrypted backups, restore to different Availability\n                  Zone if needed.\n                \n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSingle-Region scenarios3 9s (99.9%) scenarioDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/s-99-scenario.html", "title": "2 9s (99%) scenario - Reliability Pillar", "description": "These workloads are helpful to the business, but it\u2019s only an inconvenience if they are unavailable. This type of workload can be internal tooling, internal knowledge management, or project tracking. Or these can be actual customer-facing workloads but served from an experimental service, with a feature toggle that can hide the service if needed.", "language": "en-US"}}