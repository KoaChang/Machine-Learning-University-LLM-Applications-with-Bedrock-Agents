{"page_content": "REL11-BP03 Automate healing on all layers - Reliability PillarREL11-BP03 Automate healing on all layers - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidance Resources REL11-BP03 Automate healing on all layers\n    Upon detection of a failure, use automated capabilities to perform\n    actions to remediate. Degradations may be automatically healed\n    through internal service mechanisms or require resources to be\n    restarted or removed through remediation actions.\n  \n    For self-managed applications and cross-Region healing, recovery\n    designs and automated healing processes can be pulled from\n    existing\n      best practices.\n  \n    The ability to restart or remove a resource is an important tool to\n    remediate failures. A best practice is to make services stateless\n    where possible. This prevents loss of data or availability on\n    resource restart. In the cloud, you can (and generally should)\n    replace the entire resource (for example, a compute instance or\n    serverless function) as part of the restart. The restart itself is a\n    simple and reliable way to recover from failure. Many different\n    types of failures occur in workloads. Failures can occur in\n    hardware, software, communications, and operations.\n  \n    Restarting or retrying also applies to network requests. Apply the\n    same recovery approach to both a network timeout and a dependency\n    failure where the dependency returns an error. Both events have a\n    similar effect on the system, so rather than attempting to make\n    either event a special case, apply a similar strategy of limited\n    retry with exponential backoff and jitter. Ability to restart is a\n    recovery mechanism featured in recovery-oriented computing and high\n    availability cluster architectures.\n  \nDesired outcome: Automated actions are performed to remediate detection of a failure.\n  \nCommon anti-patterns:\n\n\n\n        Provisioning resources without autoscaling.\n      \n\n\n        Deploying applications in instances or containers individually.\n      \n\n\n        Deploying applications that cannot be deployed into multiple\n        locations without using automatic recovery.\n      \n\n\n        Manually healing applications that automatic scaling and\n        automatic recovery fail to heal.\n      \n\n\n        No automation to failover databases.\n      \n\n\n        Lack automated methods to reroute traffic to new endpoints.\n      \n\n\n        No storage replication.\n      \n\nBenefits of establishing this best\n      practice: Automated healing can reduce your mean time to recovery and improve\n    your availability.\n  \nLevel of risk exposed if this best practice\n      is not established: High\n  \nImplementation guidance \n\n      Designs for Amazon EKS or other Kubernetes services should include both\n      minimum and maximum replica or stateful sets and the minimum\n      cluster and node group sizing. These mechanisms provide a minimum\n      amount of continually-available processing resources while\n      automatically remediating any failures using the Kubernetes\n      control plane.\n    \n\n      Design patterns that are accessed through a load balancer using\n      compute clusters should leverage Auto Scaling groups. Elastic Load Balancing (ELB) automatically distributes incoming\n      application traffic across multiple targets and virtual\n      appliances in one or more Availability Zones (AZs).\n    \n\n      Clustered compute-based designs that do not use load balancing\n      should have their size designed for loss of at least one node.\n      This will allow for the service to maintain itself running in\n      potentially reduced capacity while it's recovering a new node.\n      Example services are Mongo, DynamoDB Accelerator, Amazon Redshift, Amazon EMR,\n      Cassandra, Kafka, MSK-EC2, Couchbase, ELK, and Amazon OpenSearch Service.\n      Many of these services can be designed with additional auto\n      healing features. Some cluster technologies must generate an\n      alert upon the loss a node triggering an automated or manual\n      workflow to recreate a new node. This workflow can be automated\n      using AWS Systems Manager to remediate issues quickly.\n    \n\n      Amazon EventBridge can be used to monitor and filter for events\n      such as CloudWatch alarms or changes in state in other AWS\n      services. Based on event information, it can then invoke AWS Lambda, Systems Manager Automation, or other targets to run\n      custom remediation logic on your workload. Amazon EC2 Auto Scaling can be configured to check for EC2 instance health. If\n      the instance is in any state other than running, or if the\n      system status is impaired, Amazon EC2 Auto Scaling considers the\n      instance to be unhealthy and launches a replacement instance.\n      For large-scale replacements (such as the loss of an entire\n      Availability Zone), static stability is preferred for high\n      availability.\n    \nImplementation steps\n\n\n\n            Use Auto Scaling groups to deploy tiers in a workload.\n            Auto Scaling can perform self-healing on stateless\n            applications and add or remove capacity.\n          \n\n\n            For compute instances noted previously, use\n            load\n              balancing and choose the appropriate type of load\n            balancer.\n          \n\n\n            Consider healing for Amazon RDS. With standby instances, configure\n            for\n            auto\n              failover to the standby instance. For Amazon RDS Read\n            Replica, automated workflow is required to make a read\n            replica primary.\n          \n\n\n            Implement\n            automatic\n              recovery on EC2 instances that have applications\n            deployed that cannot be deployed in multiple locations, and\n            can tolerate rebooting upon failures. Automatic recovery can\n            be used to replace failed hardware and restart the instance\n            when the application is not capable of being deployed in\n            multiple locations. The instance metadata and associated IP\n            addresses are kept, as well as the\n            EBS volumes and mount points to\n            Amazon Elastic File System or\n            File\n              Systems for Lustre and\n            Windows.\n            Using\n            AWS OpsWorks, you can configure automatic healing of EC2\n            instances at the layer level.\n          \n\n\n            Implement automated recovery using\n            AWS Step Functions and\n            AWS Lambda when you cannot use automatic scaling or\n            automatic recovery, or when automatic recovery fails. When\n            you cannot use automatic scaling, and either cannot use\n            automatic recovery or automatic recovery fails, you can\n            automate the healing using AWS Step Functions and AWS Lambda.\n          \n\n\nAmazon EventBridge can be used to monitor and filter for\n            events such as\n            CloudWatch\n              alarms or changes in state in other AWS services.\n            Based on event information, it can then invoke AWS Lambda\n            (or other targets) to run custom remediation logic on your\n            workload.\n          \n\nResources \n\nRelated best practices:\n\n\n\n\nAvailability\n            Definition\n\n\n\nREL11-BP01\n            Monitor all components of the workload to detect\n            failures\n\n\n\nRelated documents:\n\n\n\n\nHow\n            AWS Auto Scaling Works\n\n\n\nAmazon EC2 Automatic Recovery\n\n\n\nAmazon Elastic Block Store (Amazon EBS)\n\n\n\nAmazon Elastic File System (Amazon EFS)\n\n\n\nWhat\n            is Amazon FSx for Lustre?\n\n\n\nWhat\n            is Amazon FSx for Windows File Server?\n\n\n\nAWS OpsWorks: Using Auto Healing to Replace Failed\n            Instances\n\n\n\nWhat\n            is AWS Step Functions?\n\n\n\nWhat\n            is AWS Lambda?\n\n\n\nWhat\n            Is Amazon EventBridge?\n\n\n\nUsing\n            Amazon CloudWatch Alarms\n\n\n\nAmazon RDS\n            Failover\n\n\n\nSSM\n            - Systems Manager Automation\n\n\n\nResilient\n            Architecture Best Practices\n\n\n\nRelated videos:\n\n\n\n\nAutomatically\n            Provision and Scale OpenSearch Service\n\n\n\nAmazon RDS\n            Failover Automatically\n\n\n\nRelated examples:\n\n\n\n\nWorkshop\n            on Auto Scaling\n\n\n\nAmazon RDS\n            Failover Workshop\n\n\n\nRelated tools:\n\n\n\n\nCloudWatch\n\n\n\nCloudWatch\n            X-Ray\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL11-BP02 Fail over to healthy resourcesREL11-BP04 Rely on the data plane and not the control plane\n  during recoveryDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_auto_healing_system.html", "title": "REL11-BP03 Automate healing on all layers - Reliability Pillar", "description": "Upon detection of a failure, use automated capabilities to perform actions to remediate. Degradations may be automatically healed through internal service mechanisms or require resources to be restarted or removed through remediation actions.", "language": "en-US"}}