{"page_content": "Design principles - Reliability PillarDesign principles - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkDesign principles\n      In the cloud, there are a number of principles that can help you\n      increase reliability. Keep these in mind as we discuss best\n      practices:\n    \n\n\nAutomatically recover from\n          failure: By monitoring a workload for key\n          performance indicators (KPIs), you can run automation when\n          a threshold is breached. These KPIs should be a measure of\n          business value, not of the technical aspects of the operation\n          of the service. This allows for automatic notification and\n          tracking of failures, and for automated recovery processes\n          that work around or repair the failure. With more\n          sophisticated automation, it\u2019s possible to anticipate and\n          remediate failures before they occur.\n        \n\n\nTest recovery procedures:\n          In an on-premises environment, testing is often conducted to\n          prove that the workload works in a particular scenario.\n          Testing is not typically used to validate recovery strategies.\n          In the cloud, you can test how your workload fails, and you\n          can validate your recovery procedures. You can use automation\n          to simulate different failures or to recreate scenarios that\n          led to failures before. This approach exposes failure pathways\n          that you can test and fix before a real\n          failure scenario occurs, thus reducing risk.\n        \n\n\nScale horizontally to increase\n          aggregate workload availability: Replace one large\n          resource with multiple small resources to reduce the impact of\n          a single failure on the overall workload. Distribute requests\n          across multiple, smaller resources to ensure that they don\u2019t\n          share a common point of failure.\n        \n\n\nStop guessing capacity: A common cause of failure in\n          on-premises workloads is resource saturation, when the demands placed on a workload exceed\n          the capacity of that workload (this is often the objective of denial of service attacks).\n          In the cloud, you can monitor demand and workload utilization, and automate the addition\n          or removal of resources to maintain the optimal level to satisfy demand without over- or\n          under-provisioning. There are still limits, but some quotas can be controlled and others\n          can be managed (see Manage Service\n            Quotas and Constraints). \n\n\nManage change through \n          automation: Changes to your infrastructure should\n          be made using automation. The changes that need to be managed\n          include changes to the automation, which then can be tracked\n          and reviewed.\n        \n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsShared Responsibility Model for ResiliencyDefinitionsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/design-principles.html", "title": "Design principles - Reliability Pillar", "description": "In the cloud, there are a number of principles that can help you increase reliability. Keep these in mind as we discuss best practices:", "language": "en-US"}}