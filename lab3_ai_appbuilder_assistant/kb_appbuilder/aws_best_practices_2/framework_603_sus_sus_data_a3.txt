{"page_content": "SUS04-BP02 Use technologies that support data access and storage patterns - AWS Well-Architected FrameworkSUS04-BP02 Use technologies that support data access and storage patterns - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesSUS04-BP02 Use technologies that support data access and\n  storage patterns\n    Use storage technologies that best support how your \n    data is accessed and stored to minimize the resources \n    provisioned while supporting your workload.\n  \nCommon anti-patterns:\n\n\n\n        You assume that all workloads have similar data storage and access patterns.\n      \n\n\n        You only use one tier of storage, assuming all workloads fit within that tier.\n      \n\n\n        You assume that data access patterns will stay consistent over time.\n      \n\nBenefits of establishing this best practice: Selecting \n    and optimizing your storage technologies based on data access and storage patterns will \n    help you reduce the required cloud resources to meet your business needs and improve \n    the overall efficiency of cloud workload.\n  \nLevel of risk exposed if this best practice\n    is not established: Low\n  \nImplementation guidance\n\n      Select the storage solution that aligns best to your access \n      patterns, or consider changing your access patterns to align \n      with the storage solution to maximize performance efficiency. \n    \nImplementation steps\n\n\n\n          Evaluate your data characteristics and access pattern to \n          collect the key characteristics of your storage needs. \n          Key characteristics to consider include:\n        \n\n\n\nData type: structured, semi-structured, \n              unstructured \n            \n\n\nData growth: bounded, unbounded \n            \n\n\nData durability: persistent, ephemeral, \n              transient \n            \n\n\nAccess patterns: reads or writes, \n              frequency, spiky, or consistent\n            \n\n\n\n          Migrate data to the appropriate storage technology that supports \n          your data characteristics and access pattern. Here are some \n          examples of AWS storage technologies and their \n          key characteristics:\n        \n\n\nType\nTechnology\nKey characteristics\n\n\n\n\n\n                    Object storage\n                  \n\n\nAmazon S3\n\n\n\n                    An object storage service with unlimited scalability, \n                    high availability, and multiple options for accessibility. \n                    Transferring and accessing objects in and out of Amazon S3 \n                    can use a service, such as \n                    Transfer Acceleration\n                    or Access \n                    Points, to support your location, security needs, and access \n                    patterns.\n                  \n\n\n\n\n\n                    Archiving storage\n                  \n\n\nAmazon S3 Glacier\n\n\n\n                    Storage class of Amazon S3 built for data-archiving. \n                  \n\n\n\n\n\n                    Shared file system\n                  \n\n\nAmazon Elastic File System (Amazon EFS)\n\n\n\n                    Mountable file system that can be accessed by multiple \n                    types of compute solutions. Amazon EFS automatically \n                    grows and shrinks storage and is performance-optimized \n                    to deliver consistent low latencies.\n                  \n\n\n\n\n\n                    Shared file system\n                  \n\n\nAmazon FSx\n\n\n\n                    Built on the latest AWS compute solutions to support \n                    four commonly used file systems: NetApp ONTAP, OpenZFS, \n                    Windows File Server, and Lustre. Amazon FSx \n                    latency, \n                    throughput, and IOPS vary per file system and should be \n                    considered when selecting the right file system for your \n                    workload needs.\n                  \n\n\n\n\n\n                    Block storage\n                  \n\n\nAmazon Elastic Block Store (Amazon EBS)\n\n\n\n                    Scalable, high-performance block-storage service \n                    designed for Amazon Elastic Compute Cloud (Amazon EC2). \n                    Amazon EBS includes SSD-backed storage for transactional, \n                    IOPS-intensive workloads and HDD-backed storage for \n                    throughput-intensive workloads.\n                  \n\n\n\n\nRelational database\n\n\nAmazon Aurora, Amazon RDS, Amazon Redshift\n\n\nDesigned to support ACID (atomicity, consistency, isolation, durability) transactions and maintain referential integrity and strong data consistency. Many traditional applications, enterprise resource planning (ERP), customer relationship management (CRM), and ecommerce systems use relational databases to store their data.\n\n\n\n\nKey-value database\n\n\nAmazon DynamoDB\n\n\nOptimized for common access patterns, typically to store and retrieve large volumes of data. High-traffic web apps, ecommerce systems, and gaming applications are typical use-cases for key-value databases.\n\n\n\n\n\n          For storage systems that are a fixed size, such as \n          Amazon EBS or Amazon FSx, monitor the available \n          storage space and automate storage allocation on \n          reaching a threshold. You can leverage Amazon CloudWatch \n          to collect and analyze different metrics for \n          Amazon EBS and \n          Amazon FSx.\n        \n\n\n          Amazon S3 Storage Classes can be configured at the object \n          level and a single bucket can contain objects stored \n          across all of the storage classes. \n        \n\n\n          You can also use \n          Amazon S3 Lifecycle policies to automatically transition objects \n          between storage classes or remove data without any application changes. \n          In general, you have to make a trade-off between resource\n          efficiency, access latency, and reliability when considering \n          these storage mechanisms. \n        \n\nResources\n\nRelated documents:\n\n\n\n\nAmazon EBS volume types\n\n\n\nAmazon EC2 instance store\n\n\n\nAmazon S3 Intelligent-Tiering\n\n\n\n          Amazon EBS I/O Characteristics\n        \n\n\n          Using Amazon S3 storage classes\n        \n\n\nWhat\n          is Amazon S3 Glacier?\n\n\n\nRelated videos:\n\n\n\n\nArchitectural\n          Patterns for Data Lakes on AWS\n\n\n\n          Deep dive on Amazon EBS (STG303-R1)\n        \n\n\n          Optimize your storage performance with Amazon S3 (STG343)\n        \n\n\n          Building modern data architectures on AWS\n\n\nRelated examples:\n\n\n\n\n          Amazon EFS CSI Driver\n        \n\n\n          Amazon EBS CSI Driver\n        \n\n\n          Amazon EFS Utilities\n        \n\n\n          Amazon EBS Autoscale\n        \n\n\n          Amazon S3 Examples\n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSUS04-BP01 Implement a data classification policySUS04-BP03 Use policies to manage the lifecycle of your datasetsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sus_sus_data_a3.html", "title": "SUS04-BP02 Use technologies that support data access and storage patterns - AWS Well-Architected Framework", "description": "Use storage technologies that best support how your data is accessed and stored to minimize the resources provisioned while supporting your workload.", "language": "en-US"}}