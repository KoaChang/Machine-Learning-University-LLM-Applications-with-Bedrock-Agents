{"page_content": "REL04-BP02 Implement loosely coupled dependencies - Reliability PillarREL04-BP02 Implement loosely coupled dependencies - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesREL04-BP02 Implement loosely coupled dependencies\n\nThis best practice was updated with new guidance on December 6, 2023.\n\n\n    Dependencies such as queuing systems, streaming systems, workflows,\n    and load balancers are loosely coupled. Loose coupling helps isolate\n    behavior of a component from other components that depend on it,\n    increasing resiliency and agility.\n  \n    Decoupling dependencies, such as queuing systems, streaming systems, and workflows, help minimize the impact of changes or failure on a system. This separation isolates a component's behavior from affecting others that depend on it, improving resilience and agility. \n  \n    In tightly coupled systems, changes to one component can necessitate changes in other components that rely on it, resulting in degraded performance across all components. Loose coupling breaks this dependency so that dependent components only need to know the versioned and published interface. Implementing loose coupling between dependencies isolates a failure in one from impacting another.\n  \n    Loose coupling allows you to modify code or add features to a component while minimizing risk to other components that depend on it. It also allows for granular resilience at a component level where you can scale out or even change underlying implementation of the dependency.\n  \n    To further improve resiliency through loose coupling, make component\n    interactions asynchronous where possible. This model is suitable for\n    any interaction that does not need an immediate response and where\n    an acknowledgment that a request has been registered will suffice.\n    It involves one component that generates events and another that\n    consumes them. The two components do not integrate through direct\n    point-to-point interaction but usually through an intermediate\n    durable storage layer, such as an Amazon SQS queue, a streaming data\n    platform such as Amazon Kinesis, or AWS Step Functions.\n  \n\nFigure 4: Dependencies such as queuing systems and load\n        balancers are loosely coupled\n\n    Amazon SQS queues and AWS Step Functions are just two ways to\n    add an intermediate layer for loose coupling. Event-driven\n    architectures can also be built in the AWS Cloud using Amazon EventBridge, which can abstract clients (event producers) from the\n    services they rely on (event consumers). Amazon Simple Notification Service (Amazon SNS) is an effective solution when you need\n    high-throughput, push-based, many-to-many messaging. Using Amazon SNS topics, your publisher systems can fan out messages to a large\n    number of subscriber endpoints for parallel processing.\n  \n    While queues offer several advantages, in most hard real-time\n    systems, requests older than a threshold time (often seconds) should\n    be considered stale (the client has given up and is no longer\n    waiting for a response), and not processed. This way more recent\n    (and likely still valid requests) can be processed instead.\n  \nDesired outcome: Implementing loosely coupled dependencies allows you to minimize the surface area for failure to a component level, which helps diagnose and resolve issues. It also simplifies development cycles, allowing teams to implement changes at a modular level without affecting the performance of other components that depend on it. This approach provides the capability to scale out at a component level based on resource needs, as well as utilization of a component contributing to cost-effectiveness.\n  \nCommon anti-patterns:\n\n\n\n        Deploying a monolithic workload.      \n      \n\n\n        Directly invoking APIs between workload tiers with no capability\n        of failover or asynchronous processing of the request.\n      \n\n\n        Tight coupling using shared data. Loosely coupled systems should avoid sharing data through shared databases or other forms of tightly coupled data storage, which can reintroduce tight coupling and hinder scalability.\n      \n\n\n        Ignoring back pressure. Your workload should have the ability to slow down or stop incoming data when a component can't process it at the same rate.\n      \n\nBenefits of establishing this best\n    practice: Loose coupling helps isolate behavior of a\n    component from other components that depend on it, increasing\n    resiliency and agility. Failure in one component is isolated from\n    others.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n      Implement loosely coupled dependencies. There are various solutions that allow you to build loosely coupled applications. These include services for implementing fully managed queues, automated workflows, react to events,  and APIs among others which can help isolate behavior of components from other components, and as such increasing resilience and agility.\n    \n\n\n\nBuild event-driven architectures: Amazon EventBridge helps you build loosely coupled and distributed event-driven architectures.\n        \n\n\nImplement queues in distributed systems: You can use Amazon Simple Queue Service (Amazon SQS) to integrate and decouple distributed systems.\n        \n\n\nContainerize components as microservices: Microservices allow teams to build applications composed of small independent components which communicate over well-defined APIs. Amazon Elastic Container Service (Amazon ECS), and Amazon Elastic Kubernetes Service (Amazon EKS) can help you get started faster with containers.\n        \n\n\nManage workflows with Step Functions: Step Functions help you coordinate multiple AWS services into flexible workflows.\n        \n\n\nLeverage publish-subscribe (pub/sub) messaging architectures: Amazon Simple Notification Service (Amazon SNS) provides message delivery from publishers to subscribers (also known as producers and consumers). \n        \n\nImplementation steps\n\n\n\n            Components in an event-driven architecture are initiated by events. Events are actions that happen in a system, such as a user adding an item to a cart. When an action is successful, an event is generated that actuates the next component of the system. \n          \n\n\n\n                Building Event-driven Applications with Amazon EventBridge\n              \n\nAWS re:Invent 2022 - Designing Event-Driven Integrations using Amazon EventBridge\n              \n\n\n\n            Distributed messaging systems have three main parts that need to be implemented for a queue based architecture. They include components of the distributed system, the queue that is used for decoupling (distributed on Amazon SQS servers), and the messages in the queue. A typical system has producers which initiate the message into the queue, and the consumer which receives the message from the queue. The queue stores messages across multiple Amazon SQS servers for redundancy.\n          \n\n\n\n                Basic Amazon SQS architecture\n              \n\n\n                Send Messages Between Distributed Applications with Amazon Simple Queue Service\n              \n\n\n\n            Microservices, when well-utilized, enhance maintainability and boost scalability, as loosely coupled components are managed by independent teams. It also allows for the isolation of behaviors to a single component in case of changes.\n          \n\n\n\n                Implementing Microservices on AWS\n\n\n                Let's Architect! Architecting microservices with containers\n              \n\n\n\n            With AWS Step Functions you can build distributed applications, automate processes, orchestrate microservices, among other things. The orchestration of multiple components into an automated workflow allows you to decouple dependencies in your application.\n          \n\n\n\n                Create a Serverless Workflow with AWS Step Functions and AWS Lambda\n\n\n                Getting Started with AWS Step Functions\n\n\nResources\n\nRelated documents:\n\n\n\n\nAmazon EC2: Ensuring Idempotency\n\n\n\nThe\n          Amazon Builders' Library: Challenges with distributed\n          systems\n\n\n\nThe\n          Amazon Builders' Library: Reliability, constant work, and a\n          good cup of coffee\n\n\n\nWhat\n          Is Amazon EventBridge?\n\n\n\nWhat\n          Is Amazon Simple Queue Service?\n\n\n\n          Break up with your monolith\n        \n\n\n          Orchestrate Queue-based Microservices with AWS Step Functions and Amazon SQS\n        \n\n\n          Basic Amazon SQS architecture\n        \n\n\n          Queue-Based Architecture\n        \n\n\nRelated videos:\n\n\n\n\nAWS New York\n          Summit 2019: Intro to Event-driven Architectures and Amazon EventBridge (MAD205)\n\n\n\nAWS re:Invent\n          2018: Close Loops and Opening Minds: How to Take Control of Systems, Big and Small ARC337 (includes loose coupling,\n          constant work, static stability)\n\n\n\nAWS re:Invent\n          2019: Moving to event-driven architectures (SVS308)\n\n\nAWS re:Invent 2019: Scalable serverless event-driven applications using Amazon SQS and Lambda\n        \n\nAWS re:Invent 2022 - Designing event-driven integrations using Amazon EventBridge\n        \n\nAWS re:Invent 2017: Elastic Load Balancing Deep Dive and Best Practices\n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL04-BP01 Identify which kind of distributed system is\n  requiredREL04-BP03 Do constant workDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_prevent_interaction_failure_loosely_coupled_system.html", "title": "REL04-BP02 Implement loosely coupled dependencies - Reliability Pillar", "description": "Dependencies such as queuing systems, streaming systems, workflows, and load balancers are loosely coupled. Loose coupling helps isolate behavior of a component from other components that depend on it, increasing resiliency and agility.", "language": "en-US"}}