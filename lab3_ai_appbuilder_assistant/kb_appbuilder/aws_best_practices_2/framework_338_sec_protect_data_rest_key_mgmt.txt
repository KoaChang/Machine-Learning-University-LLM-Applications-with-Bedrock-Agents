{"page_content": "SEC08-BP01 Implement secure key management - AWS Well-Architected FrameworkSEC08-BP01 Implement secure key management - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesSEC08-BP01 Implement secure key management\n    Secure key management includes the storage, rotation, access\n    control, and monitoring of key material required to secure data at\n    rest for your workload.\n  \nDesired outcome: A scalable, repeatable, and automated key\n    management mechanism. The mechanism should provide the ability to enforce least privilege access\n    to key material, provide the correct balance between key availability, confidentiality, and\n    integrity. Access to keys should be monitored, and key material rotated through an automated\n    process. Key material should never be accessible to human identities. Common anti-patterns:\n\n\n\n        Human access to unencrypted key material.\n      \n\n\n        Creating custom cryptographic algorithms.\n      \n\n\n        Overly broad permissions to access key material.\n      \n\nBenefits of establishing this best practice: By establishing a\n    secure key management mechanism for your workload, you can help provide protection for your\n    content against unauthorized access. Additionally, you may be subject to regulatory requirements\n    to encrypt your data. An effective key management solution can provide technical mechanisms\n    aligned to those regulations to protect key material. \nLevel of risk exposed if this best practice\n      is not established: High\n  \nImplementation guidance\n\n      Many regulatory requirements and best practices include encryption\n      of data at rest as a fundamental security control. In order to\n      comply with this control, your workload needs a mechanism to\n      securely store and manage the key material used to encrypt your\n      data at rest.\n    \n\n      AWS offers AWS Key Management Service (AWS KMS) to provide\n      durable, secure, and redundant storage for AWS KMS keys.\n      Many\n        AWS services integrate with AWS KMS to support encryption\n      of your data. AWS KMS uses FIPS 140-2 Level 3 validated hardware\n      security modules to protect your keys. There is no mechanism to\n      export AWS KMS keys in plain text.\n    \n\n      When deploying workloads using a multi-account strategy, it is\n      considered\n      best\n        practice to keep AWS KMS keys in the same account as the\n      workload that uses them. In this distributed model, responsibility\n      for managing the AWS KMS keys resides with the application team. In\n      other use cases, organizations may choose to store AWS KMS keys into a\n      centralized account. This centralized structure requires\n      additional policies to enable the cross-account access required\n      for the workload account to access keys stored in the centralized\n      account, but may be more applicable in use cases where a single\n      key is shared across multiple AWS accounts.\n    \n\n      Regardless of where the key material is stored, access to the key\n      should be tightly controlled through the use of\n      key\n        policies and IAM policies. Key policies are the primary way\n      to control access to a AWS KMS key. In addition, AWS KMS key grants can\n      provide access to AWS services to encrypt and decrypt data on your\n      behalf. Take time to review the\n      best\n        practices for access control to your AWS KMS keys.\n    \n\n      It is best practice to monitor the use of encryption keys to\n      detect unusual access patterns. Operations performed using AWS\n      managed keys and customer managed keys stored in AWS KMS can be logged\n      in AWS CloudTrail and should be reviewed periodically. Special\n      attention should be placed on monitoring key destruction events.\n      To mitigate accidental or malicious destruction of key material,\n      key destruction events do not delete the key material immediately.\n      Attempts to delete keys in AWS KMS are subject to a\n      waiting\n        period, which defaults to 30 days, providing administrators\n      time to review these actions and roll back the request if\n      necessary.\n    \n\n      Most AWS services use AWS KMS in a way that is transparent to you -\n      your only requirement is to decide whether to use an AWS managed\n      or customer managed key. If your workload requires the direct use\n      of AWS KMS to encrypt or decrypt data, the best practice is to use\n      envelope\n        encryption to protect your data. The\n      AWS       Encryption SDK can provide your applications client-side\n      encryption primitives to implement envelope encryption and\n      integrate with AWS KMS.\n    \nImplementation steps\n\n\n\n            Determine the appropriate\n            key\n              management options (AWS managed or customer managed)\n            for the key.\n          \n\n\n\n                For ease of use, AWS offers AWS owned and AWS managed\n                keys for most services, which provide encryption-at-rest\n                capability without the need to manage key material or\n                key policies.\n              \n\n\n                When using customer managed keys, consider the default\n                key store to provide the best balance between agility,\n                security, data sovereignty, and availability. Other use\n                cases may require the use of custom key stores with\n                AWS CloudHSM\n                or the\n                external\n                  key store.\n              \n\n\n\n            Review the list of services that you are using for your\n            workload to understand how AWS KMS integrates with the service.\n            For example, EC2 instances can use encrypted EBS volumes,\n            verifying that Amazon EBS snapshots created from those volumes are\n            also encrypted using a customer managed key and mitigating\n            accidental disclosure of unencrypted snapshot data.\n          \n\n\n\nHow\n                  AWS services use AWS KMS\n\n\n\n                For detailed information about the encryption options\n                that an AWS service offers, see the Encryption\n                  at Rest topic in the user guide or the\n                developer guide for the service.\n              \n\n\n\n            Implement AWS KMS: AWS KMS makes it simple for you to create\n            and manage keys and control the use of encryption across a\n            wide range of AWS services and in your applications.\n          \n\n\n\nGetting\n                  started: AWS Key Management Service (AWS KMS)\n\n\n\n                Review the\n                best\n                  practices for access control to your AWS KMS keys.\n              \n\n\n\n            Consider AWS Encryption SDK: Use the AWS Encryption SDK with\n            AWS KMS integration when your application needs to encrypt\n            data client-side.\n          \n\n\n\nAWS Encryption SDK\n\n\n\n\n            Enable\n            IAM Access Analyzer to automatically review and notify if\n            there are overly broad AWS KMS key policies.\n          \n\n\n            Enable\n            Security Hub to receive notifications if there are\n            misconfigured key policies, keys scheduled for deletion, or\n            keys without automated rotation enabled.\n          \n\n\n            Determine the logging level appropriate for your AWS KMS keys.\n            Since calls to AWS KMS, including read-only events, are logged,\n            the CloudTrail logs associated with AWS KMS can become\n            voluminous.\n          \n\n\n\n                Some organizations prefer to segregate the AWS KMS logging\n                activity into a separate trail. For more detail, see the\n                Logging\n                  AWS KMS API calls with CloudTrail section of the\n                AWS KMS developers guide.\n              \n\n\nResources\n\nRelated documents:\n\n\n\n\nAWS Key Management Service\n\n\n\nAWS           cryptographic services and tools\n\n\n\nProtecting\n            Amazon S3 Data Using Encryption\n\n\n\nEnvelope\n            encryption\n\n\n\nDigital sovereignty pledge\n\n\n\nDemystifying\n            AWS KMS key operations, bring your own key, custom key store, and\n            ciphertext portability\n\n\n\nAWS Key Management Service cryptographic details\n\n\n\nRelated videos:\n\n\n\n\nHow\n            Encryption Works in AWS\n\n\n\nSecuring\n            Your Block Storage on AWS\n\n\n\nAWS           data protection: Using locks, keys, signatures, and\n            certificates\n\n\n\nRelated examples:\n\n\n\n\nImplement\n            advanced access control mechanisms using AWS KMS\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document Conventions SEC 8. How do you protect your data at rest? SEC08-BP02 Enforce encryption at restDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_protect_data_rest_key_mgmt.html", "title": "SEC08-BP01 Implement secure key management - AWS Well-Architected Framework", "description": "Secure key management includes the storage, rotation, access control, and monitoring of key material required to secure data at rest for your workload.", "language": "en-US"}}