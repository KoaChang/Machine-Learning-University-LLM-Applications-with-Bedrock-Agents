{"page_content": "REL11-BP01 Monitor all components of the workload to detect failures - AWS Well-Architected FrameworkREL11-BP01 Monitor all components of the workload to detect failures - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidance Resources REL11-BP01 Monitor all components of the workload to detect\n  failures\n    Continually monitor the health of your workload so that you and your\n    automated systems are aware of failures or degradations as soon as\n    they occur. Monitor for key performance indicators (KPIs) based on\n    business value.\n  \n    All recovery and healing mechanisms must start with the ability to\n    detect problems quickly. Technical failures should be detected first\n    so that they can be resolved. However, availability is based on the\n    ability of your workload to deliver business value, so key\n    performance indicators (KPIs) that measure this need to be a part of\n    your detection and remediation strategy.\n  \nDesired outcome: Essential components of a workload are monitored independently to\n    detect and alert on failures when and where they happen.\n  \nCommon anti-patterns:\n\n\n\n        No alarms have been configured, so outages occur without\n        notification.\n      \n\n\n        Alarms exist, but at thresholds that don't provide adequate time\n        to react.\n      \n\n\n        Metrics are not collected often enough to meet the recovery time\n        objective (RTO).\n      \n\n\n        Only the customer facing interfaces of the workload are actively\n        monitored.\n      \n\n\n        Only collecting technical metrics, no business function metrics.\n      \n\n\n        No metrics measuring the user experience of the workload.\n      \n\n\n        Too many monitors are created.\n      \n\nBenefits of establishing this best\n      practice: Having appropriate monitoring at all layers allows you to reduce\n    recovery time by reducing time to detection.\n  \nLevel of risk exposed if this best practice\n      is not established: High\n  \nImplementation guidance \n\n      Identify all workloads that will be reviewed for monitoring. Once\n      you have identified all components of the workload that will need\n      to monitored, you will now need to determine the monitoring\n      interval. The monitoring interval will have a direct impact on how\n      fast recovery can be initiated based on the time it takes to\n      detect a failure. The mean time to detection (MTTD) is the amount\n      of time between a failure occurring and when repair operations\n      begin. The list of services should be extensive and complete.\n    \n\n      Monitoring must cover all layers of the application stack\n      including application, platform, infrastructure, and network.\n    \n\n      Your monitoring strategy should consider the impact of\n      gray failures. For more detail on gray\n      failures, see\n      \n        Gray failures in the Advanced Multi-AZ Resilience Patterns whitepaper.\n    \nImplementation steps\n\n\n\n            Your monitoring interval is dependent on how quickly you\n            must recover. Your recovery time is driven by the time it\n            takes to recover, so you must determine the frequency of\n            collection by accounting for this time and your recovery\n            time objective (RTO).\n          \n\n\n            Configure detailed monitoring for components and managed\n            services.\n          \n\n\n\n                Determine if\n                detailed\n                  monitoring for EC2 instances and\n                Auto Scaling is necessary. Detailed monitoring\n                provides one minute interval metrics, and default\n                monitoring provides five minute interval metrics.\n              \n\n\n                Determine if\n                enhanced\n                  monitoring for RDS is necessary. Enhanced\n                monitoring uses an agent on RDS instances to get useful\n                information about different process or threads.\n              \n\n\n                Determine the monitoring requirements of critical\n                serverless components for\n                Lambda,\n                API Gateway,\n                Amazon EKS,\n                Amazon ECS,\n                and all types of\n                load\n                  balancers.\n              \n\n\n                Determine the monitoring requirements of storage\n                components for\n                Amazon S3,\n                Amazon FSx,\n                Amazon EFS,\n                and\n                Amazon EBS.\n              \n\n\n\n            Create\n            custom\n              metrics to measure business key performance\n            indicators (KPIs). Workloads implement key business\n            functions, which should be used as KPIs that help identify\n            when an indirect problem happens.\n          \n\n\n            Monitor the user experience for failures using user\n            canaries.\n            Synthetic\n              transaction testing (also known as canary testing,\n            but not to be confused with canary deployments) that can run\n            and simulate customer behavior is among the most important\n            testing processes. Run these tests constantly against your\n            workload endpoints from diverse remote locations.\n          \n\n\n            Create\n            custom\n              metrics that track the user's experience. If you can\n            instrument the experience of the customer, you can determine\n            when the consumer experience degrades.\n          \n\n\nSet\n              alarms to detect when any part of your workload is\n            not working properly and to indicate when to automatically\n            scale resources. Alarms can be visually displayed on\n            dashboards, send alerts through Amazon SNS or email, and\n            work with Auto Scaling to scale workload resources up or\n            down.\n          \n\n\n            Create\n            dashboards\n            to visualize your metrics. Dashboards can be used to\n            visually see trends, outliers, and other indicators of\n            potential problems or to provide an indication of problems\n            you may want to investigate.\n          \n\n\n            Create\n            distributed\n              tracing monitoring for your services. With\n            distributed monitoring, you can understand how your\n            application and its underlying services are performing to\n            identify and troubleshoot the root cause of performance\n            issues and errors.\n          \n\n\n            Create monitoring systems (using\n            CloudWatch\n            or\n            X-Ray)\n            dashboards and data collection in a separate Region and\n            account.\n          \n\n\n            Create integration for\n            Amazon\n              Health Aware monitoring to allow for monitoring\n            visibility to AWS resources that might have degradations.\n            For business essential workloads, this solution provides\n            access to proactive and real-time alerts for AWS services.\n          \n\nResources \n\nRelated best practices:\n\n\n\n\nAvailability\n            Definition\n\n\n\nREL11-BP06\n            Send Notifications when events impact availability\n\n\n\nRelated documents:\n\n\n\n\nAmazon CloudWatch Synthetics enables you to create user\n            canaries\n\n\n\nEnable\n            or Disable Detailed Monitoring for Your Instance\n\n\n\nEnhanced\n            Monitoring\n\n\n\nMonitoring\n            Your Auto Scaling Groups and Instances Using Amazon CloudWatch\n\n\n\nPublishing\n            Custom Metrics\n\n\n\nUsing\n            Amazon CloudWatch Alarms\n\n\n\nUsing\n            CloudWatch Dashboards\n\n\n\nUsing\n            Cross Region Cross Account CloudWatch Dashboards\n\n\n\nUsing\n            Cross Region Cross Account X-Ray Tracing\n\n\n\nUnderstanding\n            availability\n\n\n\nImplementing\n            Amazon Health Aware (AHA)\n\n\n\nRelated videos:\n\n\n\n\nMitigating\n            gray failures\n\n\n\nRelated examples:\n\n\n\n\nWell-Architected\n            Lab: Level 300: Implementing Health Checks and Managing\n            Dependencies to Improve Reliability\n\n\n\nOne\n            Observability Workshop: Explore X-Ray\n\n\n\nRelated tools:\n\n\n\n\nCloudWatch\n\n\n\nCloudWatch\n            X-Ray\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL 11. How do you design your workload to withstand component\n                  failures?REL11-BP02 Fail over to healthy resourcesDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_withstand_component_failures_monitoring_health.html", "title": "REL11-BP01 Monitor all components of the workload to detect failures - AWS Well-Architected Framework", "description": "Continuously monitor the health of your workload so that you and your automated systems are aware of degradation or failure as soon as they occur. Monitor for key performance indicators (KPIs) based on business value.", "language": "en-US"}}