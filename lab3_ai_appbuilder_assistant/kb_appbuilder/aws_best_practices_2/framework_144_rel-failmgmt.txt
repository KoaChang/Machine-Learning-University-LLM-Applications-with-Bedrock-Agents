{"page_content": "Failure management - AWS Well-Architected FrameworkFailure management - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkFailure management\n      In any system of reasonable complexity, it is expected that\n      failures will occur. Reliability requires that your workload be\n      aware of failures as they occur and take action to avoid impact on\n      availability. Workloads must be able to both withstand failures\n      and automatically repair issues.\n     With AWS, you can take advantage of automation to react to monitoring data. For example,\n          when a particular metric crosses a threshold, you can initiate an automated action to\n          remedy the problem. Also, rather than trying to diagnose and fix a failed resource that is\n          part of your production environment, you can replace it with a new one and carry out the\n          analysis on the failed resource out of band. Since the cloud allows you to stand up\n          temporary versions of a whole system at low cost, you can use automated testing to verify\n          full recovery processes. \n      The following questions focus on these considerations for\n      reliability.\n    \n\nREL 9:\u00a0 How do you back up data?\n\n\n\nBack up data, applications, and configuration to meet your requirements for\n                  recovery time objectives (RTO) and recovery point objectives (RPO).\n\n\n\nREL 10:\u00a0 How do you use fault isolation to protect your workload?\n\n\n\nFault isolated boundaries limit the effect of a failure within a workload to\n                  a limited number of components. Components outside of the boundary are unaffected\n                  by the failure. Using multiple fault isolated boundaries, you can limit the impact\n                  on your workload.\n\n\n\nREL 11:\u00a0 How do you design your workload to withstand component\n                  failures?\n\n\n\nWorkloads with a requirement for high availability and low mean time to\n                  recovery (MTTR) must be architected for resiliency.\n\n\n\nREL 12:\u00a0 How do you test reliability?\n\n\n\nAfter you have designed your workload to be resilient to the stresses of\n                  production, testing is the only way to verify that it will operate as designed,\n                  and deliver the resiliency you expect.\n\n\n\nREL 13:\u00a0 How do you plan for disaster recovery (DR)?\n\n\n\nHaving backups and redundant workload components in place is the start of your DR strategy. RTO and RPO are your objectives for restoration of your workload. Set these based on business needs. Implement a strategy to meet these objectives, considering locations and function of workload resources and data. The probability of disruption and cost of recovery are also key factors that help to inform the business value of providing disaster recovery for a workload.\n\n\n      Regularly back up your data and test your backup files to verify\n      that you can recover from both logical and physical errors. A\n      key to managing failure is the frequent and automated testing of\n      workloads to cause failure, and then observe how they recover.\n      Do this on a regular schedule and verify that such testing is also\n      initiated after significant workload changes. Actively track KPIs, \n      and also the recovery time objective (RTO) and recovery point\n      objective (RPO), to assess a workload's resiliency (especially\n      under failure-testing scenarios). Tracking KPIs will help you\n      identify and mitigate single points of failure. The objective is\n      to thoroughly test your workload-recovery processes so that you\n      are confident that you can recover all your data and continue to\n      serve your customers, even in the face of sustained problems. Your\n      recovery processes should be as well exercised as your normal\n      production processes.\n     Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsChange managementResourcesDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel-failmgmt.html", "title": "Failure management - AWS Well-Architected Framework", "description": "In any system of reasonable complexity, it is expected that failures will occur. Reliability requires that your workload be aware of failures as they occur and take action to avoid impact on availability. Workloads must be able to both withstand failures and automatically repair issues.", "language": "en-US"}}