{"page_content": "REL04-BP01 Identify which kind of distributed system is required - Reliability PillarREL04-BP01 Identify which kind of distributed system is required - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesREL04-BP01 Identify which kind of distributed system is\n  required\n    Hard real-time distributed systems require responses to be given\n    synchronously and rapidly, while soft real-time systems have a more\n    generous time window of minutes or more for response. Offline\n    systems handle responses through batch or asynchronous processing.\n    Hard real-time distributed systems have the most stringent\n    reliability requirements.\n   The most difficult\u00a0challenges with distributed systems\u00a0are for the hard real-time distributed systems,\n      also known as request/reply services. What makes them difficult is that requests arrive\n      unpredictably and responses must be given rapidly (for example, the customer is actively\n      waiting for the response). Examples include front-end web servers, the order pipeline, credit\n      card transactions, every AWS API, and telephony. \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n\n        Identify which kind of distributed system is required. Challenges\n        with distributed systems involved latency, scaling, understanding\n        networking APIs, marshalling and unmarshalling data, and the\n        complexity of algorithms such as Paxos. As the systems grow larger\n        and more distributed, what had been theoretical edge cases turn\n        into regular occurrences.\n      \n\n\n\nThe Amazon Builders' Library: Challenges with distributed systems\n\n\n\n Hard real-time distributed systems require responses to be given\n                  synchronously and rapidly. \n\n Soft real-time systems have a more generous time window of minutes or greater\n                  for response. \n\n Offline systems handle responses through batch or asynchronous processing.\n                \n\n Hard real-time distributed systems have the most stringent reliability\n                  requirements. \n\n\nResources\n\nRelated documents:\n\n\n\n\nAmazon EC2: Ensuring Idempotency\n\n\n\nThe\n          Amazon Builders' Library: Challenges with distributed systems\n\n\n\nThe\n          Amazon Builders' Library: Reliability, constant work, and a good cup of coffee\n\n\n\nWhat\n          Is Amazon EventBridge?\n\n\n\nWhat\n          Is Amazon Simple Queue Service?\n\n\n\nRelated videos:\n\n\n\n\nAWS New York\n          Summit 2019: Intro to Event-driven Architectures and Amazon EventBridge (MAD205)\n\n\n\nAWS re:Invent\n          2018: Close Loops and Opening Minds: How to Take Control of Systems, Big and Small ARC337 (includes loose coupling, constant work, static stability)\n\n\n\nAWS re:Invent\n          2019: Moving to event-driven architectures (SVS308)\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsDesign interactions in a distributed system to prevent failuresREL04-BP02 Implement loosely coupled dependenciesDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_prevent_interaction_failure_identify.html", "title": "REL04-BP01 Identify which kind of distributed system is required - Reliability Pillar", "description": "Hard real-time distributed systems require responses to be given synchronously and rapidly, while soft real-time systems have a more generous time window of minutes or more for response. Offline systems handle responses through batch or asynchronous processing. Hard real-time distributed systems have the most stringent reliability requirements.", "language": "en-US"}}