{"page_content": "REL01-BP03 Accommodate fixed service quotas and constraints through architecture - AWS Well-Architected FrameworkREL01-BP03 Accommodate fixed service quotas and constraints through architecture - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesREL01-BP03 Accommodate fixed service quotas and constraints\n  through architectureBe aware of unchangeable service quotas, service constraints, and physical resource limits. Design architectures for applications and services to prevent these limits from impacting reliability.Examples include network bandwidth, serverless function invocation payload size, throttle burst rate for of an API gateway, and concurrent user connections to a database.\nDesired outcome: The application or service performs as expected under normal and high traffic conditions. They have been designed to work within the limitations for that resource\u2019s fixed constraints or service quotas.\n  \nCommon anti-patterns:\n\n\nChoosing a design that uses a resource of a service, unaware that there are design constraints that will cause this design to fail as you scale.\n\nPerforming benchmarking that is unrealistic and will reach service fixed quotas during the testing. For example, running tests at a burst limit but for an extended amount of time.\n\n\n        Choosing a design that cannot scale or be modified if fixed service quotas are to be exceeded. For example, an SQS payload size of 256KB.\n      \n\n\n        Observability has not been designed and implemented to monitor and alert on thresholds for service quotas that might be at risk during high traffic events\n      \n\nBenefits of establishing this best\n      practice:  Verifying that the application will run under all projected services load levels without disruption or degradation.\n  \nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      Unlike soft service quotas or resources that be replaced with higher capacity units, AWS services\u2019 fixed quotas cannot be changed. This means that all these type of AWS services must be evaluated for potential hard capacity limits when used in an application design. \n    \n\n      Hard limits are show in the Service Quotas console. If the columns shows ADJUSTABLE = No, the service has a hard limit. Hard limits are also shown in some resources configuration pages. For example, Lambda has specific hard limits that cannot be adjusted.\n    \n\n      As an example, when designing a python application to run in a Lambda function, the application should be evaluated to determine if there is any chance of Lambda running longer than 15 minutes. If the code may run more than this service quota limit, alternate technologies or designs must be considered. If this limit is reached after production deployment, the application will suffer degradation and disruption until it can be remediated. Unlike soft quotas, there is no method to change to these limits even under emergency Severity 1 events. \n    \n\n      Once the application has been deployed to a testing environment, strategies should be used to find if any hard limits can be reached. Stress testing, load testing, and chaos testing should be part of the introduction test plan. \n    \n\nImplementation steps\n\n\n\n\n          Review the complete list of AWS services that could be used in the application design phase.\n        \n\n\n          Review the soft quota limits and hard quota limits for all these services. Not all limits are shown in the Service Quotas console. Some services describe these limits in alternate locations.\n        \n\n\n          As you design your application, review your workload\u2019s business and technology drivers, such as business outcomes, use case, dependent systems, availability targets, and disaster recovery objects. Let your business and technology drivers guide the process to identify the distributed system that is right for your workload. \n        \n\n\n          Analyze service load across Regions and accounts. Many hard limits are regionally based for services. However, some limits are account based.\n        \n\n\n          Analyze resilience architectures for resource usage during a zonal failure and Regional failure. In the progression of multi-Region designs using active/active, active/passive \u2013 hot, active/passive - cold, and active/passive - pilot light approaches, these failure cases will cause higher usage. This creates a potential use case for hitting hard limits.\n        \n\nResources\n\nRelated best practices:\n\n\n\n\nREL01-BP01 Aware of service quotas and constraints\n\n\n\nREL01-BP02 Manage service quotas across accounts and\n  regions\n\n\n\nREL01-BP04 Monitor and manage quotas\n\n\n\nREL01-BP05 Automate quota management\n\n\n\nREL01-BP06 Ensure that a sufficient gap exists between the\n  current quotas and the maximum usage to accommodate failover\n\n\n\nREL03-BP01 Choose how to segment your workload\n\n\n\nREL10-BP01 Deploy the workload to multiple locations\n\n\n\nREL11-BP01 Monitor all components of the workload to detect\n  failures\n\n\n\nREL11-BP03 Automate healing on all layers\n\n\n\nREL12-BP05 Test resiliency using chaos engineering\n\n\n\nRelated documents:\n\n\n\nAWS Well-Architected Framework\u2019s Reliability Pillar: Availability\n        \n\n\nAWS Service Quotas (formerly referred to as service limits)\n\n\n\nAWS Trusted Advisor Best Practice Checks (see the Service Limits\n            section)\n\n\n\nAWS limit monitor on AWS answers\n\n\n\nAmazon EC2 Service Limits\n\n\n\nWhat\n            is Service Quotas?\n\n\n\n          How to Request Quota Increase\n        \n\n\n          Service endpoints and quotas\n        \n\n\nService Quotas User Guide\n\n\n\n          Quota Monitor for AWS\n\nAWS Fault Isolation Boundaries\n        \n\n\n          Availability with redundancy\n        \n\nAWS for Data\n        \n\n\n          What is Continuous Integration?\n        \n\n\n          What is Continuous Delivery?\n        \n\n\n          APN Partner: partners that can help with configuration management\n        \n\n\n          Managing the account lifecycle in account-per-tenant SaaS environments on AWS\n\n\n          Managing and monitoring API throttling in your workloads\n        \n\n\n          View AWS Trusted Advisor recommendations at scale with AWS Organizations\n\n\n          Automating Service Limit Increases and Enterprise Support with AWS Control Tower\n\n\n          Actions, resources, and condition keys for Service Quotas\n        \n\n\nRelated videos:\n\n\n\n\nAWS Live\n            re:Inforce 2019 - Service Quotas\n\n\n\n          View and Manage Quotas for AWS Services Using Service Quotas\n        \n\nAWS IAM Quotas Demo\n        \n\nAWS re:Invent 2018: Close Loops and Opening Minds: How to Take Control of Systems, Big and Small\n        \n\n\nRelated tools:\n\n\n\nAWS CodeDeploy\n\nAWS CloudTrail\n\n\n          Amazon CloudWatch\n        \n\n\n          Amazon EventBridge\n        \n\n\n          Amazon DevOps\u00a0Guru\n        \n\nAWS Config\n\nAWS Trusted Advisor\n\nAWS CDK\n        \n\nAWS Systems Manager\n\nAWS Marketplace\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL01-BP02 Manage service quotas across accounts and\n  regionsREL01-BP04 Monitor and manage quotasDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_manage_service_limits_aware_fixed_limits.html", "title": "REL01-BP03 Accommodate fixed service quotas and constraints through architecture - AWS Well-Architected Framework", "description": "Be aware of unchangeable service quotas, service constraints, and physical resource limits. Design architectures for applications and services to prevent these limits from impacting reliability.", "language": "en-US"}}