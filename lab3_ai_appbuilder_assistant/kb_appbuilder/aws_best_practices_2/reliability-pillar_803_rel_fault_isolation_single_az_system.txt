{"page_content": "REL10-BP03 Automate recovery for components constrained to a single location - Reliability PillarREL10-BP03 Automate recovery for components constrained to a single location - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesREL10-BP03 Automate recovery for components constrained to a\n  single locationIf components of the workload can only run in a single Availability Zone or in an on-premises data center, implement the capability to do a complete rebuild of the workload within your defined recovery objectives.\nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      If the best practice to deploy the workload to multiple locations is\n      not possible due to technological constraints, you must implement an\n      alternate path to resiliency. You must automate the ability to\n      recreate necessary infrastructure, redeploy applications, and\n      recreate necessary data for these cases.\n    \n\n      For example, Amazon EMR launches all nodes for a given cluster in\n      the same Availability Zone because running a cluster in the same\n      zone improves performance of the jobs flows as it provides a higher\n      data access rate. If this component is required for workload\n      resilience, then you must have a way to redeploy the cluster and its\n      data. Also for Amazon EMR, you should provision redundancy in ways\n      other than using Multi-AZ. You can\n      provision\u00a0multiple\n        nodes.\n      Using\u00a0EMR\n        File System (EMRFS), data in EMR can be stored in Amazon S3,\n      which in turn can be replicated across multiple Availability Zones\n      or AWS Regions.\n    \n\n      Similarly, for Amazon Redshift, by default it provisions your\n      cluster in a randomly selected Availability Zone within the AWS Region that you select. All the cluster nodes are provisioned in the\n      same zone.\n    \n\n      For stateful server-based workloads deployed to an on-premise data center, you can use AWS Elastic Disaster Recovery to protect your workloads in AWS. If you are already hosted in AWS, you can use Elastic Disaster Recovery to protect your workload to an alternative Availability Zone or Region. Elastic Disaster Recovery uses continual block-level replication to a lightweight staging area to provide fast, reliable recovery of on-premises and cloud-based applications.\n    \n\nImplementation steps\n\n\n \n        Implement self-healing. Deploy your instances or containers using\n        automatic scaling when possible. If you cannot use automatic\n        scaling, use automatic recovery for EC2 instances or implement\n        self-healing automation based on Amazon EC2 or ECS container\n        lifecycle events.\n      \n\n\n Use Amazon EC2 Auto Scaling groups for instances and container workloads that have no\n              requirements for a single instance IP address, private IP address, Elastic IP address,\n              and instance metadata. \n\n\n\n                  The launch template user data can be used to implement automation that can self-heal most workloads.\n                \n\n\n Use automatic recovery of Amazon EC2 instances for workloads that require a single\n              instance ID address, private IP address, elastic IP address, and instance metadata. \n\n\n\n                  Automatic Recovery will send recovery status alerts to a SNS topic as the\n                  instance failure is detected. \n                \n\n\n Use Amazon EC2 instance lifecycle events or Amazon ECS events to automate self-healing where\n              automatic scaling or EC2 recovery cannot be used. \n\n\n\n                  Use the events to invoke automation that will heal your component\n                  according to the process logic you require.\n                \n\n\n\n              Protect stateful workloads that are limited to a single location using AWS Elastic Disaster Recovery.\n            \n\nResources\n\nRelated documents:\n\n\n\n\nAmazon ECS events\n\n\n\nAmazon EC2 Auto Scaling lifecycle hooks\n\n\n\nRecover\n          your instance.\n\n\n\nService\n          automatic scaling\n\n\n\nWhat\n          Is Amazon EC2 Auto Scaling?\n\n\nAWS Elastic Disaster Recovery\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL10-BP02 Select the appropriate locations for your\n  multi-location deploymentREL10-BP04 Use bulkhead architectures to limit scope of\n  impactDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_fault_isolation_single_az_system.html", "title": "REL10-BP03 Automate recovery for components constrained to a single location - Reliability Pillar", "description": "If components of the workload can only run in a single Availability Zone or in an on-premises data center, implement the capability to do a complete rebuild of the workload within your defined recovery objectives.", "language": "en-US"}}