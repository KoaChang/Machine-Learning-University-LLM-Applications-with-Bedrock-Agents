{"page_content": "REL03-BP03 Provide service contracts per API - Reliability PillarREL03-BP03 Provide service contracts per API - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceImplementation stepsResourcesREL03-BP03 Provide service contracts per APIService contracts are documented agreements between API producers and consumers defined in a machine-readable API definition. A contract versioning strategy allows consumers to continue using the existing API and migrate their applications to a newer API when they are ready. Producer deployment can happen any time as long as the contract is followed. Service teams can use the technology stack of their choice to satisfy the API contract. \nDesired outcome:\n\nCommon anti-patterns: Applications built with service-oriented or microservice architectures are able to operate independently while having integrated runtime dependency. Changes deployed to an API consumer or producer do not interrupt the stability of the overall system when both sides follow a common API contract. Components that communicate over service APIs can perform independent functional releases, upgrades to runtime dependencies, or fail over to a disaster recovery (DR) site with little or no impact to each other. In addition, discrete services are able to independently scale absorbing resource demand without requiring other services to scale in unison. \n  \n\n\n        Creating service APIs without strongly typed schemas. This results in APIs that cannot be used to generate API bindings and payloads that can\u00e2\u20ac\u2122t be programmatically validated.\n      \n\n\n        Not adopting a versioning strategy, which forces API consumers to update and release or fail when service contracts evolve.\n      \n\n\n        Error messages that leak details of the underlying service implementation rather than describe integration failures in the domain context and language.\n      \n\n\n        Not using API contracts to develop test cases and mock API implementations to allow for independent testing of service components. \n      \n\nBenefits of establishing this best practice: Distributed systems composed of components that communicate over API service contracts can improve reliability. Developers can catch potential issues early in the development process with type checking during compilation to verify that requests and responses follow the API contract and required fields are present. API contracts provide a clear self-documenting interface for APIs and provider better interoperability between different systems and programming languages.  \n  \nLevel of risk exposed if this best practice\n      is not established: Medium\n  \nImplementation guidance\n\n      Once you have identified business domains and determined your workload segmentation, you can develop your service APIs. First, define machine-readable service contracts for APIs, and then implement an API versioning strategy. When you are ready to integrate services over common protocols like REST, GraphQL, or asynchronous events, you can incorporate AWS services into your architecture to integrate your components with strongly-typed API contracts. \n    \n\nAWS services for service API contrats\n\n\n      Incorporate AWS services including Amazon API Gateway, AWS AppSync, and Amazon EventBridge into your architecture to use API service contracts in your application. Amazon API Gateway helps you integrate with directly native AWS services and other web services. API Gateway supports the OpenAPI specification and versioning. AWS AppSync is a managed GraphQL endpoint you configure by defining a GraphQL schema to define a service interface for queries, mutations and subscriptions. Amazon EventBridge uses event schemas to define events and generate code bindings for your events.\n    \nImplementation steps\n\n\n\n          First, define a contract for your API. A contract will express the capabilities of an API as well as define strongly typed data objects and fields for the API input and output.\n        \n\n\n          When you configure APIs in API Gateway, you can import and export OpenAPI Specifications for your endpoints. \n        \n\n\n\nImporting an OpenAPI definition simplifies the creation of your API and can be integrated with AWS infrastructure as code tools like the AWS Serverless Application Model and AWS Cloud Development Kit (AWS CDK). \n            \n\n\nExporting an API definition simplifies integrating with API testing tools and provides services consumer an integration specification. \n            \n\n\n\n          You can define and manage GraphQL APIs with AWS AppSync by defining a GraphQL schema file to generate your contract interface and simplify interaction with complex REST models, multiple database tables or legacy services. \n        \n\n\nAWS Amplify projects that are integrated with AWS AppSync generate strongly typed JavaScript query files for use in your application as well as an AWS AppSync GraphQL client library for Amazon DynamoDB tables. \n        \n\n\n          When you consume service events from Amazon EventBridge, events adhere to schemas that already exist in the schema registry or that you define with the OpenAPI Spec. With a schema defined in the registry, you can also generate client bindings from the schema contract to integrate your code with events. \n        \n\n\n          Extending or version your API. Extending an API is a simpler option when adding fields that can be configured with optional fields or default values for required fields.\n        \n\n\n\n              JSON based contracts for protocols like REST and GraphQL can be a good fit for contract extension.\n            \n\n\n              XML based contracts for protocols like SOAP should be tested with service consumers to determine the feasibility of contract extension. \n            \n\n\n\n          When versioning an API, consider implementing proxy versioning where a facade is used to support versions so that logic can be maintained in a single codebase.\n        \n\n\n\n              With API Gateway you can use request and response mappings to simplify absorbing contract changes by establishing a facade to provide default values for new fields or to strip removed fields from a request or response. With this approach the underlying service can maintain a single codebase.\n            \n\n\nResources\n\nRelated best practices:\n\n\n\n\nREL03-BP01 Choose how to segment your workload\n\n\n\nREL03-BP02 Build services focused on specific business domains\n  and functionality\n\n\n\nREL04-BP02 Implement loosely coupled dependencies\n\n\n\nREL05-BP03 Control and limit retry calls\n\n\n\nREL05-BP05 Set client timeouts\n\n\n\nRelated documents:\n\n\n\n\n          What Is An API (Application Programming Interface)?\n        \n\n\n          Implementing Microservices on AWS\n\n\n          Microservice Trade-Offs\n        \n\n\n          Microservices - a definition of this new architectural term\n        \n\n\n          Microservices on AWS\n\n\n          Working with API Gateway extensions to OpenAPI\n        \n\n\n          OpenAPI-Specification\n        \n\n\n          GraphQL: Schemas and Types\n        \n\n\n          Amazon EventBridge code bindings\n        \n\n\nRelated examples:\n\n\n\n\n          Amazon API Gateway: Configuring a REST API Using OpenAPI\n        \n\n\n          Amazon API Gateway to Amazon DynamoDB CRUD application using OpenAPI\n        \n\n\n          Modern application integration patterns in a serverless age: API Gateway Service Integration\n        \n\n\n          Implementing header-based API Gateway versioning with Amazon CloudFront\n        \n\nAWS AppSync: Building a client application\n        \n\n\nRelated videos:\n\n\n\n\n          Using OpenAPI in AWS SAM to manage API Gateway\n        \n\n\nRelated tools:\n\n\n\n\n          Amazon API Gateway \n        \n\nAWS AppSync\n\n\n          Amazon EventBridge\n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL03-BP02 Build services focused on specific business domains\n  and functionalityDesign interactions in a distributed system to prevent failuresDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_service_architecture_api_contracts.html", "title": "REL03-BP03 Provide service contracts per API - Reliability Pillar", "description": "Service contracts are documented agreements between API producers and consumers defined in a machine-readable API definition. A contract versioning strategy allows consumers to continue using the existing API and migrate their applications to a newer API when they are ready. Producer deployment can happen any time as long as the contract is followed. Service teams can use the technology stack of their choice to satisfy the API contract.", "language": "en-US"}}