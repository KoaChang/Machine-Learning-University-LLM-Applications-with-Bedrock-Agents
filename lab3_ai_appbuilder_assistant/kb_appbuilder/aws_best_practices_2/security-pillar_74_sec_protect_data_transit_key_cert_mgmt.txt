{"page_content": "SEC09-BP01 Implement secure key and certificate management - Security PillarSEC09-BP01 Implement secure key and certificate management - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidance Resources SEC09-BP01 Implement secure key and certificate\n  management\n    Transport Layer Security (TLS) certificates are used to secure\n    network communications and establish the identity of websites,\n    resources, and workloads over the internet, as well as private\n    networks.\n  \nDesired outcome:\u00c2\u00a0A secure certificate management system that\n    can provision, deploy, store, and renew certificates in a public key infrastructure (PKI). A\n    secure key and certificate management mechanism prevents certificate private key material from\n    disclosure and automatically renews the certificate on a periodic basis. It also integrates with other\n    services to provide secure network communications and identity for machine resources inside of\n    your workload. Key material should never be accessible to human identities. \nCommon anti-patterns:\n\n\n\n        Performing manual steps during the certificate deployment or renewal\n        processes.\n      \n\n\n        Paying insufficient attention to certificate authority (CA)\n        hierarchy when designing a private CA.\n      \n\n\n        Using self-signed certificates for public resources.\n      \n\nBenefits of establishing this best practice: \n\n\n        Simplify certificate management through automated deployment and\n        renewal\n      \n\n\n        Encourage encryption of data in transit using TLS certificates\n      \n\n\n        Increased security and auditability of certificate actions taken by\n        the certificate authority\n      \n\n\n        Organization of management duties at different layers of the CA\n        hierarchy\n      \n\nLevel of risk exposed if this best practice is not established: High\nImplementation guidance \n\n      Modern workloads make extensive use of encrypted network\n      communications using PKI protocols\n      such as TLS. PKI certificate management\n      can be complex, but automated certificate provisioning,\n      deployment, and renewal can reduce the friction associated with\n      certificate management.\n    \n\n      AWS provides two services to manage general-purpose PKI\n      certificates: AWS Certificate Manager and AWS Private Certificate Authority (AWS Private CA). ACM is the primary\n      service that customers use to provision, manage, and deploy\n      certificates for use in both public-facing as well as private AWS\n      workloads. ACM issues certificates using AWS Private CA and\n      integrates\n      with many other AWS managed services to provide secure TLS\n      certificates for workloads.\n    \n\n      AWS Private CA allows you to\n      establish your own root or subordinate certificate authority and\n      issue TLS certificates through an API. You can use these kinds of\n      certificates in scenarios where you control and manage the trust\n      chain on the client side of the TLS connection. In addition to TLS\n      use cases, AWS Private CA can be used to issue certificates to\n      Kubernetes pods, Matter device product attestations, code signing,\n      and other use cases with a\n      custom\n        template. You can also use\n      IAM\n        Roles Anywhere to provide temporary IAM credentials to\n      on-premises workloads that have been issued X.509 certificates\n      signed by your Private CA.\n    \n\n      In addition to ACM and AWS Private CA,\n      AWS IoT Core provides specialized support for provisioning,\n      managing and deploying PKI certificates to IoT\n      devices. AWS IoT Core provides specialized mechanisms for\n      onboarding\n        IoT devices into your public key infrastructure at scale.\n    \nConsiderations for establishing a private CA hierarchy\n      \n\n      When you need to establish a private CA, it's important to take\n      special care to properly design the CA hierarchy upfront. It's a\n      best practice to deploy each level of your CA hierarchy into\n      separate AWS accounts when creating a private CA hierarchy. This\n      intentional step reduces the surface area for each level in the CA\n      hierarchy, making it simpler to discover anomalies in CloudTrail\n      log data and reducing the scope of access or impact if there is\n      unauthorized access to one of the accounts. The root CA should reside in its own separate account and should only be used to issue one or more intermediate CA certificates.\n    \n\n      Then, create one or more intermediate CAs in accounts separate\n      from the root CA's account to issue certificates for end users,\n      devices, or other workloads. Finally, issue certificates from your\n      root CA to the intermediate CAs, which will in turn issue\n      certificates to your end users or devices. For more information on\n      planning your CA deployment and designing your CA hierarchy,\n      including planning for resiliency, cross-region replication,\n      sharing CAs across your organization, and more, see\n      Planning\n        your AWS Private CA deployment.\n    \nImplementation steps\n\n\n\n            Determine the relevant AWS services required for your use\n            case:\n          \n\n\n\n                Many use cases can leverage the existing AWS public key\n                infrastructure using\n                AWS Certificate Manager. ACM can\n                be used to deploy TLS certificates for web servers, load\n                balancers, or other uses for publicly trusted certificates.\n              \n\n\n                Consider AWS Private CA when you need\n                to establish your own private certificate authority\n                hierarchy or need access to exportable certificates. ACM can then be used to issue many types\n                  of end-entity certificates using the AWS Private CA.\n              \n\n\n                For use cases where certificates must be provisioned at\n                scale for embedded Internet of things (IoT) devices,\n                consider AWS IoT Core.\n              \n\n\n\n            Implement automated certificate renewal whenever possible:\n          \n\n\n\n                Use ACM managed renewal for\n                certificates issued by ACM along with\n                integrated AWS managed services.\n              \n\n\n\n            Establish logging and audit trails:\n          \n\n\n\n                Enable\n                CloudTrail\n                  logs to track access to the accounts holding\n                certificate authorities. Consider configuring log file\n                integrity validation in CloudTrail to verify the\n                authenticity of the log data.\n              \n\n\n                Periodically generate and review\n                audit\n                  reports that list the certificates that your private\n                CA has issued or revoked. These reports can be exported to\n                an S3 bucket.\n              \n\n\n                When deploying a private CA, you will also need to establish\n                an S3 bucket to store the Certificate Revocation List (CRL).\n                For guidance on configuring this S3 bucket based on your\n                workload's requirements, see\n                Planning\n                  a certificate revocation list (CRL).\n              \n\n\nResources \n\nRelated best\n        practices:\n\n\n\n\nSEC02-BP02 Use temporary credentials\n\n\nSEC08-BP01 Implement secure key management\n\n\nSEC09-BP04 Authenticate network communications\n\n\n\nRelated documents:\n\n\n\n\nHow\n            to host and manage an entire private certificate\n            infrastructure in AWS\n\n\n\nHow\n            to secure an enterprise scale ACM Private CA hierarchy for\n            automotive and manufacturing\n\n\n\nPrivate\n            CA best practices\n\n\n\nHow\n            to use AWS RAM to share your ACM Private CA\n            cross-account\n\n\n\nRelated videos:\n\n\n\n\nActivating\n            AWS Certificate Manager Private CA (workshop)\n\n\n\nRelated examples:\n\n\n\n\nPrivate\n            CA workshop\n\n\n\nIOT\n            Device Management Workshop (including device\n          provisioning)\n        \n\n\nRelated tools:\n\n\n\n\nPlugin\n            to Kubernetes cert-manager to use AWS Private CA\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsProtecting data in transitSEC09-BP02 Enforce encryption in transitDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_protect_data_transit_key_cert_mgmt.html", "title": "SEC09-BP01 Implement secure key and certificate management - Security Pillar", "description": "Transport Layer Security (TLS) certificates are used to secure network communications and establish the identity of websites, resources, and workloads over the internet, as well as private networks.", "language": "en-US"}}