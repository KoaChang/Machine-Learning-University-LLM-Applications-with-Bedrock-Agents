{"page_content": "REL11-BP02 Fail over to healthy resources - AWS Well-Architected FrameworkREL11-BP02 Fail over to healthy resources - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidance Resources REL11-BP02 Fail over to healthy resources\n    If a resource failure occurs, healthy resources should continue to\n    serve requests. For location impairments (such as Availability Zone\n    or AWS Region), ensure that you have systems in place to fail over\n    to healthy resources in unimpaired locations.\n  \n    When designing a service, distribute load across resources,\n    Availability Zones, or Regions. Therefore, failure of an individual\n    resource or impairment can be mitigated by shifting traffic to\n    remaining healthy resources. Consider how services are discovered\n    and routed to in the event of a failure.\n  \n    Design your services with fault recovery in mind. At AWS, we design\n    services to minimize the time to recover from failures and impact on\n    data. Our services primarily use data stores that acknowledge\n    requests only after they are durably stored across multiple replicas\n    within a Region. They are constructed to use cell-based isolation\n    and use the fault isolation provided by Availability Zones. We use\n    automation extensively in our operational procedures. We also\n    optimize our replace-and-restart functionality to recover quickly\n    from interruptions.\n  \n    The patterns and designs that allow for the failover vary for each\n    AWS platform service. Many AWS native managed services are natively\n    multiple Availability Zone (like Lambda or API Gateway). Other AWS\n    services (like EC2 and EKS) require specific best practice designs to\n    support failover of resources or data storage across AZs.\n  \n    Monitoring should be set up to check that the failover resource is\n    healthy, track the progress of the resources failing over, and\n    monitor business process recovery.\n  \nDesired outcome: Systems are\n    capable of automatically or manually using new resources to recover\n    from degradation.\n  \nCommon anti-patterns:\n\n\n\n        Planning for failure is not part of the planning and design\n        phase.\n      \n\n\n        RTO and RPO are not established.\n      \n\n\n        Insufficient monitoring to detect failing resources.\n      \n\n\n        Proper isolation of failure domains.\n      \n\n\n        Multi-Region fail over is not considered.\n      \n\n\n        Detection for failure is too sensitive or aggressive when\n        deciding to failover.\n      \n\n\n        Not testing or validating failover design.\n      \n\n\n        Performing auto healing automation, but not notifying that\n        healing was needed.\n      \n\n\n        Lack of dampening period to avoid failing back too soon.\n      \n\nBenefits of establishing this best\n      practice: You can build more resilient systems that maintain reliability when\n    experiencing failures by degrading gracefully and recovering\n    quickly.\n  \nLevel of risk exposed if this best practice\n      is not established: High\n  \nImplementation guidance \n\n      AWS services, such as Elastic Load Balancing and Amazon EC2 Auto Scaling, help distribute load across resources and Availability\n      Zones. Therefore, failure of an individual resource (such as an\n      EC2 instance) or impairment of an Availability Zone can be\n      mitigated by shifting traffic to remaining healthy resources.\n    \n\n      For multi-Region workloads, designs are more complicated. For\n      example, cross-Region read replicas allow you to deploy your data\n      to multiple AWS Regions. However, failover is still required to\n      promote the read replica to primary and then point your traffic to\n      the new endpoint. Amazon Route\u00a053, Route\u00a053 Route 53 ARC, CloudFront, and\n      AWS Global Accelerator can help route traffic across AWS Regions.\n    \n\n      AWS services, such as Amazon S3, Lambda, API Gateway, Amazon SQS, Amazon SNS,\n      Amazon SES, Amazon Pinpoint, Amazon ECR, AWS Certificate Manager, EventBridge, or Amazon DynamoDB, are\n      automatically deployed to multiple Availability Zones by AWS. In\n      case of failure, these AWS services automatically route traffic to\n      healthy locations. Data is redundantly stored in multiple\n      Availability Zones and remains available.\n    \n\n      For Amazon RDS, Amazon Aurora, Amazon Redshift, Amazon EKS, or Amazon ECS, Multi-AZ is a\n      configuration option. AWS can direct traffic to the healthy\n      instance if failover is initiated. This failover action may be\n      taken by AWS or as required by the customer\n    \n\n      For Amazon EC2 instances, Amazon Redshift, Amazon ECS tasks, or Amazon EKS pods, you choose which Availability Zones to deploy to. For\n      some designs, Elastic Load Balancing provides the solution to\n      detect instances in unhealthy zones and route traffic to the\n      healthy ones. Elastic Load Balancing can also route traffic to\n      components in your on-premises data center.\n    \n\n      For Multi-Region traffic failover, rerouting can leverage Amazon\n      Route\u00a053, Route 53 ARC, AWS Global Accelerator, Route\u00a053 Private DNS for VPCs, or\n      CloudFront to provide a way to define internet domains and assign\n      routing policies, including health checks, to route traffic to\n      healthy Regions. AWS Global Accelerator provides static IP\n      addresses that act as a fixed entry point to your application,\n      then route to endpoints in AWS Regions of your choosing, using the\n      AWS global network instead of the internet for better performance\n      and reliability.\n    \nImplementation steps\n\n\n\n            Create failover designs for all appropriate applications and\n            services. Isolate each architecture component and create\n            failover designs meeting RTO and RPO for each component.\n          \n\n\n            Configure lower environments (like development or test) with all services that are\n            required to have a failover plan. Deploy the solutions using\n            infrastructure as code (IaC) to ensure repeatability.\n          \n\n\n            Configure a recovery site such as a second Region to implement and test the failover\n            designs. If necessary, resources for testing can be\n            configured temporarily to limit additional costs.\n          \n\n\n            Determine which failover plans are automated by AWS, which\n            can be automated by a DevOps process, and which might be\n            manual. Document and measure each service's RTO and RPO.\n          \n\n\n            Create a failover playbook and include all steps to failover\n            each resource, application, and service.\n          \n\n\n            Create a failback playbook and include all steps to failback\n            (with timing) each resource, application, and service\n          \n\n\n            Create a plan to initiate and rehearse the playbook. Use\n            simulations and chaos testing to test the playbook steps and\n            automation.\n          \n\n\n            For location impairment (such as Availability Zone or AWS Region), ensure you have systems in place to fail over to\n            healthy resources in unimpaired locations. Check quota,\n            autoscaling levels, and resources running before failover\n            testing.\n          \n\nResources \n\nRelated Well-Architected best\n        practices:\n\n\n\n\nREL13-\n            Plan for DR\n\n\n\nREL10\n            - Use fault isolation to protect your workload\n\n\n\nRelated documents:\n\n\n\n\nSetting\n            RTO and RPO Targets\n\n\n\nSet up\n            Route 53 ARC with application loadbalancers\n\n\n\nFailover\n            using Route\u00a053 Weighted routing\n\n\n\nDR\n            with Route 53 ARC\n\n\n\nEC2\n            with autoscaling\n\n\n\nEC2\n            Deployments - Multi-AZ\n\n\n\nECS\n            Deployments - Multi-AZ\n\n\n\nSwitch\n            traffic using Route 53 ARC\n\n\n\nLambda\n            with an Application Load Balancer and Failover\n\n\n\nACM\n            Replication and Failover\n\n\n\nParameter\n            Store Replication and Failover\n\n\n\nECR\n            cross region replication and Failover\n\n\n\nSecrets\n            manager cross region replication configuration\n\n\n\nEnable\n            cross region replication for EFS and Failover\n\n\n\nEFS\n            Cross Region Replication and Failover\n\n\n\nNetworking\n            Failover\n\n\n\nS3\n            Endpoint failover using MRAP\n\n\n\nCreate\n            cross region replication for S3\n\n\n\nFailover\n            Regional API Gateway with Route 53 ARC\n\n\n\nFailover\n            using multi-region global accelerator\n\n\n\nFailover\n            with DRS\n\n\n\nCreating\n            Disaster Recovery Mechanisms Using Amazon Route\u00a053\n\n\n\nRelated examples:\n\n\n\n\nDisaster\n            Recovery on AWS\n\n\n\nElastic\n            Disaster Recovery on AWS\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL11-BP01 Monitor all components of the workload to detect\n  failuresREL11-BP03 Automate healing on all layersDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_withstand_component_failures_failover2good.html", "title": "REL11-BP02 Fail over to healthy resources - AWS Well-Architected Framework", "description": "If a resource failure occurs, healthy resources should continue to serve requests. For location impairments (such as Availability Zone or AWS Region), ensure that you have systems in place to fail over to healthy resources in unimpaired locations.", "language": "en-US"}}