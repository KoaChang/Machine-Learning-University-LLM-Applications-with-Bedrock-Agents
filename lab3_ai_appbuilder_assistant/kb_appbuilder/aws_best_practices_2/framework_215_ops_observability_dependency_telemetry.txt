{"page_content": "OPS04-BP04 Implement dependency telemetry - AWS Well-Architected FrameworkOPS04-BP04 Implement dependency telemetry - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesOPS04-BP04 Implement dependency telemetry\n    Dependency telemetry is essential for monitoring the health and performance of the external services and components your workload relies on. It provides valuable insights into reachability, timeouts, and other critical events related to dependencies such as DNS, databases, or third-party APIs. By instrumenting your application to emit metrics, logs and traces about these dependencies, you gain a clearer understanding of potential bottlenecks, performance issues, or failures that might impact your workload.\n  \nDesired outcome: The dependencies your workload relies on are performing as expected, allowing you to proactively address issues and ensure optimal workload performance.\n  \nCommon anti-patterns:\n\n\n\n        Overlooking external dependencies: Focusing only on internal application metrics while neglecting metrics related to external dependencies.\n      \n\n\n        Lack of proactive monitoring: Waiting for issues to arise instead of continuously monitoring dependency health and performance.\n      \n\n\n        Siloed monitoring: Using multiple, disparate monitoring tools which can result in fragmented and inconsistent views of dependency health.\n      \n\nBenefits of establishing this best\n    practice:\n\n\n\n        Improved workload reliability: By ensuring that external dependencies are consistently available and performing optimally.\n      \n\n\n        Faster issue detection and resolution: Proactively identifying and addressing issues with dependencies before they impact the workload.\n      \n\n\n        Comprehensive view: Gaining a holistic view of both internal and external components that influence workload health.\n      \n\n\n        Enhanced workload scalability: By understanding the scalability limits and performance characteristics of external dependencies.\n      \n\nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n      Implement dependency telemetry by starting with identifying the services, infrastructure, and processes that your workload depends on. Quantify what good conditions look like when those dependencies are functioning as expected, and then determine what data is needed to measure those. With that information, you can craft dashboards and alerts that provide insights to your operations teams on the state of those dependencies. Use AWS tools to discover and quantify the impacts when dependencies cannot deliver as needed. Continually revisit your strategy to account for changes in priorities, goals, and gained insights.\n    \nImplementation steps\n\n        To implement dependency telemetry effectively:\n      \n\n\n\nIdentify external dependencies: Collaborate with stakeholders to pinpoint the external dependencies your workload relies on. External dependencies can encompass services like external databases, third-party APIs, network connectivity routes to other environments, and DNS services. The first step towards effective dependency telemetry is being comprehensive in understanding what those dependencies are.\n          \n\n\nDevelop a monitoring strategy: Once you have a clear picture of your external dependencies, architect a monitoring strategy tailored to them. This involves understanding the criticality of each dependency, its expected behavior, and any associated service-level agreements or targets (SLA or SLTs). Set up proactive alerts to notify you of status changes or performance deviations.\n          \n\n\nLeverage Amazon CloudWatch Internet Monitor: It offers insights into the global internet, helping to understand outages or disruptions that might impact your external dependencies.\n          \n\n\nStay informed with AWS Health Dashboard: It provides alerts and remediation guidance when AWS is experiencing events that may impact your services.\n          \n\n\nInstrument your application with AWS X-Ray: AWS X-Ray provides insights into how applications and their underlying dependencies are performing. By tracing requests from start to end, you can identify bottlenecks or failures in the external services or components your application relies on.\n          \n\n\nUse Amazon DevOps\u00a0Guru: This machine learning-driven service identifies operational issues, predicts when critical issues might occur, and recommends specific actions to take. It's invaluable for gaining insights into dependencies and determining that they're not the source of operational problems.\n          \n\n\nMonitor regularly: Continually monitor metrics and logs related to external dependencies. Set up alerts for unexpected behavior or degraded performance.\n          \n\n\nValidate after changes: Whenever there's an update or change in any of the external dependencies, validate their performance and check their alignment with your application's requirements.\n          \n\n\nLevel of effort for the implementation plan: Medium\n    \nResources\n\nRelated best practices:\n\n\n\n\nOPS04-BP01 Identify key performance indicators\n\n\n\nOPS04-BP02 Implement application telemetry\n\n\n\nOPS04-BP03 Implement user experience telemetry\n\n\n\nOPS04-BP05 Implement distributed tracing\n\n\n\nRelated documents:\n\n\n\n\n          What is AWS Health?\n        \n\n\n          Using Amazon CloudWatch Internet Monitor\n        \n\nAWS X-Ray Developer Guide\n\n\n          Amazon DevOps\u00a0Guru User Guide\n         \n\n\nRelated videos:\n\n\n\n\n          Visibility into how internet issues impact app performance\n        \n\n\n          Introduction to Amazon DevOps\u00a0Guru\n        \n\n\nRelated examples:\n\n\n\n\n          Gaining operational insights with AIOps using Amazon DevOps\u00a0Guru\n        \n\nAWS Health Aware\n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsOPS04-BP03 Implement user experience telemetryOPS04-BP05 Implement distributed tracingDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/ops_observability_dependency_telemetry.html", "title": "OPS04-BP04 Implement dependency telemetry - AWS Well-Architected Framework", "description": "Dependency telemetry is essential for monitoring the health and performance of the external services and components your workload relies on. It provides valuable insights into reachability, timeouts, and other critical events related to dependencies such as DNS, databases, or third-party APIs. By instrumenting your application to emit metrics, logs and traces about these dependencies, you gain a clearer understanding of potential bottlenecks, performance issues, or failures that might impact your workload.", "language": "en-US"}}