{"page_content": "REL06-BP07 Monitor end-to-end tracing of requests through your system - Reliability PillarREL06-BP07 Monitor end-to-end tracing of requests through your system - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceImplementation stepsResourcesREL06-BP07 Monitor end-to-end tracing of requests through your\n  systemTrace requests as they process through service components so product teams can more easily analyze and debug issues and improve performance.\nDesired outcome: Workloads with comprehensive tracing across all components are easy to debug, improving mean time to resolution (MTTR) of errors and latency by simplifying root cause discovery. End-to-end tracing reduces the time it takes to discover impacted components and drill into the detailed root causes of errors or latency.\n  \nCommon anti-patterns:\n\n\n\n        Tracing is used for some components but not for all. For example, without tracing for AWS Lambda, teams might not clearly understand latency caused by cold starts in a spiky workload.   \n      \n\n\n        Synthetic canaries or real-user monitoring (RUM) are not configured with tracing. Without canaries or RUM, client interaction telemetry is omitted from the trace analysis yielding an incomplete performance profile.  \n      \n\n\n        Hybrid workloads include both cloud native and third party tracing tools, but steps have not been taken elect and fully integrate a single tracing solution. Based on the elected tracing solution, cloud native tracing SDKs should be used to instrument components that are not cloud native or third party tools should be configured to ingest cloud native trace telemetry. \n\nBenefits of establishing this best practice: When development teams are alerted to issues, they can see a full picture of system component interactions, including component by component correlation to logging, performance, and failures. Because tracing makes it easy to visually identify root causes, less time is spent investigating root causes. Teams that understand component interactions in detail make better and faster decisions when resolving issues. Decisions like when to invoke disaster recovery (DR) failover or where to best implement self-healing strategies can be improved by analyzing systems traces, ultimately improving customer satisfaction with your services.\n  \nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      Teams that operate distributed applications can use tracing tools to establish a correlation identifier, collect traces of requests, and build service maps of connected components. All application components should be included in request traces including service clients, middleware gateways and event buses, compute components, and storage, including key value stores and databases. Include synthetic canaries and real-user monitoring in your end-to-end tracing configuration to measure remote client interactions and latency so that you can accurately evaluate your systems performance against your service level agreements and objectives. \n    \n\n      You can use AWS X-Ray and Amazon CloudWatch Application Monitoring instrumentation services to provide a complete view of requests as they travel through your application. X-Ray collects application telemetry and allows you to visualize and filter it across payloads, functions, traces, services, APIs, and can be turned on for system components with no-code or low-code. CloudWatch application monitoring includes ServiceLens to integrate your traces with metrics, logs, and alarms. CloudWatch application monitoring also includes synthetics to monitor your endpoints and APIs, as well as real-user monitoring to instrument your web application clients. \n    \nImplementation steps\n\n\n\n          Use AWS X-Ray on all supported native services like Amazon S3, AWS Lambda, and Amazon API Gateway. These AWS services enable X-Ray with configuration toggles using infrastructure as code, AWS SDKs, or the AWS Management Console. \n        \n\n\n          Instrument applications AWS Distro for Open Telemetry and X-Ray or third-party collection agents.\n        \n\nReview the AWS X-Ray Developer Guide for programming language specific implementation. These documentation sections detail how to instrument HTTP requests, SQL queries, and other processes specific to your application programming language.\n\n\n          Use X-Ray tracing for Amazon CloudWatch Synthetic Canaries and Amazon CloudWatch RUM to analyze the request path from your end user client through your downstream AWS infrastructure. \n        \n\n\n          Configure CloudWatch metrics and alarms based on resource health and canary telemetry so that teams are alerted to issues quickly, and can then deep dive into traces and service maps with ServiceLens. \n        \n\n\n          Enable X-Ray integration for third party tracing tools like Datadog, New Relic, or Dynatrace if you are using third party tools for your primary tracing solution.\n        \n\nResources\n\nRelated best practices:\n\n\n\n\nREL06-BP01 Monitor all components for the workload\n  (Generation)\n\n\n\nREL11-BP01 Monitor all components of the workload to detect\n  failures\n\n\n\nRelated documents:\n\n\n\n\nWhat\n            is AWS X-Ray?\n\n\n\n          Amazon CloudWatch: Application Monitoring\n        \n\n\nDebugging\n          with Amazon CloudWatch Synthetics and AWS X-Ray\n\n\n\nThe\n          Amazon Builders' Library: Instrumenting distributed systems\n          for operational visibility\n\n\n\n          Integrating AWS X-Ray with other AWS services\n        \n\nAWS Distro for OpenTelemetry and AWS X-Ray\n\n\n         Amazon CloudWatch: Using synthetic monitoring\n        \n\n\n          Amazon CloudWatch: Use CloudWatch RUM\n        \n\n\n          Set up Amazon CloudWatch synthetics canary and Amazon CloudWatch alarm\n        \n\n\n          Availability and Beyond: Understanding and Improving the Resilience of Distributed Systems on AWS\n\n\nRelated examples:\n\n\n\n\n          One Observability Workshop\n        \n\n\nRelated videos:\n\n\n\nAWS re:Invent 2022 - How to monitor applications across multiple accounts\n        \n\n\n          How to Monitor your AWS Applications\n        \n\n\nRelated tools:\n\n\n\nAWS X-Ray\n\n\n          Amazon CloudWatch\n        \n\n\n          Amazon Route\u00c2\u00a053\n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL06-BP06 Conduct reviews regularlyDesign your workload to adapt to changes in demandDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_monitor_aws_resources_end_to_end.html", "title": "REL06-BP07 Monitor end-to-end tracing of requests through your system - Reliability Pillar", "description": "Trace requests as they process through service components so product teams can more easily analyze and debug issues and improve performance.", "language": "en-US"}}