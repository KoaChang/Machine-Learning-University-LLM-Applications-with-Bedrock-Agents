{"page_content": "REL08-BP04 Deploy using immutable infrastructure - Reliability PillarREL08-BP04 Deploy using immutable infrastructure - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesREL08-BP04 Deploy using immutable infrastructure\n\nThis best practice was updated with new guidance on December 6, 2023.\n\n\n    Immutable infrastructure is a model that mandates that no updates,\n    security patches, or configuration changes happen in-place on\n    production workloads. When a change is needed, the architecture is\n    built onto new infrastructure and deployed into production.\n  \n    Follow an immutable infrastructure deployment strategy to increase the reliability, consistency, and reproducibility in your workload deployments.\n  \nDesired outcome: With immutable infrastructure, no in-place modifications are allowed to run infrastructure resources within a workload. Instead, when a change is needed, a new set of updated infrastructure resources containing all the necessary changes are deployed in parallel to your existing resources. This deployment is validated automatically, and if successful, traffic is gradually shifted to the new set of resources.\n  \n    This deployment strategy applies to software updates, security patches, infrastructure changes, configuration updates, and application updates, among others.\n  \nCommon anti-patterns:\n\n\n\n        Implementing in-place changes to running infrastructure resources.\n      \n\nBenefits of establishing this best practice:\n\n\n\nIncreased consistency across environments: Since there are no differences in infrastructure resources across environments, consistency is increased and testing is simplified.\n      \n\n\nReduction in configuration drifts: By replacing infrastructure resources with a known and version-controlled configuration, the infrastructure is set to a known, tested, and trusted state, avoiding configuration drifts.\n      \n\n\nReliable atomic deployments: Deployments either complete successfully or nothing changes, increasing consistency and reliability in the deployment process. \n      \n\n\nSimplified deployments: Deployments are simplified because they don't need to support upgrades. Upgrades are just new deployments. \n      \n\n\nSafer deployments with fast rollback and recovery processes: Deployments are safer because the previous working version is not changed. You can roll back to it if errors are detected. \n      \n\n\nEnhanced security posture: By not allowing changes to infrastructure, remote access mechanisms (such as SSH) can be disabled. This reduces the attack vector, improving your organization's security posture.\n      \n\nLevel of risk exposed if this best practice\n      is not established: Medium\n  \nImplementation guidance\n\nAutomation\n\n\n      When defining an immutable infrastructure deployment strategy, it is recommended to use automation as much as possible to increase reproducibility and minimize the potential of human error. For more detail, see REL08-BP05 Deploy changes with automation and Automating safe, hands-off deployments.\n    \n\n      With Infrastructure as code (IaC), infrastructure provisioning, orchestration, and deployment steps are defined in a programmatic, descriptive, and declarative way and stored in a source control system. Leveraging infrastructure as code makes it simpler to automate infrastructure deployment and helps achieve infrastructure immutability. \n    \n\nDeployment patterns\n\n\n      When a change in the workload is required, the immutable infrastructure deployment strategy mandates that a new set of infrastructure resources is deployed, including all necessary changes. It is important for this new set of resources to follow a rollout pattern that minimizes user impact. There are two main strategies for this deployment:\n    \n\nCanary\n        deployment:\u00a0The practice of directing a small\n      number of your customers to the new version, usually running on a\n      single service instance (the canary). You then deeply scrutinize any\n      behavior changes or errors that are generated. You can remove\n      traffic from the canary if you encounter critical problems and send\n      the users back to the previous version. If the deployment is\n      successful, you can continue to deploy at your desired velocity,\n      while monitoring the changes for errors, until you are fully\n      deployed. AWS CodeDeploy can be configured with a deployment\n      configuration that allows a canary deployment.\n    \n\nBlue/green\n        deployment: Similar to the canary deployment,\n      except that a full fleet of the application is deployed in parallel.\n      You alternate your deployments across the two stacks (blue and\n      green). Once again, you can send traffic to the new version, and\n      fall back to the old version if you see problems with the\n      deployment. Commonly all traffic is switched at once, however you\n      can also use fractions of your traffic to each version to dial up\n      the adoption of the new version using the\u00a0weighted DNS\n      routing\u00a0capabilities of Amazon Route\u00a053. AWS CodeDeploy and AWS Elastic Beanstalk can be configured with a deployment configuration\n      that allows a blue/green deployment.\n    \n\n\nFigure 8: Blue/green deployment with AWS Elastic Beanstalk\n        and Amazon Route\u00a053\n\n\nDrift detection\n\n\nDrift is defined as any change that causes an infrastructure resource to have a different state or configuration to what is expected. Any type of unmanaged configuration change goes against the notion of immutable infrastructure, and should be detected and remediated in order to have a successful implementation of immutable infrastructure.\n    \nImplementation steps\n\n\n\n            Disallow the in-place modification of running infrastructure resources.\n          \n\n\n\n                You can use AWS Identity and Access Management (IAM) to specify who or what can access services and resources in AWS, centrally manage fine-grained permissions, and analyze access to refine permissions across AWS.\n              \n\n\n\n            Automate the deployment of infrastructure resources to increase reproducibility and minimize the potential of human error.\n          \n\n\n\n                As described in the Introduction to DevOps on AWS whitepaper, automation is a cornerstone with AWS services and is internally supported in all services, features, and offerings.\n              \n\n\nPrebaking your Amazon Machine Image (AMI) can speed up the time to launch them. EC2 Image Builder is a fully managed AWS service that helps you automate the creation, maintenance, validation, sharing, and deployment of customized, secure, and up-to-date Linux or Windows custom AMI.\n              \n\n\n                Some of the services that support automation are:\n              \n\n\n\nAWS Elastic Beanstalk is a service to rapidly deploy and scale web applications developed with Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker on familiar servers such as Apache, NGINX, Passenger, and IIS.\n                  \n\n\nAWS Proton helps platform teams connect and coordinate all the different tools your development teams need for infrastructure provisioning, code deployments, monitoring, and updates. AWS Proton enables automated infrastructure as code provisioning and deployment of serverless and container-based applications.\n                  \n\n\n\n                Leveraging infrastructure as code makes it easy to automate infrastructure deployment, and helps achieve infrastructure immutability. AWS provides services that enable the creation, deployment, and maintenance of infrastructure in a programmatic, descriptive, and declarative way. \n              \n\n\n\nAWS CloudFormation helps developers create AWS resources in an orderly and predictable fashion. Resources are written in text files using JSON or YAML format. The templates require a specific syntax and structure that depends on the types of resources being created and managed. You author your resources in JSON or YAML with any code editor such as AWS Cloud9, check it into a version control system, and then CloudFormation builds the specified services in safe, repeatable manner.\n                  \n\n\nAWS Serverless Application Model (AWS SAM) is an open-source framework that you can use to build serverless applications on AWS. AWS SAM integrates with other AWS services, and is an extension of AWS CloudFormation.\n                  \n\n\nAWS Cloud Development Kit (AWS CDK) is an open-source software development framework to model and provision your cloud application resources using familiar programming languages. You can use AWS CDK to model application infrastructure using TypeScript, Python, Java, and .NET. AWS CDK uses AWS CloudFormation in the background to provision resources in a safe, repeatable manner.\n                  \n\n\nAWS Cloud Control API introduces a common set of Create, Read, Update, Delete, and List (CRUDL) APIs to help developers manage their cloud infrastructure in an easy and consistent way. The Cloud Control API common APIs allow developers to uniformly manage the lifecycle of AWS and third-party services.\n                  \n\n\n\n\n            Implement deployment patterns that minimize user impact.\n          \n\n\n\n                Canary deployments:\n              \n\n\n\n                    Set up an API Gateway canary release deployment\n                  \n\n\n                    Create a pipeline with canary deployments for Amazon ECS using AWS App Mesh\n\n\n\n                Blue/green deployments: the Blue/Green Deployments on AWS whitepaper describes example techniques to implement blue/green deployment strategies.\n              \n\n\n\n            Detect configuration or state drifts. For more detail, see Detecting unmanaged configuration changes to stacks and resources.\n          \n\nResources\n\nRelated best practices:\n\n\n\n\n          REL08-BP05 Deploy changes with automation\n        \n\n\nRelated documents:\n\n\n\n\n          Automating safe, hands-off deployments", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_tracking_change_management_immutable_infrastructure.html", "title": "REL08-BP04 Deploy using immutable infrastructure - Reliability Pillar", "description": "Immutable infrastructure is a model that mandates that no updates, security patches, or configuration changes happen in-place on production workloads. When a change is needed, the architecture is built onto new infrastructure and deployed into production.", "language": "en-US"}}