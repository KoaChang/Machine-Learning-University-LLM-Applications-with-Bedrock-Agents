{"page_content": "OPS10-BP02 Have a process per alert - AWS Well-Architected FrameworkOPS10-BP02 Have a process per alert - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesOPS10-BP02 Have a process per alert\n    Have a well-defined response (runbook or playbook), with a\n    specifically identified owner, for any event for which you raise an\n    alert. This ensures effective and prompt responses to operations\n    events and prevents actionable events from being obscured by less\n    valuable notifications.\n  \nCommon anti-patterns:\n\n\n\n        Your monitoring system presents you a stream of approved\n        connections along with other messages. The volume of messages is\n        so large that you miss periodic error messages that require your\n        intervention.\n      \n\n\n        You receive an alert that the website is down. There is no\n        defined process for when this happens. You are forced to take an\n        ad hoc approach to diagnose and resolve the issue. Developing\n        this process as you go extends the time to recovery.\n      \n\nBenefits of establishing this best\n    practice: By alerting only when action is required, you\n    prevent low value alerts from concealing high value alerts. By\n    having a process for every actionable alert, you create a consistent\n    and prompt response to events in your environment.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n\n\n          Process per alert: Any event for which you raise an alert\n          should have a well-defined response (runbook or playbook) with\n          a specifically identified owner (for example, individual,\n          team, or role) accountable for successful completion.\n          Performance of the response may be automated or conducted by\n          another team but the owner is accountable for ensuring the\n          process delivers the expected outcomes. By having these\n          processes, you ensure effective and prompt responses to\n          operations events and you can prevent actionable events from\n          being obscured by less valuable notifications. For example,\n          automatic scaling might be applied to scale a web front end,\n          but the operations team might be accountable to ensure that\n          the automatic scaling rules and limits are appropriate for\n          workload needs.\n        \n\nResources\n\nRelated documents:\n\n\n\n\nAmazon CloudWatch Features\n\n\n\nWhat\n          is Amazon CloudWatch Events?\n\n\n\nRelated videos:\n\n\n\n\nBuild\n          a Monitoring Plan\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsOPS10-BP01 Use a process for event, incident, and problem\n  managementOPS10-BP03 Prioritize operational events based on business\n  impactDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/ops_event_response_process_per_alert.html", "title": "OPS10-BP02 Have a process per alert - AWS Well-Architected Framework", "description": "Have a well-defined response (runbook or playbook), with a specifically identified owner, for any event for which you raise an alert. This ensures effective and prompt responses to operations events and prevents actionable events from being obscured by less valuable notifications.", "language": "en-US"}}