{"page_content": "OPS06-BP03 Employ safe deployment strategies - Operational Excellence PillarOPS06-BP03 Employ safe deployment strategies - Operational Excellence PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesOPS06-BP03 Employ safe deployment strategies\n    Safe production roll-outs control the flow of beneficial changes with an aim to minimize any perceived impact for customers from those changes. The safety controls provide inspection mechanisms to validate desired outcomes and limit the scope of impact from any defects introduced by the changes or from deployment failures. Safe roll-outs may include strategies such as feature-flags, one-box, rolling (canary releases), immutable, traffic splitting, and blue/green deployments.\n  \nDesired outcome: Your organization uses a continuous integration continuous delivery (CI/CD) system that provides capabilities for automating safe rollouts. Teams are required to use appropriate safe roll-out strategies.\n  \nCommon anti-patterns:\n\n\n\n        You deploy an unsuccessful change to all of production all at once. As a result, all customers are impacted simultaneously.\n      \n\n\n        A defect introduced in a simultaneous deployment to all systems requires an emergency release. Correcting it for all customers takes several days.\n      \n\n\n        Managing production release requires planning and participation of several teams. This puts constraints on your ability to frequently update features for your customers.\n      \n\n\n        You perform a mutable deployment by modifying your existing systems. After discovering that the change was unsuccessful, you are forced to modify the systems again to restore the old version, extending your time to recovery.\n      \n\nBenefits of establishing this best\n      practice: Automated deployments balance speed of roll-outs against delivering beneficial changes consistently to customers. Limiting impact prevents costly deployment failures and maximizes teams ability to efficiently respond to failures.\n  \nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      Continuous-delivery failures can lead to reduced service availability and bad customer experiences. To maximize the rate of successful deployments, implement safety controls in the end-to-end release process to minimize deployment errors, with a goal of achieving zero deployment failures.\n    \n\nCustomer example\n\n\n      AnyCompany Retail is on a mission to achieve minimal to zero downtime deployments, meaning that there's no perceivable impact to its users during deployments. To accomplish this, the company has established deployment patterns (see the following workflow diagram), such as rolling and blue/green deployments. All teams adopt one or more of these patterns in their CI/CD pipeline.\n    \n\n\nCodeDeploy workflow for Amazon EC2\nCodeDeploy workflow for Amazon ECS\nCodeDeploy workflow for Lambda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplementation steps\n\n\n\n            Use an approval workflow to initiate the sequence of production roll-out steps upon promotion to production .\n          \n\n\n            Use an automated deployment system such as AWS CodeDeploy. AWS CodeDeploy deployment options include in-place deployments for EC2/On-Premises and blue/green deployments for EC2/On-Premises, AWS Lambda, and Amazon ECS (see the preceding workflow diagram).\n            \n          \n\n\n\n                Where applicable, integrate AWS CodeDeploy with other AWS services or integrate AWS CodeDeploy with partner product and services.\n              \n\n\n\n            Use blue/green deployments for databases such as Amazon Aurora and Amazon RDS.\n          \n\n\nMonitor deployments using Amazon CloudWatch, AWS CloudTrail, and Amazon SNS event notifications.\n          \n\n\n            Perform post-deployment automated testing including functional, security, regression, integration, and any load tests.\n          \n\n\nTroubleshoot deployment issues.\n          \n\n\nLevel of effort for the implementation plan: Medium\n      \nResources\n\nRelated best practices:\n\n\n\n\nOPS05-BP02 Test and validate changes\n\n\n\nOPS05-BP09 Make frequent, small, reversible changes\n\n\n\nOPS05-BP10 Fully automate integration and deployment\n\n\n\nRelated documents:\n\n\n\nAWS Builders Library | Automating safe, hands-off deployments | Production deployments\n        \n\nAWS Builders Library | My CI/CD pipeline is my release captain | Safe, automatic\n          production releases\n\nAWS Whitepaper | Practicing Continuous Integration and Continuous Delivery on AWS |\n          Deployment methods\n\nAWS CodeDeploy User Guide\n\nWorking with deployment configurations in AWS CodeDeploy\n\nSet up an API Gateway canary release deployment \n\nAmazon ECS Deployment Types\n\nFully Managed Blue/Green Deployments in Amazon Aurora and Amazon RDS\n\nBlue/Green deployments with AWS Elastic Beanstalk\n\n\nRelated videos:\n\n\n\nre:Invent 2020 | Hands-off: Automating continuous delivery pipelines at Amazon\n\nre:Invent 2019 | Amazon's Approach to high-availability deployment\n\n\nRelated examples:\n\n\n\nTry a Sample Blue/Green Deployment in AWS CodeDeploy\n\nWorlshop | Buiding CI/CD pipelines for Lambda canary deployments using AWS CDK\n\nWorkshop | Blue/Green and Canary Deployment for EKS and ECS\n\nWorkshop | Building a Cross-account CI/CD Pipeline\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsOPS06-BP02 Test deploymentsOPS06-BP04 Automate testing and rollbackDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_mit_deploy_risks_deploy_mgmt_sys.html", "title": "OPS06-BP03 Employ safe deployment strategies - Operational Excellence Pillar", "description": "Safe production roll-outs control the flow of beneficial changes with an aim to minimize any perceived impact for customers from those changes. The safety controls provide inspection mechanisms to validate desired outcomes and limit the scope of impact from any defects introduced by the changes or from deployment failures. Safe roll-outs may include strategies such as feature-flags, one-box, rolling (canary releases), immutable, traffic splitting, and blue/green deployments.", "language": "en-US"}}