{"page_content": "SEC03-BP01 Define access requirements - Security PillarSEC03-BP01 Define access requirements - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesSEC03-BP01 Define access requirementsEach component or resource of your workload needs to be accessed by administrators, end\n    users, or other components. Have a clear definition of who or what should have access to each\n    component, choose the appropriate identity type and method of authentication and\n    authorization.\nCommon anti-patterns:\n\n\nHard-coding or storing secrets in your application. \n\nGranting custom permissions for each user. \n\nUsing long-lived credentials. \n\nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n Each component or resource of your workload needs to be accessed by administrators, end\n      users, or other components. Have a clear definition of who or what should have access to each\n      component, choose the appropriate identity type and method of authentication and\n      authorization.\nRegular access to AWS accounts within the organization should be provided using\u00a0federated access or a centralized\n      identity provider. You should also centralize your identity management and ensure that there\n      is an established practice to integrate AWS access to your employee access lifecycle. For\n      example, when an employee changes to a job role with a different access level, their group\n      membership should also change to reflect their new access requirements.\n When defining access requirements for non-human identities, determine which applications\n      and components need access and how permissions are granted. Using IAM roles built with the\n      least privilege access model is a recommended approach. AWS Managed\n        policies provide predefined IAM policies that cover most common use cases.\nAWS services, such as AWS Secrets Manager and AWS Systems Manager\n        Parameter Store, can help decouple secrets from the application or workload securely\n      in cases where it's not feasible to use IAM roles. In Secrets Manager, you can establish\n      automatic rotation for your credentials. You can use Systems Manager to reference parameters in your\n      scripts, commands, SSM documents, configuration, and automation workflows by using the unique\n      name that you specified when you created the parameter.\nYou can use AWS Identity and Access Management Roles Anywhere to obtain\u00a0temporary security credentials in\n        IAM\u00a0for workloads that run outside of AWS. Your workloads can use the\n        same\u00a0IAM\n        policies\u00a0and\u00a0IAM roles\u00a0that you use with AWS applications to access AWS resources. \n\n      Where possible, prefer short-term temporary credentials over\n      long-term static credentials. For scenarios in which you need \n      users with programmatic access and long-term credentials,\n      use\u00a0access\n        key last used information to rotate and remove access keys.\n    \nUsers need programmatic access if they want to interact with AWS outside of the AWS Management Console. The way to grant programmatic access depends on the type of user that's accessing AWS.\nTo grant users programmatic access, choose one of the following options.\n\n\nWhich user needs programmatic access?\nTo\nBy\n\n\n\n\nWorkforce identity\n(Users managed in IAM Identity Center)\n\nUse temporary credentials to sign programmatic requests to the AWS CLI, AWS SDKs, or\n                        AWS APIs.\n\nFollowing the instructions for the interface that you want to use.\n\n\nFor the AWS CLI, see Configuring the AWS CLI to use AWS IAM Identity Center in the\n                                        AWS Command Line Interface User Guide.\n\nFor AWS SDKs, tools, and AWS APIs, see IAM Identity Center\n                                        authentication in the AWS SDKs and Tools Reference Guide.\n\n\n\n\nIAM\nUse temporary credentials to sign programmatic requests to the AWS CLI, AWS SDKs, or\n                        AWS APIs.\nFollowing the instructions in Using temporary\n                        credentials with AWS resources in the IAM User Guide.\n\n\nIAM\n(Not recommended)Use long-term credentials to sign programmatic requests\n                        to the AWS CLI, AWS SDKs, or AWS APIs.\n\nFollowing the instructions for the interface that you want to use.\n\n\nFor the AWS CLI, see Authenticating using IAM user credentials in\n                                    the AWS Command Line Interface User Guide.\n\nFor AWS SDKs and tools, see Authenticate using long-term credentials in the\n                                        AWS SDKs and Tools Reference Guide.\n\nFor AWS APIs, see Managing access keys for\n                                    IAM users in the IAM User Guide.\n\n\n\n\nResources\n\nRelated documents:\n\n\n\n\nAttribute-based\n            access control (ABAC)\n\n\n\nAWS IAM Identity Center\n\n\n\nIAM\n            Roles Anywhere\n\n\n\nAWS Managed policies for IAM Identity Center\n\n\n\nAWS IAM policy conditions\n\n\n\nIAM use cases\n\n\n\nRemove\n            unnecessary credentials\n\n\n\nWorking\n            with Policies\n\n\n\nHow to control access to AWS resources based on AWS account, OU, or organization\n\n\n\nIdentify, arrange, and manage secrets easily using enhanced search in AWS Secrets Manager\n\n\n\nRelated videos:\n\n\n\n\nBecome an IAM\n            Policy Master in 60 Minutes or Less\n\n\n\nSeparation of\n            Duties, Least Privilege, Delegation, and CI/CD\n\n\n\nStreamlining\n            identity and access management for innovation\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsPermissions managementSEC03-BP02 Grant least privilege accessDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_define.html", "title": "SEC03-BP01 Define access requirements - Security Pillar", "description": "Each component or resource of your workload needs to be accessed by administrators, end users, or other components. Have a clear definition of who or what should have access to each component, choose the appropriate identity type and method of authentication and authorization.", "language": "en-US"}}