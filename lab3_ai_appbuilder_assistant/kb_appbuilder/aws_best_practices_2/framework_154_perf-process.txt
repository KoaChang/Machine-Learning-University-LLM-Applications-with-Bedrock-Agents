{"page_content": "Process and culture - AWS Well-Architected FrameworkProcess and culture - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkProcess and culture\n            When architecting workloads, there are principles and practices that\n            you can adopt to help you better run efficient high-performing cloud\n            workloads. To adopt a culture that fosters performance efficiency of\n            cloud workloads, consider these key principles and practices.\n          \n            Consider these key principles to build this culture:\n          \n\n\nInfrastructure as code:\n                Define your infrastructure as code using approaches such as AWS CloudFormation templates. The use of templates allows you to\n                place your infrastructure into source control alongside your\n                application code and configurations. This allows you to apply\n                the same practices you use to develop software in your\n                infrastructure so you can iterate rapidly.\n              \n\n\nDeployment pipeline: Use a\n                continuous integration/continuous deployment (CI/CD) pipeline\n                (for example, source code repository, build systems, deployment,\n                and testing automation) to deploy your infrastructure. This\n                allows you to deploy in a repeatable, consistent, and low-cost\n                fashion as you iterate.\n              \n\n\nWell-defined metrics: Set up\n                and monitor metrics to capture key performance indicators\n                (KPIs). We recommend that you use both technical and business\n                metrics. For websites or mobile apps, key metrics are capturing\n                time-to-first-byte or rendering. Other generally applicable\n                metrics include thread count, garbage collection rate, and wait\n                states. Business metrics, such as the aggregate cumulative cost\n                per request, can alert you to ways to drive down costs.\n                Carefully consider how you plan to interpret metrics. For\n                example, you could choose the maximum or 99th percentile instead\n                of the average.\n              \n\n\nPerformance test\n                  automatically: As part of your deployment process,\n                automatically start performance tests after the quicker running\n                tests have passed successfully. The automation should create a\n                new environment, set up initial conditions such as test data,\n                and then run a series of benchmarks and load tests. Results from\n                these tests should be tied back to the build so you can track\n                performance changes over time. For long-running tests, you can\n                make this part of the pipeline asynchronous from the rest of the\n                build. Alternatively, you could run performance tests overnight\n                using Amazon EC2 Spot Instances.\n              \n\n\nLoad generation: You should\n                create a series of test scripts that replicate synthetic or\n                prerecorded user journeys. These scripts should be idempotent\n                and not coupled, and you might need to include pre-warming\n                scripts to yield valid results. As much as possible, your test\n                scripts should replicate the behavior of usage in production.\n                You can use software or software-as-a-service (SaaS) solutions\n                to generate the load. Consider using AWS Marketplace solutions\n                and Spot Instances \u2014 they can be cost-effective ways to generate\n                the load.\n              \n\n\nPerformance visibility: Key\n                metrics should be visible to your team, especially metrics\n                against each build version. This allows you to see any\n                significant positive or negative trend over time. You should\n                also display metrics on the number of errors or exceptions to\n                make sure you are testing a working system.\n              \n\nVisualization: Use visualization techniques that make it clear where performance issues, hot spots, wait states, or low utilization is occurring. Overlay performance metrics over architecture diagrams \u2014 call graphs or code can help identify issues quickly.\n              \n\n\nRegular review process: Architectures performing poorly is usually the result of a non-existent or broken performance review process. If your architecture is performing poorly, implementing a performance review process allows you to drive iterative improvement.\n              \n\n\nContinual optimization: Adopt a culture to continually optimize the performance efficiency of your cloud workload.\n              \n The following question focuses on these considerations for performance efficiency. \n\nPERF 5:\u00a0 What process do you use to support more performance efficiency for your workload?\n                  \n\n\n\n\n                    When architecting workloads, there are principles and practices that\n                    you can adopt to help you better run efficient high-performing cloud\n                    workloads. To adopt a culture that fosters performance efficiency of\n                    cloud workloads, consider these key principles and practices.\n                  \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsNetworking and content deliveryResourcesDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/perf-process.html", "title": "Process and culture - AWS Well-Architected Framework", "description": "When architecting workloads, there are principles and practices that you can adopt to help you better run efficient high-performing cloud workloads. To adopt a culture that fosters performance efficiency of cloud workloads, consider these key principles and practices.", "language": "en-US"}}