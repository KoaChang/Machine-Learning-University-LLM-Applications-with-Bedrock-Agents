{"page_content": "REL05-BP07 Implement emergency levers - AWS Well-Architected FrameworkREL05-BP07 Implement emergency levers - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesREL05-BP07 Implement emergency levers\n\nThis best practice was updated with new guidance on December 6, 2023.\n\n\n    Emergency levers are rapid processes that can mitigate availability\n    impact on your workload.\n  \n    Emergency levers work by disabling, throttling, or changing the behavior of components or dependencies using known and tested mechanisms. This can alleviate workload impairments caused by resource exhaustion due to unexpected increases in demand and reduce the impact of failures in non-critical components within your workload.\n  \nDesired outcome: By implementing emergency levers, you can establish known-good processes to maintain the availability of critical components in your workload. The workload should degrade gracefully and continue to perform its business-critical functions during the activation of an emergency lever. For more detail on graceful degradation, see REL05-BP01 Implement graceful degradation to transform applicable hard dependencies into soft dependencies.\n  \nCommon anti-patterns:\n\n\n\n        Failure of non-critical dependencies impacts the availability of your core workload.\n      \n\n\n        Not testing or verifying critical component behavior during non-critical component impairment.\n      \n\n\n        No clear and deterministic criteria defined for activation or deactivation of an emergency lever.\n      \n\nBenefits of establishing this best practice: Implementing emergency levers can improve the availability of the critical components in your workload by providing your resolvers with established processes to respond to unexpected spikes in demand or failures of non-critical dependencies. \n  \nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n\n\n          Identify critical components in your workload.\n        \n\n\n          Design and architect the critical components in your workload to withstand failure of non-critical components.\n        \n\n\n          Conduct testing to validate the behavior of your critical components during the failure of non-critical components.\n        \n\n\n          Define and monitor relevant metrics or triggers to initiate emergency lever procedures.\n        \n\n\n          Define the procedures (manual or automated) that comprise the emergency lever.\n        \n\nImplementation steps\n\n\n\n            Identify business-critical components in your workload.\n          \n\n\n\n                Each technical component in your workload should be mapped to its relevant business function and ranked as critical or non-critical. For examples of critical and non-critical functionality at Amazon, see Any Day Can Be Prime Day: How Amazon.com Search Uses Chaos Engineering to Handle Over 84K Requests Per Second.\n              \n\n\n                This is both a technical and business decision, and varies by organization and workload.\n              \n\n\n\n            Design and architect the critical components in your workload to withstand failure of non-critical components.\n          \n\n\n\n                During dependency analysis, consider all potential failure modes, and verify that your emergency lever mechanisms deliver the critical functionality to downstream components.\n              \n\n\n\n            Conduct testing to validate the behavior of your critical components during activation of your emergency levers.\n          \n\n\n\n                Avoid bimodal behavior. For more detail, see REL11-BP05 Use static stability to prevent bimodal behavior.\n              \n\n\n\n            Define, monitor, and alert on relevant metrics to initiate the emergency lever procedure.\n          \n\n\n\n                Finding the right metrics to monitor depends on your workload. Some example metrics are latency or the number of failed request to a dependency.\n              \n\n\n\n           Define the procedures, manual or automated, that comprise the emergency lever.\n          \n\n\n\n                This may include mechanisms such as load shedding, throttling requests, or implementing graceful degradation.\n              \n\n\nResources\n\nRelated best practices:\n\n\n\n\nREL05-BP01 Implement graceful degradation to transform applicable hard dependencies into soft dependencies\n\n\n\nREL05-BP02 Throttle requests\n\n\n\nREL11-BP05 Use static stability to prevent bimodal behavior\n\n\n\nRelated documents:\n\n\n\n\n          Automating safe, hands-off deployments\n        \n\n\nAny Day Can Be Prime Day: How Amazon.com Search Uses Chaos Engineering to Handle Over 84K Requests Per Second\n\n\n\nRelated videos:\n\n\n\nAWS re:Invent 2020: Reliability, consistency, and confidence through immutability\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL05-BP06 Make services stateless where possibleChange managementDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_mitigate_interaction_failure_emergency_levers.html", "title": "REL05-BP07 Implement emergency levers - AWS Well-Architected Framework", "description": "Emergency levers are rapid processes that can mitigate availability impact on your workload.", "language": "en-US"}}