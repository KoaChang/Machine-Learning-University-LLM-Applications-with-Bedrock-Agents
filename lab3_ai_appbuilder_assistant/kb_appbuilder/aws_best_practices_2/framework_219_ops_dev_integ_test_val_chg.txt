{"page_content": "OPS05-BP02 Test and validate changes - AWS Well-Architected FrameworkOPS05-BP02 Test and validate changes - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesOPS05-BP02 Test and validate changes\n    Every change deployed must be tested to avoid errors in production. This best practice is focused on testing changes from version control to artifact build. Besides application code changes, testing should include infrastructure, configuration, security controls, and operations procedures. Testing takes many forms, from unit tests to software component analysis (SCA). Move tests further to the left in the software integration and delivery process results in higher certainty of artifact quality.\n    \n  \n    Your organization must develop testing standards for all software artifacts. Automated tests reduce toil and avoid manual test errors. Manual tests may be necessary in some cases. Developers must have access to automated test results to create feedback loops that improve software quality.\n    \n  \nDesired outcome: Your software changes are tested before they are delivered. Developers have access to test results and validations. Your organization has a testing standard that applies to all software changes.\n  \nCommon anti-patterns:\n\n\nYou deploy a new software change without any tests. It fails to run in production, which leads to an outage.\n\nNew security groups are deployed with AWS CloudFormation without being tested in a pre-production environment. \n        The security groups make your app unreachable for your customers.\n\nA method is modified but there are no unit tests. The software fails when it is deployed to production.\n\nBenefits of establishing this best\n      practice: Change fail rate of software deployments are reduced.  Software quality is improved. Developers have increased awareness on the viability of their code.  Security policies can be rolled out with confidence to support organization's compliance. Infrastructure changes such as automatic scaling policy updates are tested in advance to meet traffic needs.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n      Testing is done on all changes, from application code to infrastructure, as part of your continuous \n      integration practice. Test results are published so that developers have fast feedback. Your organization \n      has a testing standard that all changes must pass.\n    \n\nCustomer example\n\n\n      As part of their continuous integration pipeline, AnyCompany Retail conducts several types of tests \n      on all software artifacts. They practice test driven development so all software has unit tests. Once \n      the artifact is built, they run end-to-end tests. After this first round of tests is complete, they \n      run a static application security scan, which looks for known vulnerabilities. Developers receive \n      messages as each testing gate is passed. Once all tests are complete, the software artifact is stored \n      in an artifact repository.\n    \nImplementation steps\n\n\n\n          Work with stakeholders in your organization to develop a testing standard for software artifacts. \n          What standard tests should all artifacts pass? Are there compliance or governance requirements that \n          must be included in the test coverage? Do you need to conduct code quality tests? When tests complete, \n          who needs to know? \n        \n\n\n\n              The AWS Deployment Pipeline Reference Architecture \n              contains an authoritative list of types of tests that can be conducted on software artifacts as part of an integration \n              pipeline.\n            \n\n\n\n          Instrument your application with the necessary tests based on your software testing \n          standard. Each set of tests should complete in under ten minutes. Tests should run \n          as part of an integration pipeline. \n        \n\n\n\nAmazon CodeGuru Reviewer can test your application code for defects.\n            \n\n\n              You can use AWS CodeBuild to conduct tests on software artifacts.  \n            \n\n\nAWS CodePipeline can orchestrate your software tests into a pipeline.\n            \n\n\nResources\n\nRelated best practices:\n\n\n\n\nOPS05-BP01 Use version control\n\n\n\nOPS05-BP06 Share design standards\n\n\n\nOPS05-BP10 Fully automate integration and deployment\n\n\n\nRelated documents:\n\n\n\n\n          Adopt a test-driven development approach\n        \n\n\n          Automated AWS CloudFormation Testing Pipeline with TaskCat and CodePipeline\n        \n\n\n          Building end-to-end AWS DevSecOps CI/CD pipeline with open source SCA, SAST, and DAST tools\n        \n\n\n          Getting started with testing serverless applications\n        \n\n\n          My CI/CD pipeline is my release captain\n        \n\n\n          Practicing Continuous Integration and Continuous Delivery on AWS Whitepaper\n        \n\n\nRelated videos:\n\n\n\nAWS re:Invent 2020: Testable infrastructure: Integration testing on AWS\n\nAWS Summit ANZ 2021 - Driving a test-first strategy with CDK and test driven development\n        \n\n\n          Testing Your Infrastructure as Code with AWS CDK\n        \n\n\nRelated resources:\n\n\n\nAWS Deployment Pipeline Reference Architecture - Application\n        \n\nAWS Kubernetes DevSecOps Pipeline\n        \n\n\n          Policy as Code Workshop \u00e2\u20ac\u201c Test Driven Development\n        \n\n\n          Run unit tests for a Node.js application from GitHub by using AWS CodeBuild\n\n\n          Use Serverspec for test-driven development of infrastructure code\n        \n\n\nRelated services:\n\n\n\n\nAmazon CodeGuru Reviewer\n\n\n\nAWS CodeBuild\n\n\n\nAWS CodePipeline\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsOPS05-BP01 Use version controlOPS05-BP03 Use configuration management systemsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/ops_dev_integ_test_val_chg.html", "title": "OPS05-BP02 Test and validate changes - AWS Well-Architected Framework", "description": "Every change deployed must be tested to avoid errors in production. This best practice is focused on testing changes from version control to artifact build. Besides application code changes, testing should include infrastructure, configuration, security controls, and operations procedures. Testing takes many forms, from unit tests to software component analysis (SCA). Move tests further to the left in the software integration and delivery process results in higher certainty of artifact quality.", "language": "en-US"}}