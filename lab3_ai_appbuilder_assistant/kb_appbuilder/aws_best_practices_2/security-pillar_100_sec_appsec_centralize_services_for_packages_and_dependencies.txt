{"page_content": "SEC11-BP05 Centralize services for packages and dependencies - Security PillarSEC11-BP05 Centralize services for packages and dependencies - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidance Resources SEC11-BP05 Centralize services for packages and dependenciesProvide centralized services for builder teams to obtain\n    software packages and other dependencies. This allows the validation\n    of packages before they are included in the software that you write,\n    and provides a source of data for the analysis of the software being\n    used in your organization.Desired outcome: Software is comprised of a set of other\n    software packages in addition to the code that is being written. This makes it simple to consume\n    implementations of functionality that are repeatedly used, such as a JSON parser or an\n    encryption library. Logically centralizing the sources for these packages and dependencies\n    provides a mechanism for security teams to validate the properties of the packages before they\n    are used. This approach also reduces the risk of an unexpected issue being caused by a change in\n    an existing package, or by builder teams including arbitrary packages directly from the\n    internet. Use this approach in conjunction with the manual and automated testing flows to\n    increase the confidence in the quality of the software that is being developed. Common anti-patterns:\n\n\n          Pulling packages from arbitrary repositories on the internet.\n        \n\n\n          Not testing new packages before making them available to\n          builders.\n        \nBenefits of establishing this best practice:\n\n\n          Better understanding of what packages are being used in the\n          software being built.\n        \n\n\n          Being able to notify workload teams when a package needs to be\n          updated based on the understanding of who is using what.\n        \n\n\n          Reducing the risk of a package with issues being included in\n          your software.\n        \n\nLevel of risk exposed if this best practice is not established:\n    Medium \nImplementation guidance \n\n      Provide centralized services for packages and dependencies in a\n      way that is simple for builders to consume. Centralized services\n      can be logically central rather than implemented as a monolithic\n      system. This approach allows you to provide services in a way that\n      meets the needs of your builders. You should implement an\n      efficient way of adding packages to the repository when updates\n      happen or new requirements emerge. AWS services such as\n      AWS       CodeArtifact or similar AWS partner solutions provide a way\n      of delivering this capability.\n    \nImplementation steps:\n\nImplement a logically centralized repository service that\n          is available in all of the environments where software is\n          developed. Include access to the repository as part of the AWS account\n          vending process.Build automation to test packages before they are published\n          in a repository.Maintain metrics of the most commonly used packages,\n          languages, and teams with the highest amount of change.\n\n            Provide an automated mechanism for builder teams to request\n            new packages and provide feedback.\n          \n\n\n            Regularly scan packages in your repository to identify the\n            potential impact of newly discovered issues.\n          \n\nResources \n\nRelated best practices:\n\n\n\n\nSEC11-BP02 Automate testing throughout the development and\n  release lifecycle\n\n\n\nRelated documents:\n\n\n\n\nAccelerate\n          deployments on AWS with effective governance\n\n\n\nTighten\n          your package security with CodeArtifact Package Origin Control\n          toolkit\n\n\n\nDetecting\n          security issues in logging with Amazon CodeGuru Reviewer\n\n\n\nSupply chain Levels for\n          Software Artifacts (SLSA)\n\n\n\nRelated videos:\n\n\n\n\nProactive\n          security: Considerations and approaches\n\n\n\nThe\n          AWS Philosophy of Security (re:Invent 2017)\n\n\n\nWhen\n          security, safety, and urgency all matter: Handling\n          Log4Shell\n\n\n\nRelated examples:\n\n\n\n\nMulti\n          Region Package Publishing Pipeline (GitHub)\n        \n\n\nPublishing\n          Node.js Modules on AWS CodeArtifact using AWS CodePipeline (GitHub)\n        \n\n\nAWS CDK Java CodeArtifact Pipeline Sample (GitHub)\n        \n\n\nDistribute\n          private .NET NuGet packages with AWS CodeArtifact\n          (GitHub)\n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC11-BP04 Manual code reviewsSEC11-BP06 Deploy software programmaticallyDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_centralize_services_for_packages_and_dependencies.html", "title": "SEC11-BP05 Centralize services for packages and dependencies - Security Pillar", "description": "Provide centralized services for builder teams to obtain software packages and other dependencies. This allows the validation of packages before they are included in the software that you write, and provides a source of data for the analysis of the software being used in your organization.", "language": "en-US"}}