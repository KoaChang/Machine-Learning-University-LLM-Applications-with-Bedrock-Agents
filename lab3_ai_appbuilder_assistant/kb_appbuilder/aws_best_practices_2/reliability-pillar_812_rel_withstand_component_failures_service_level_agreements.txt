{"page_content": "REL11-BP07 Architect your product to meet availability targets and uptime service level agreements (SLAs) - Reliability PillarREL11-BP07 Architect your product to meet availability targets and uptime service level agreements (SLAs) - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesREL11-BP07 Architect your product to meet availability targets and uptime service level agreements (SLAs)Architect your product to meet availability targets and uptime service level agreements (SLAs). If you publish or privately agree to availability targets or uptime SLAs, verify that your architecture and operational processes are designed to support them. \nDesired outcome: Each application has a defined target for availability and SLA for performance metrics, which can be monitored and maintained in order to meet business outcomes.\n  \nCommon anti-patterns:\n\n\n\n        Designing and deploying workload\u00e2\u20ac\u2122s without setting any SLAs.\n      \n\n\n        SLA metrics are set too high without rationale or business requirements.\n      \n\n\n        Setting SLAs without taking into account for dependencies and their underlying SLA.\n      \n\n\n        Application designs are created without considering the Shared Responsibility Model for Resilience.\n      \n\nBenefits of establishing this best practice: Designing applications based on key resiliency targets helps you meet business objectives and customer expectations. These objectives help drive the application design process that evaluates different technologies and considers various tradeoffs. \n  \nLevel of risk exposed if this best practice\n      is not established: Medium\n  \nImplementation guidance\n\n      Application designs have to account for a diverse set of requirements that are derived from business, operational, and financial objectives. Within the operational requirements, workloads need to have specific resilience metric targets so they can be properly monitored and supported. Resilience metrics should not be set or derived after deploying the workload. They should be defined during the design phase and help guide various decisions and tradeoffs. \n    \n\n\n\n          Every workload should have its own set of resilience metrics. Those metrics may be different from other business applications. \n        \n\n\n          Reducing dependencies can have a positive impact on availability. Each workload should consider its dependencies and their SLAs. In general, select dependencies with availability goals equal to or greater than the goals of your workload. \n        \n\n\n          Consider loosely coupled designs so your workload can operate correctly despite dependency impairment, where possible. \n        \n\n\n          Reduce control plane dependencies, especially during recovery or a degradation. Evaluate designs that are statically stable for mission critical workloads. Use resource sparing to increase the availability of those dependencies in a workload.\n        \n\n\n          Observability and instrumentation are critical for achieving SLAs by reducing Mean Time to Detection (MTTD) and Mean Time to Repair (MTTR). \n        \n\n\n          Less frequent failure (longer MTBF), shorter failure detection times (shorter MTTD), and shorter repair times (shorter MTTR) are the three factors that are used to improve availability in distributed systems. \n        \n\n\n          Establishing and meeting resilience metrics for a workload is foundational to any effective design. Those designs must factor in tradeoffs of design complexity, service dependencies, performance, scaling, and costs.\n        \n\n\nImplementation steps\n\n\n\n\n          Review and document the workload design considering the following questions:\n        \n\n\n\n              Where are control planes used in the workload?\n            \n\n\n              How does the workload implement fault tolerance?\n            \n\n\n              What are the design patterns for scaling, automatic scaling, redundancy, and highly available components?\n            \n\n\n              What are the requirements for data consistency and availability?\n            \n\n\n              Are there considerations for resource sparing or resource static stability?\n            \n\n\n              What are the service dependencies?\n            \n\n\n\n          Define SLA metrics based on the workload architecture while working with stakeholders.  Consider the SLAs of all dependencies used by the workload.\n        \n\n\n          Once the SLA target has been set, optimize the architecture to meet the SLA.\n        \n\n\n          Once the design is set that will meet the SLA, implement operational changes, process automation, and runbooks that also will have focus on reducing MTTD and MTTR.\n        \n\n\n          Once deployed, monitor and report on the SLA.\n        \n\nResources\n\nRelated best practices:\n\n\n\n\nREL03-BP01 Choose how to segment your workload\n\n\n\nREL10-BP01 Deploy the workload to multiple locations\n\n\n\nREL11-BP01 Monitor all components of the workload to detect\n  failures\n\n\n\nREL11-BP03 Automate healing on all layers\n\n\n\nREL12-BP05 Test resiliency using chaos engineering\n\n\n\nREL13-BP01 Define recovery objectives for downtime and data\n  loss\n\n\n\n          Understanding workload health\n        \n\n\nRelated documents:\n\n\n\n\n          Availability with redundancy\n        \n\n\n          Reliability pillar - Availability\n        \n\n\n          Measuring availability\n        \n\nAWS Fault Isolation Boundaries\n        \n\n\n          Shared Responsibility Model for Resiliency\n        \n\n\n          Static stability using Availability Zones\n        \n\nAWS Service Level Agreements (SLAs)\n        \n\n\n          Guidance for Cell-based Architecture on AWS\n\nAWS infrastructure\n        \n\n\n          Advanced Multi-AZ Resiliance Patterns whitepaper\n        \n\n\nRelated services:\n\n\n\n\n          Amazon CloudWatch\n        \n\nAWS Config\n\nAWS Trusted Advisor\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL11-BP06 Send notifications when events impact\n  availabilityTest reliabilityDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_service_level_agreements.html", "title": "REL11-BP07 Architect your product to meet availability targets and uptime service level agreements (SLAs) - Reliability Pillar", "description": "Architect your product to meet availability targets and uptime service level agreements (SLAs). If you publish or privately agree to availability targets or uptime SLAs, verify that your architecture and operational processes are designed to support them.", "language": "en-US"}}