{"page_content": "Select the best pricing model - Cost Optimization PillarSelect the best pricing model - Cost Optimization PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkSelect the best pricing model\nPerform workload cost modeling:\n      Consider the requirements of the workload components and\n      understand the potential pricing models. Define the availability\n      requirement of the component. Determine if there are multiple\n      independent resources that perform the function in the workload,\n      and what the workload requirements are over time. Compare the cost\n      of the resources using the default On-Demand pricing model and\n      other applicable models. Factor in any potential changes in\n      resources or workload components.\n    \nPerform regular account level analysis: Performing regular\n      cost modeling ensures that opportunities to optimize across multiple workloads can be\n      implemented. For example, if multiple workloads use On-Demand, at an aggregate level, the risk\n      of change is lower, and implementing a commitment-based discount will achieve a lower overall\n      cost. It is recommended to perform analysis in regular cycles of two weeks to one month. This\n      analysis  allows you to make small adjustment purchases, so the coverage of your pricing\n      models continues to evolve with your changing workloads and their components. Use the AWS Cost Explorer recommendations tool to find opportunities for commitment discounts. To find opportunities for Spot workloads, use an hourly view of your overall usage, and\n      look for regular periods of changing usage or elasticity. \nPricing models: AWS has\n      multiple\n      pricing\n      models that allow you to pay for your resources in the most\n      cost-effective way that suits your organization\u2019s needs. The\n      following section describes each purchasing model:\n    \n\nOn-Demand Instances \n\nSpot Instances \n\nCommitment discounts - Savings Plans \n\nCommitment discounts - Reserved Instances/Capacity \n\nGeographic selection \n\nThird-party agreements and pricing \n\nOn-Demand Instances: This is the default, pay as you go pricing model.\n      When you use resources (for example, EC2 instances or services such as DynamoDB on demand) you\n      pay a flat rate, and you have no long-term commitments. You can increase or decrease the\n      capacity of your resources or services based on the demands of your application. On-Demand has\n      an hourly rate, but depending on the service, can be billed in increments of one second (for\n      example Amazon RDS, or Linux EC2 instances). On demand is recommended for applications with\n      short-term workloads (for example, a four-month project), that spike periodically, or\n      unpredictable workloads that can\u2019t be interrupted. On demand is also suitable for workloads,\n      such as pre-production environments, which require uninterrupted runtimes, but do not run long\n      enough for a commitment discount (Savings Plans or Reserved Instances). \nSpot Instances: A\n      Spot\n      Instance is spare Amazon EC2 compute capacity available at\n      discounts of up to 90% off On-Demand prices with no long-term\n      commitment required. With Spot Instances, you can significantly\n      reduce the cost of running your applications or scale your\n      application\u2019s compute capacity for the same budget. Unlike\n      On-Demand, Spot Instances can be interrupted with a 2-minute\n      warning if Amazon EC2 needs the capacity back, or the Spot Instance price\n      exceeds your configured price. On average, Spot Instances are\n      interrupted less than 5% of the time.\n    \n      Spot Instances are ideal when there is a queue or buffer in place, or where\n      there are multiple resources working independently to process the\n      requests (for example, Hadoop data processing). Typically these\n      workloads are fault-tolerant, stateless, and flexible, such as\n      batch processing, big data and analytics, containerized\n      environments, and high performance computing (HPC). Non-critical\n      workloads such as test and development environments are also\n      candidates for Spot.\n    \n      Spot Instances are also integrated into multiple AWS services, \n      such as Amazon EC2 Auto Scaling groups, Amazon EMR, Amazon Elastic Container Service (Amazon ECS), and AWS Batch.\n    \n      When a Spot Instance needs to be reclaimed, Amazon EC2 sends a two-minute\n      warning via a Spot Instance interruption notice delivered through\n      CloudWatch Events, as well as in the instance metadata. During\n      that two-minute period, your application can use the time to save\n      its state, drain running containers, upload final log files, or\n      remove itself from a load balancer. At the end of the two minutes,\n      you have the option to hibernate, stop, or terminate the Spot\n      Instance.\n    \n      Consider the following best practices when adopting Spot Instances\n      in your workloads:\n    \n\n\nBe flexible across as many instance\n          types as possible: Be flexible in both the family\n          and size of the instance type, to improve the likelihood of\n          fulfilling your target capacity requirements, obtain the\n          lowest possible cost, and minimize the impact of\n          interruptions.\n        \n\n\nBe flexible about where your workload\n          will run: Available capacity can vary by\n          Availability Zone. This improves the likelihood of fulfilling\n          your target capacity by tapping into multiple spare capacity\n          pools, and provides the lowest possible cost.\n        \n\n\nDesign for continuity:\n          Design your workloads for statelessness and fault-tolerance,\n          so that if some of your EC2 capacity gets interrupted, it will\n          not have impact on the availability or performance of the\n          workload.\n        \n\n\n          We recommend using Spot Instances in combination with\n          On-Demand and Savings Plans/Reserved Instances to maximize\n          workload cost optimization with performance.\n        \n\nCommitment discounts \u2013 Savings Plans: AWS provides a number of ways\n      for you to reduce your costs by reserving or committing to use a certain amount of resources,\n      and receiving a discounted rate for your resources. A Savings Plan allows you to make an hourly spend commitment for\n      one or three years, and receive discounted pricing across your resources. Savings Plans provide\n      discounts for AWS Compute services such as Amazon EC2, AWS Fargate, and AWS Lambda. When you\n      make the commitment, you pay that commitment amount every hour, and it is subtracted from your\n      On-Demand usage at the discount rate. For example, you commit to $50 an hour, and have $150 an\n      hour of On-Demand usage. Considering the Savings Plans pricing, your specific usage has a discount\n      rate of 50%. So, your $50 commitment covers $100 of On-Demand usage. You will pay $50\n      (commitment) and $50 of remaining On-Demand usage. \nCompute\n      Savings Plans are the most flexible and provide a discount\n      of up to 66%. They automatically apply across Availability Zones,\n      instance size, instance family, operating system, tenancy, Region,\n      and compute service.\n    \nInstance Savings Plans have less\n      flexibility but provide a higher discount rate (up to 72%). They automatically apply across\n      Availability Zones, instance size, operating system, and tenancy. \n      There are three payment options:\n    \n\n\nNo upfront payment: There\n          is no upfront payment; you then pay a reduced hourly rate each\n          month for the total hours in the month.\n        \n\n\nPartial upfront payment:\n          Provides a higher discount rate than No upfront. Part of the\n          usage is paid up front; you then pay a smaller reduced hourly\n          rate each month for the total hours in the month.\n        \n\n\nAll upfront payment: Usage\n          for the entire period is paid up front, and no other costs are\n          incurred for the remainder of the term for usage that is\n          covered by the commitment.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/select-the-best-pricing-model.html", "title": "Select the best pricing model - Cost Optimization Pillar", "description": "Select the best pricing model.", "language": "en-US"}}