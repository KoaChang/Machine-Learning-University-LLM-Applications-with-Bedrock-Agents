{"page_content": "Protecting data at rest - Security PillarProtecting data at rest - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkProtecting data at restData at rest represents any data that you persist in non-volatile\n      storage for any duration in your workload. This includes block storage, object storage,\n      databases, archives, IoT devices, and any other storage medium on which data is persisted.\n      Protecting your data at rest reduces the risk of unauthorized access, when encryption and\n      appropriate access controls are implemented. Encryption and tokenization are two important but distinct data protection schemes. Tokenization is a process that allows you to define a token to\n      represent an otherwise sensitive piece of information (for example, a token to represent a\n      customer\u2019s credit card number). A token must be meaningless on its own, and must not be\n      derived from the data it is tokenizing\u2013therefore, a cryptographic digest is not usable as a\n      token. By carefully planning your tokenization approach, you can provide additional protection\n      for your content, and you can ensure that you meet your compliance requirements. For example,\n      you can reduce the compliance scope of a credit card processing system if you leverage a token\n      instead of a credit card number. Encryption is a way of transforming content in a manner that makes it\n      unreadable without a secret key necessary to decrypt the content back into plaintext. Both\n      tokenization and encryption can be used to secure and protect information as appropriate.\n      Further, masking is a technique that allows part of a piece of data to be redacted to a point\n      where the remaining data is not considered sensitive. For example, PCI-DSS allows the last\n      four digits of a card number to be retained outside the compliance scope boundary for\n      indexing. Audit the use of encryption keys: Ensure that you\n      understand and audit the use of encryption keys to validate that the access control mechanisms\n      on the keys are appropriately implemented. For example, any AWS service using an AWS KMS key\n      logs each use in AWS CloudTrail. You can then query AWS CloudTrail, by using a tool such as Amazon CloudWatch Logs\n      Insights, to ensure that all uses of your keys are valid. Best practices SEC08-BP01 Implement secure key managementSEC08-BP02 Enforce encryption at restSEC08-BP03 Automate data at rest protectionSEC08-BP04 Enforce access controlSEC08-BP05 Use mechanisms to keep people away from data Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC07-BP04 Define data lifecycle managementSEC08-BP01 Implement secure key managementDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/protecting-data-at-rest.html", "title": "Protecting data at rest - Security Pillar", "description": "Data at rest represents any data that you persist in non-volatile storage for any duration in your workload. This includes block storage, object storage, databases, archives, IoT devices, and any other storage medium on which data is persisted. Protecting your data at rest reduces the risk of unauthorized access, when encryption and appropriate access controls are implemented.", "language": "en-US"}}