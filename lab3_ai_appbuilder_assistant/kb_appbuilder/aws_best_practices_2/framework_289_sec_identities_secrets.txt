{"page_content": "SEC02-BP03 Store and use secrets securely - AWS Well-Architected FrameworkSEC02-BP03 Store and use secrets securely - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesSEC02-BP03 Store and use secrets securely\n    A workload requires an automated capability to prove its identity to\n    databases, resources, and third-party services. This is accomplished\n    using secret access credentials, such as API access keys, passwords,\n    and OAuth tokens. Using a purpose-built service to store, manage,\n    and rotate these credentials helps reduce the likelihood that those\n    credentials become compromised.\n  Desired outcome: Implementing a mechanism for securely\n    managing application credentials that achieves the following goals: \n\n Identifying what secrets are required for the workload. \n\n Reducing the number of long-term credentials required by replacing them with short-term\n        credentials when possible. \n\n Establishing secure storage and automated rotation of remaining long-term credentials.\n      \n\n Auditing access to secrets that exist in the workload. \n\n Continual monitoring to verify that no secrets are embedded in source code during the\n        development process. \n\n Reduce the likelihood of credentials being inadvertently disclosed. \nCommon anti-patterns:\n\n Not rotating credentials. \n\n Storing long-term credentials in source code or configuration files. \n\n Storing credentials at rest unencrypted. \n\nBenefits of establishing this best practice:\n\n Secrets are stored encrypted at rest and in transit. \n\n Access to credentials is gated through an API (think of it as a credential\n          vending machine). \n\n Access to a credential (both read and write) is audited and logged. \n\n Separation of concerns: credential rotation is performed by a separate component, which\n        can be segregated from the rest of the architecture. \n\n Secrets are automatically distributed on-demand to software components and rotation\n        occurs in a central location. \n\n Access to credentials can be controlled in a fine-grained manner. \n\nLevel of risk exposed if this best practice is not established:\n    High \nImplementation guidance\n\n      In the past, credentials used to authenticate to databases,\n      third-party APIs, tokens, and other secrets might have been\n      embedded in source code or in environment files. AWS provides\n      several mechanisms to store these credentials securely,\n      automatically rotate them, and audit their usage.\n    \n\n      The best way to approach secrets management is to follow the\n      guidance of remove, replace, and rotate. The most secure\n      credential is one that you do not have to store, manage, or\n      handle. There might be credentials that are no longer necessary to\n      the functioning of the workload that can be safely removed.\n    \n\n      For credentials that are still required for the proper functioning\n      of the workload, there might be an opportunity to replace a\n      long-term credential with a temporary or short-term credential.\n      For example, instead of hard-coding an AWS secret access key,\n      consider replacing that long-term credential with a temporary\n      credential using IAM roles.\n    \n\n      Some long-lived secrets might not be able to be removed or\n      replaced. These secrets can be stored in a service such as\n      AWS Secrets Manager, where they can be centrally stored,\n      managed, and rotated on a regular basis.\n    \n\n      An audit of the workload\u2019s source code and configuration files can\n      reveal many types of credentials. The following table summarizes\n      strategies for handling common types of credentials:\n    \n\n\n Credential type \n\n              Description\n            \n\n              Suggested strategy\n            \n\n\n\n\n              IAM access keys\n            \n\n              AWS IAM access and secret keys used to assume IAM roles\n              inside of a workload\n            \n\n              Replace: Use\n              IAM\n              roles assigned to the compute instances (such as\n              Amazon EC2 or\n              AWS Lambda) instead. For interoperability with third\n              parties that require access to resources in your AWS account, ask if they support\n              AWS               cross-account access. For mobile apps, consider\n              using temporary credentials through\n              Amazon Cognito identity pools (federated identities). For\n              workloads running outside of AWS, consider\n              IAM\n              Roles Anywhere or\n              AWS Systems Manager Hybrid Activations.\n            \n\n\n\n              SSH keys\n            \n\n              Secure Shell private keys used to log into Linux EC2\n              instances, manually or as part of an automated process\n            \n\n              Replace: Use\n              AWS Systems Manager or\n              EC2\n              Instance Connect to provide programmatic and human\n              access to EC2 instances using IAM roles.\n            \n\n\n\n              Application and database credentials\n            \n\n              Passwords \u2013 plain text string\n            \n\n              Rotate: Store credentials in\n              AWS Secrets Manager and establish automated rotation if\n              possible.\n            \n\n\n\n              Amazon RDS and Aurora Admin Database credentials\n            \n\n              Passwords \u2013 plain text string\n            \n\n              Replace: Use the\n              Secrets Manager integration with Amazon RDS or\n              Amazon Aurora. In addition, some RDS database types can\n              use IAM roles instead of passwords for some use cases (for\n              more detail, see\n              IAM\n              database authentication).\n            \n\n\n\n              OAuth tokens\n            \n\n              Secret tokens \u2013 plain text string\n            \n\n              Rotate: Store tokens in\n              AWS Secrets Manager and configure automated rotation.\n            \n\n\n\n              API tokens and keys\n            \n\n              Secret tokens \u2013 plain text string\n            \n\n              Rotate: Store in\n              AWS Secrets Manager and establish automated rotation if\n              possible.\n            \n\n\n\n      A common anti-pattern is embedding IAM access keys inside source\n      code, configuration files, or mobile apps. When an IAM access key\n      is required to communicate with an AWS service, use\n      temporary\n      (short-term) security credentials. These short-term\n      credentials can be provided through\n      IAM\n      roles for EC2 instances,\n      execution\n      roles for Lambda functions,\n      Cognito\n      IAM roles for mobile user access, and\n      IoT\n      Core policies for IoT devices. When interfacing with third\n      parties, prefer\n      delegating\n      access to an IAM role with the necessary access to your\n      account\u2019s resources rather than configuring an IAM user and\n      sending the third party the secret access key for that user.\n    \n\n      There are many cases where the workload requires the storage of\n      secrets necessary to interoperate with other services and\n      resources.\n      AWS Secrets Manager is purpose built to securely manage these\n      credentials, as well as the storage, use, and rotation of API\n      tokens, passwords, and other credentials.\n    \n\n      AWS Secrets Manager provides five key capabilities to ensure the\n      secure storage and handling of sensitive credentials:\n      encryption\n      at rest,\n      encryption\n      in transit,\n      comprehensive\n      auditing,\n      fine-grained\n      access control, and\n      extensible\n      credential rotation. Other secret management services from\n      AWS Partners or locally developed solutions that provide similar\n      capabilities and assurances are also acceptable.\n    \n\nImplementation steps\n\n\n\n\n            Identify code paths containing hard-coded credentials using\n            automated tools such as\n            Amazon CodeGuru.\n          \n\n\n Use Amazon CodeGuru to scan your code repositories. Once the review is complete,\n                filter on Type=Secrets in CodeGuru to find problematic lines of\n                code. \n\n\n\n            Identify credentials that can be removed or replaced.\n          \n\n\n\n                Identify credentials no longer needed and mark for\n                removal.\n              \n\n\n                For AWS Secret Keys that are embedded in source code,\n                replace them with IAM roles associated with the necessary\n                resources. If part of your workload is outside\u00a0AWS but\n                requires IAM credentials to access AWS resources, consider\n                IAM\n                  Roles Anywhere or\n                AWS Systems Manager Hybrid Activations.\n              \n\n\n\n            For other third-party, long-lived secrets that require the use\n            of the rotate strategy, integrate Secrets Manager into your\n            code to retrieve third-party secrets at runtime.\n          \n\n\n\n                The CodeGuru console can automatically\n                create\n                  a secret in Secrets Manager using the discovered\n                credentials.\n              \n\n\n                Integrate secret retrieval from Secrets Manager into your\n                application code.\n              \n\n\n\n                    Serverless Lambda functions can use a\n                    language-agnostic\n                    Lambda\n                      extension.\n                  \n\n\n                    For EC2 instances or containers, AWS provides example\n                    client-side\n                      code for retrieving secrets from Secrets Manager in several popular programming\n                    languages.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_identities_secrets.html", "title": "SEC02-BP03 Store and use secrets securely - AWS Well-Architected Framework", "description": "A workload requires an automated capability to prove its identity to databases, resources, and third-party services. This is accomplished using secret access credentials, such as API access keys, passwords, and OAuth tokens. Using a purpose-built service to store, manage, and rotate these credentials helps reduce the likelihood that those credentials become compromised.", "language": "en-US"}}