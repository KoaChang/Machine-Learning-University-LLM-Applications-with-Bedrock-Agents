{"page_content": "Identity and access management - AWS Well-Architected FrameworkIdentity and access management - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkIdentity and access management\n      Identity and access management are key parts of an information\n      security program, ensuring that only authorized and authenticated\n      users and components are able to access your resources, and only\n      in a manner that you intend. For example, you should define\n      principals (that is, accounts, users, roles, and services that can\n      perform actions in your account), build out policies aligned\n      with these principals, and implement strong credential management.\n      These privilege-management elements form the core of\n      authentication and authorization.\n    \n      In AWS, privilege management is primarily supported by the AWS\n      Identity and Access Management (IAM) service, which allows you\n      to control user and programmatic access to AWS services and\n      resources. You should apply granular policies, which assign permissions to a user, group, role, or resource. You also\n      have the ability to require strong password practices, such as\n      complexity level, avoiding re-use, and enforcing multi-factor\n      authentication (MFA). You can use federation with your existing\n      directory service. For workloads that require systems to have\n      access to AWS, IAM allows for secure access through roles, instance\n      profiles, identity federation, and temporary credentials.\n    \n      The following questions focus on these considerations for\n      security.\n    \n\nSEC 2:\u00a0 How do you manage identities for people and machines?\n\n\n\n\nThere are two types of identities you need to manage when approaching\n                    operating secure AWS workloads. Understanding the type of identity you need to\n                    manage and grant access helps you verify the right identities have access to the\n                    right resources under the right conditions. \nHuman Identities: Your administrators, developers, operators, and end users\n                  require an identity to access your AWS environments and applications. These are\n                  members of your organization, or external users with whom you collaborate, and who\n                  interact with your AWS resources via a web browser, client application, or\n                  interactive command line tools. \nMachine Identities: Your service applications, operational tools, and\n                  workloads require an identity to make requests to AWS services, for example, to\n                  read data. These identities include machines running in your AWS environment\n                  such as Amazon EC2 instances or AWS Lambda functions. You may also manage machine\n                  identities for external parties who need access. Additionally, you may also have\n                  machines outside of AWS that need access to your AWS environment. \n\n\n\n\nSEC 3:\u00a0 How do you manage permissions for people and machines?\n\n\n\nManage permissions to control access to people and machine identities that\n                  require access to AWS and your workload. Permissions control who can access what,\n                  and under what conditions. \n\n Credentials must not be shared between any user or system. User access should be granted\n        using a least-privilege approach with best practices including password requirements and MFA\n        enforced. Programmatic access, including API calls to AWS services, should be performed\n        using temporary and limited-privilege credentials, such as those issued by the\n        AWS Security Token Service.Users need programmatic access if they want to interact with AWS outside of the AWS Management Console. The way to grant programmatic access depends on the type of user that's accessing AWS.To grant users programmatic access, choose one of the following options.\n\nWhich user needs programmatic access?\nTo\nBy\n\n\n\n\nWorkforce identity\n(Users managed in IAM Identity Center)\n\nUse temporary credentials to sign programmatic requests to the AWS CLI, AWS SDKs, or\n                        AWS APIs.\n\nFollowing the instructions for the interface that you want to use.\n\n\nFor the AWS CLI, see Configuring the AWS CLI to use AWS IAM Identity Center in the\n                                        AWS Command Line Interface User Guide.\n\nFor AWS SDKs, tools, and AWS APIs, see IAM Identity Center\n                                        authentication in the AWS SDKs and Tools Reference Guide.\n\n\n\n\nIAM\nUse temporary credentials to sign programmatic requests to the AWS CLI, AWS SDKs, or\n                        AWS APIs.\nFollowing the instructions in Using temporary\n                        credentials with AWS resources in the IAM User Guide.\n\n\nIAM\n(Not recommended)Use long-term credentials to sign programmatic requests\n                        to the AWS CLI, AWS SDKs, or AWS APIs.\n\nFollowing the instructions for the interface that you want to use.\n\n\nFor the AWS CLI, see Authenticating using IAM user credentials in\n                                    the AWS Command Line Interface User Guide.\n\nFor AWS SDKs and tools, see Authenticate using long-term credentials in the\n                                        AWS SDKs and Tools Reference Guide.\n\nFor AWS APIs, see Managing access keys for\n                                    IAM users in the IAM User Guide.\n\n\n\n AWS provides resources that can help you with identity and access management. To help\n        learn best practices, explore our hands-on labs on managing credentials & authentication, controlling human access, and controlling programmatic access.  Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSecurityDetectionDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sec-iam.html", "title": "Identity and access management - AWS Well-Architected Framework", "description": "Identity and access management are key parts of an information security program, ensuring that only authorized and authenticated users and components are able to access your resources, and only in a manner that you intend. For example, you should define principals (that is, accounts, users, roles, and services that can perform actions in your account), build out policies aligned with these principals, and implement strong credential management. These privilege-management elements form the core of authentication and authorization.", "language": "en-US"}}