{"page_content": "REL12-BP02 Perform post-incident analysis - AWS Well-Architected FrameworkREL12-BP02 Perform post-incident analysis - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesREL12-BP02 Perform post-incident analysis\n\nThis best practice was updated with new guidance on December 6, 2023.\n\n\n    Review customer-impacting events, and identify the contributing\n    factors and preventative action items. Use this information to\n    develop mitigations to limit or prevent recurrence. Develop\n    procedures for prompt and effective responses. Communicate\n    contributing factors and corrective actions as appropriate, tailored\n    to target audiences. Have a method to communicate these causes to\n    others as needed.\n  \n    Assess why existing testing did not find the issue. Add tests for\n    this case if tests do not already exist.\n  \nDesired outcome: Your teams have a consistent and agreed upon approach to handling post-incident analysis. One mechanism is the correction of error (COE) process. The COE process helps your teams identify, understand, and address the root causes for incidents, while also building mechanisms and guardrails to limit the probability of the same incident happening again.\n  \nCommon anti-patterns:\n\n\n\n        Finding contributing factors, but not continuing to look deeper\n        for other potential problems and approaches to mitigate.\n      \n\n\n        Only identifying human error causes, and not providing any\n        training or automation that could prevent human errors.\n      \n\n\n        Focus on assigning blame rather than understanding the root cause, creating a culture of fear and hindering open communication\n      \n\n\n        Failure to share insights, which keeps incident analysis findings within a small group and prevents others from benefiting from the lessons learned\n      \n\n\n        No mechanism to capture institutional knowledge, thereby losing valuable insights by not preserving the lessons-learned in the form of updated best practices and resulting in repeat incidents with the same or similar root cause\n      \n\nBenefits of establishing this best\n    practice: Conducting post-incident analysis and sharing\n    the results permits other workloads to mitigate the risk if they\n    have implemented the same contributing factors, and allows them to\n    implement the mitigation or automated recovery before an incident\n    occurs.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n      Good post-incident analysis provides opportunities to propose common solutions for problems with architecture patterns that are used in other places in your systems.\n    \n\n      A cornerstone of the COE process is documenting and addressing issues. It is recommended to define a standardized way to document critical root causes, and ensure they are reviewed and addressed. Assign clear ownership for the post-incident analysis process. Designate a responsible team or individual who will oversee incident investigations and follow-ups.\n    \n\n      Encourage a culture that focuses on learning and improvement rather than assigning blame. Emphasize that the goal is to prevent future incidents, not to penalize individuals.\n    \n\n      Develop well-defined procedures for conducting post-incident analyses. These procedures should outline the steps to be taken, the information to be collected, and the key questions to be addressed during the analysis. Investigate incidents thoroughly, going beyond immediate causes to identify root causes and contributing factors. Use techniques like the five whys to delve deep into the underlying issues.\n    \n\n      Maintain a repository of lessons learned from incident analyses. This institutional knowledge can serve as a reference for future incidents and prevention efforts. Share findings and insights from post-incident analyses, and consider holding open-invite post-incident review meetings to discuss lessons learned.\n    \nImplementation steps\n\n\n\n            While conducting post-incident analysis, ensure the process is blame-free. This allows people involved in the incident to be dispassionate about the proposed corrective actions and promote honest self-assessment and collaboration across teams.\n          \n\n\n            Define a standardized way to document critical issues. An example structure for such document is as follows:\n          \n\n\n\n                What happened?\n              \n\n\n                What was the impact on customers and your business?\n              \n\n\n                What was the root cause?\n              \n\n\n                What data do you have to support this?\n              \n\n\n\n                    For example, metrics and graphs\n                  \n\n\n\n                What were the critical pillar implications, especially security?\n              \n\n\n\n                    When architecting workloads, you make trade-offs between pillars based upon your business context. These business decisions can drive your engineering priorities. You might optimize to reduce cost at the expense of reliability in development environments, or, for mission-critical solutions, you might optimize reliability with increased costs. Security is always job zero, as you have to protect your customers.\n                  \n\n\n\n                What lessons did you learn?\n              \n\n\n                What corrective actions are you taking?\n              \n\n\n\n                    Action items\n                  \n\n\n                    Related items\n                  \n\n\n\n\n            Create well-defined standard operating procedures for conducting post-incident analyses.\n          \n\n\n            Set up a standardized incident reporting process. Document all incidents comprehensively, including the initial incident report, logs, communications, and actions taken during the incident.\n          \n\n\n            Remember that an incident does not require an outage. It could be a near-miss, or a system performing in an unexpected way while still fulfilling its business function.\n          \n\n\n            Continually improve your post-incident analysis process based on feedback and lessons learned.\n          \n\n\n            Capture key findings in a knowledge management system, and consider any patterns that should be added to developer guides or pre-deployment checklists.\n          \n\nResources\n\nRelated documents:\n\n\n\n\nWhy\n          you should develop a correction of error (COE)\n\n\n\nRelated videos:\n\n\n\n\n          Amazon\u2019s approach to failing successfully \n        \n\nAWS re:Invent 2021 - Amazon Builders\u2019 Library: Operational Excellence at Amazon \n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL12-BP01 Use playbooks to investigate failuresREL12-BP03 Test functional requirementsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_testing_resiliency_rca_resiliency.html", "title": "REL12-BP02 Perform post-incident analysis - AWS Well-Architected Framework", "description": "Review customer-impacting events, and identify the contributing factors and preventative action items. Use this information to develop mitigations to limit or prevent recurrence. Develop procedures for prompt and effective responses. Communicate contributing factors and corrective actions as appropriate, tailored to target audiences. Have a method to communicate these causes to others as needed.", "language": "en-US"}}