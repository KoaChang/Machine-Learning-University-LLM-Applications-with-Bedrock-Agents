{"page_content": "The review process - AWS Well-Architected FrameworkThe review process - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkThe review process The review of architectures must be done in a consistent manner, with a blame-free\n    approach that encourages diving deep. It should be a lightweight process (hours not days) that\n    is a conversation and not an audit. The purpose of reviewing an architecture is to identify any\n    critical issues that might need addressing or areas that could be improved. The outcome of the\n    review is a set of actions that should improve the experience of a customer using the workload. \n      As discussed in the \u201cOn Architecture\u201d section, you will want each\n      team member to take responsibility for the quality of its\n      architecture. We recommend that the team members who build an\n      architecture use the Well-Architected Framework to continually\n      review their architecture, rather than holding a formal review\n      meeting. A nearly continuous approach permits your team members to\n      update answers as the architecture evolves, and improve the\n      architecture as you deliver features.\n    \n      The AWS Well-Architected Framework is aligned to the way that AWS\n      reviews systems and services internally. It is premised on a set\n      of design principles that influences architectural approach, and\n      questions that verify that people don\u2019t neglect areas that often\n      featured in Root Cause Analysis (RCA). Whenever there is a\n      significant issue with an internal system, AWS service, or\n      customer, we look at the RCA to see if we could improve the review\n      processes we use.\n    \n      Reviews should be applied at key milestones in the product\n      lifecycle, early on in the design phase to avoid one-way\n        doors that are difficult\n      to change, and then before the go-live date. \n      (Many decisions are reversible, two-way doors. Those decisions can\n      use a lightweight process. One-way doors are hard or impossible\n      to reverse and require more inspection before making them.) \n      After you go into\n      production, your workload will continue to evolve as you add new\n      features and change technology implementations. The architecture\n      of a workload changes over time. You must follow good\n      hygiene practices to stop its architectural characteristics from\n      degrading as you evolve it. As you make significant architecture changes, you should follow a set of hygiene processes including a\n      Well-Architected review.\n    \n      If you want to use the review as a one-time snapshot or\n      independent measurement, you will want to verify that you have all\n      the right people in the conversation. Often, we find that reviews\n      are the first time that a team truly understands what they have\n      implemented. An approach that works well when reviewing another\n      team's workload is to have a series of informal conversations\n      about their architecture where you can glean the answers to most\n      questions. You can then follow up with one or two meetings where\n      you can gain clarity or dive deep on areas of ambiguity or\n      perceived risk.\n    \n      Here are some suggested items to facilitate your meetings:\n    \n\n\n        A meeting room with whiteboards\n      \n\n\n        Print outs of any diagrams or design notes\n      \n\n\n        Action list of questions that require out-of-band research to\n        answer (for example, \u201cdid we activate encryption or not?\u201d)\n      \n\n      After you have done a review, you should have a list of issues\n      that you can prioritize based on your business context. You will\n      also want to take into account the impact of those issues on the\n      day-to-day work of your team. If you address these issues early,\n      you could free up time to work on creating business value rather\n      than solving recurring problems. As you address issues, you can\n      update your review to see how the architecture is improving.\n    \n      While the value of a review is clear after you have done one, you\n      may find that a new team might be resistant at first. Here are some\n      objections that can be handled through educating the team on the\n      benefits of a review:\n    \n\n\n        \u201cWe are too busy!\u201d (Often said when the team is getting ready\n        for a significant launch.)\n      \n\n\n\n            If you are getting ready for a big launch, you will want it\n            to go smoothly. The review will permit you to understand\n            any problems you might have missed.\n          \n\n\n            We recommend that you carry out reviews early in the product\n            lifecycle to uncover risks and develop a mitigation plan\n            aligned with the feature delivery roadmap.\n          \n\n\n\n        \u201cWe don\u2019t have time to do anything with the results!\u201d (Often\n        said when there is an immovable event, such as the Super Bowl,\n        that they are targeting.)\n      \n\n\n\n            These events can\u2019t be moved. Do you really want to go into\n            it without knowing the risks in your architecture? Even if\n            you don\u2019t address all of these issues you can still have\n            playbooks for handling them if they materialize.\n          \n\n\n\n        \u201cWe don\u2019t want others to know the secrets of our solution\n        implementation!\u201d\n      \n\n\n\n            If you point the team at the questions in the\n            Well-Architected Framework, they will see that none of the\n            questions reveal any commercial or technical proprietary\n            information.\n          \n\n\n      As you carry out multiple reviews with teams in your organization,\n      you might identify thematic issues. For example, you might see\n      that a group of teams has clusters of issues in a particular\n      pillar or topic. You will want to look at all your reviews in a\n      holistic manner, and identify any mechanisms, training, or\n      principal engineering talks that could help address those thematic\n      issues.\n     Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsResourcesConclusionDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/the-review-process.html", "title": "The review process - AWS Well-Architected Framework", "description": "The review of architectures must be done in a consistent manner, with a blame-free approach that encourages diving deep.", "language": "en-US"}}