{"page_content": "SEC11-BP03 Perform regular penetration testing - Security PillarSEC11-BP03 Perform regular penetration testing - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidance Resources SEC11-BP03 Perform regular penetration testingPerform regular penetration testing of your software. This\n    mechanism helps identify potential software issues that cannot be\n    detected by automated testing or a manual code review. It can also\n    help you understand the efficacy of your detective controls.\n    Penetration testing should try to determine if the software can be\n    made to perform in unexpected ways, such as exposing data that\n    should be protected, or granting broader permissions than\n    expected.\nDesired outcome: Penetration testing is used to detect,\n    remediate, and validate your application\u2019s security properties. Regular and scheduled\n    penetration testing should be performed as part of the software development lifecycle (SDLC).\n    The findings from penetration tests should be addressed prior to the software being released.\n    You should analyze the findings from penetration tests to identify if there are issues that\n    could be found using automation. Having a regular and repeatable penetration testing process\n    that includes an active feedback mechanism helps inform the guidance to builders and improves\n    software quality. Common anti-patterns: \n\n\n          Only penetration testing for known or prevalent security\n          issues.\n        \n\n\n          Penetration testing applications without dependent third-party\n          tools and libraries.\n        \n\n\n          Only penetration testing for package security issues, and not\n          evaluating implemented business logic.\n        \nBenefits of establishing this best practice:\n\n\n          Increased confidence in the security properties of the\n          software prior to release.\n        \n\n\n          Opportunity to identify preferred application patterns, which\n          leads to greater software quality.\n        \n\n\n          A feedback loop that identifies earlier in the development\n          cycle where automation or additional training can improve the\n          security properties of software.\n        \n Level of risk exposed if this best practice is not established:\n    High \nImplementation guidance \n\n      Penetration testing is a structured security testing exercise\n      where you run planned security breach scenarios to detect,\n      remediate, and validate security controls. Penetration tests\u00a0start\n      with reconnaissance, during which data is gathered based on the\n      current design of the application and its dependencies. A curated\n      list of security-specific testing scenarios are built and run. The\n      key purpose of these tests is to uncover security issues in your\n      application, which could be exploited for gaining unintended\n      access to your environment, or unauthorized access to data. You\n      should perform penetration testing when you launch new features,\n      or whenever your application has undergone major changes in\n      function or technical implementation.\n    \n\n      You should identify the most appropriate stage in the development\n      lifecycle to perform penetration testing. This testing should\n      happen late enough that the functionality of the system is close\n      to the intended release state, but with enough time remaining for\n      any issues to be remediated.\n    \nImplementation steps \n\n\n\n            Have a structured process for how penetration testing is\n            scoped, basing this process on the\n            threat\n            model is a good way of maintaining context.\n          \n\n\n            Identify the appropriate place in the development cycle to\n            perform penetration testing. This should be when there is\n            minimal change expected in the application, but with enough\n            time to perform remediation.\n          \n\n\n            Train your builders on what to expect from penetration\n            testing findings, and how to get information on remediation.\n          \n\n\n            Use tools to speed up the penetration testing process by\n            automating common or repeatable tests.\n          \n\n\n            Analyze penetration testing findings to identify systemic\n            security issues, and use this data to inform additional\n            automated testing and ongoing builder education.\n          \n\nResources \n\nRelated best practices:\n\n\n\n\nSEC11-BP01 Train for application security\n\n\nSEC11-BP02 Automate testing throughout the development and\n  release lifecycle\n\n\nRelated documents:\n\n\n\n\nAWS           Penetration Testing provides detailed guidance for\n          penetration testing on AWS\n        \n\n\nAccelerate\n          deployments on AWS with effective governance\n\n\n\nAWS           Security Competency Partners\n\n\n\nModernize\n          your penetration testing architecture on AWS Fargate\n\n\n\nAWS Fault\n          injection Simulator\n\n\n\nRelated examples:\n\n\n\n\nAutomate API testing with AWS CodePipeline (GitHub) \n\n\nAutomated security\n            helper (GitHub) \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC11-BP02 Automate testing throughout the development and\n  release lifecycleSEC11-BP04 Manual code reviewsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_appsec_perform_regular_penetration_testing.html", "title": "SEC11-BP03 Perform regular penetration testing - Security Pillar", "description": "Perform regular penetration testing of your software. This mechanism helps identify potential software issues that cannot be detected by automated testing or a manual code review. It can also help you understand the efficacy of your detective controls. Penetration testing should try to determine if the software can be made to perform in unexpected ways, such as exposing data that should be protected, or granting broader permissions than expected.", "language": "en-US"}}