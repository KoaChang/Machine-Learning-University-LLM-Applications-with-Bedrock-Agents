{"page_content": "PERF03-BP04 Implement strategies to improve query performance in data store - AWS Well-Architected FrameworkPERF03-BP04 Implement strategies to improve query performance in data store - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesPERF03-BP04 Implement strategies to improve query performance\n  in data store\n    Implement strategies to optimize data and improve data query to\n    enable more scalability and efficient performance for your workload.\n  \nCommon anti-patterns:\n\n\n\n        You do not partition data in your data store.\n      \n\n\n        You store data in only one file format in your data store.\n      \n\n\n        You do not use indexes in your data store.\n      \n\nBenefits of establishing this best\n      practice: Optimizing data and query performance\n    results in more efficiency, lower cost, and improved user\n    experience.\n  \nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\nData optimization and query tuning are critical aspects of performance efficiency in a data store, as they impact the performance and responsiveness of the entire cloud workload. Unoptimized queries can result in greater resource usage and bottlenecks, which reduce the overall efficiency of a data store. \nData optimization includes several techniques to ensure efficient data storage and access. This also help to improve the query performance in a data store. Key strategies include data partitioning, data compression, and data denormalization, which help data to be optimized for both storage and access.\nImplementation steps\n\n\n\n            Understand and analyze the critical data queries which are\n            performed in your data store.\n          \n\n\n            Identify the slow-running queries in your data store and use query\n            plans to understand their current state.\n          \n\n\n\nAnalyzing\n                the query plan in Amazon Redshift\n\n\n\nUsing\n                EXPLAIN and EXPLAIN ANALYZE in Athena\n\n\n\n\n            Implement strategies to improve the query performance. Some\n            of the key strategies include:\n          \n\n\n\n                Using a columnar file format (like Parquet or ORC).\n              \n\nCompressing data in the data store to reduce storage space and I/O operation.\n\n\n                Data partitioning to split data into smaller parts and\n                reduce data scanning time.\n              \n\n\n\n                    Partitioning data in Athena\n                  \n\n\n                    Partitions and data distribution\n                  \n\n\n\n                Data indexing on the common columns in the query.\n              \n\n\n                Choose the right join operation for the query. When you join two tables, specify the larger table on the left side of join and the smaller table on the right side of the join.\n              \n\n\n                Distributed caching solution to improve latency and reduce\n                the number of database I/O operation.\n              \n\n\n                Regular maintenance such as executing statistics.\n              \n\n\n\n            Experiment and test strategies in a non-production\n            environment.\n          \n\nResources\n\nRelated documents:\n\n\n\n\nAmazon Aurora best practices\u00a0\n\n\n\nAmazon Redshift performance\u00a0\n\n\n\nAmazon Athena top 10 performance tips\n\n\n\nAWS           Database Caching\u00a0\n\n\n\nBest\n          Practices for Implementing Amazon ElastiCache\n\n\n\nPartitioning\n          data in Athena\n\n\n\nRelated videos:\n\n\n\n\nOptimize\n          Data Pattern using Amazon Redshift Data Sharing\n\n\n\nOptimize\n          Amazon Athena Queries with New Query Analysis Tools\u00a0\n\n\n\nRelated examples:\n\n\n\n\nAmazon EFS CSI Driver\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsPERF03-BP03 Collect and record data store performance\n  metricsPERF03-BP05 Implement data access patterns that utilize\n  cachingDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/perf_data_implement_strategies_to_improve_query_performance.html", "title": "PERF03-BP04 Implement strategies to improve query performance in data store - AWS Well-Architected Framework", "description": "Implement strategies to optimize data and improve data query to enable more scalability and efficient performance for your workload.", "language": "en-US"}}