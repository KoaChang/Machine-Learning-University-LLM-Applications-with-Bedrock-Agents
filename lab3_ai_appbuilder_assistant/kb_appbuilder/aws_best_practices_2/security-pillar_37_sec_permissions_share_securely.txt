{"page_content": "SEC03-BP08 Share resources securely within your organization - Security PillarSEC03-BP08 Share resources securely within your organization - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesSEC03-BP08 Share resources securely within your organizationAs the number of workloads grows, you might need to share access to resources in those workloads or provision \n    the resources multiple times across multiple accounts. You might have constructs to compartmentalize your \n    environment, such as having development, testing, and production environments. However, having separation \n    constructs does not limit you from being able to share securely. By sharing components that overlap, you \n    can reduce operational overhead and allow for a consistent experience without guessing what you might have \n    missed while creating the same resource multiple times. \nDesired outcome: Minimize unintended access by using secure methods to share \n    resources within your organization, and help with your data loss prevention initiative. Reduce your \n    operational overhead compared to managing individual components, reduce errors from manually creating \n    the same component multiple times, and increase your workloads\u00e2\u20ac\u2122 scalability. You can benefit from decreased \n    time to resolution in multi-point failure scenarios, and increase your confidence in determining when a \n    component is no longer needed. For prescriptive guidance on analyzing externally shared resources, \n    see SEC03-BP07 Analyze public and cross-account access. \n  \nCommon anti-patterns:\n\n\n\n        Lack of process to continually monitor and automatically alert on unexpected external share.\n      \n\n\n        Lack of baseline on what should be shared and what should not.\n      \n\n\n        Defaulting to a broadly open policy rather than sharing explicitly when required.\n      \n\n\n        Manually creating foundational resources that overlap when required.\n      \n\nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      Architect your access controls and patterns to govern the consumption of shared resources securely and \n      only with trusted entities. Monitor shared resources and review shared resource access continuously, \n      and be alerted on inappropriate or unexpected sharing. Review \n      Analyze public and cross-account access \n      to help you establish governance to reduce the external access to only resources that require it, and to \n      establish a process to monitor continuously and alert automatically.\n    \n\n      Cross-account sharing within AWS Organizations is supported by a number of AWS services, \n      such as AWS Security Hub, \n      Amazon GuardDuty, \n      and AWS Backup.  \n      These services allow for data to be shared to a central account, be accessible from a central account, or manage resources \n      and data from a central account. For example, AWS Security Hub can transfer findings from individual accounts to a \n      central account where you can view all the findings. AWS Backup can take a backup for a resource and share it \n      across accounts. You can use AWS Resource Access Manager (AWS RAM) to share other \n      common resources, such as VPC subnets and Transit Gateway attachments, \n      AWS Network Firewall, \n      or Amazon SageMaker pipelines. \n    \n\n      To restrict your account to only share resources within your organization, use \n      service control policies (SCPs) \n      to prevent access to external principals. When sharing resources, combine identity-based controls and \n      network controls to create a data perimeter for your organization \n      to help protect against unintended access. A data perimeter is a set of preventive guardrails to help verify \n      that only your trusted identities are accessing trusted resources from expected networks. These controls place \n      appropriate limits on what resources can be shared and prevent sharing or exposing resources that should not be \n      allowed. For example, as a part of your data perimeter, you can use VPC endpoint policies and the \n      AWS:PrincipalOrgId condition to ensure the identities accessing your Amazon S3 buckets \n      belong to your organization. It is important to note that \n      SCPs do not apply to service-linked roles or AWS service principals.\n    \n\n      When using Amazon S3, \n      turn off ACLs for your Amazon S3 bucket \n      and use IAM policies to define access control. For restricting access to an Amazon S3 origin \n      from Amazon CloudFront, migrate from origin access identity (OAI) to origin access \n      control (OAC) which supports additional features including server-side encryption with \n      AWS Key Management Service.\n    \n\n      In some cases, you might want to allow sharing resources outside of your organization or grant a third party \n      access to your resources. For prescriptive guidance on managing permissions to share resources externally, \n      see Permissions management.\n    \n\nImplementation steps\n\n\n\n\nUse AWS Organizations.\n\n\n          AWS Organizations is an account management service that allows you to consolidate multiple AWS accounts \n          into an organization that you create and centrally manage. You can group your accounts into \n          organizational units (OUs) and attach different policies to each OU to help you meet your \n          budgetary, security, and compliance needs. You can also control how AWS artificial intelligence (AI) \n          and machine learning (ML) services can collect and store data, and use the multi-account management of \n          the AWS services integrated with Organizations.\n        \n\n\nIntegrate AWS Organizations with AWS services.\n\n\n          When you use an AWS service to perform tasks on your behalf in the member accounts of your organization, \n          AWS Organizations creates an IAM service-linked role (SLR) for that service in each member account. You should \n          manage trusted access using the AWS Management Console, the AWS APIs, or the AWS CLI. For prescriptive guidance on \n          turning on trusted access, see Using AWS Organizations with other AWS services \n          and AWS services \n            that you can use with Organizations.\n        \n\n\nEstablish a data perimeter.\n\n\n          The AWS perimeter is typically represented as an organization managed by AWS Organizations. Along with \n          on-premises networks and systems, accessing AWS resources is what many consider as the perimeter \n          of My AWS. The goal of the perimeter is to verify that access is allowed if the identity is trusted, \n          the resource is trusted, and the network is expected. \n        \n\n\n\n              Define and implement the perimeters.\n            \n\n              Follow the steps described in Perimeter implementation in the Building a Perimeter on AWS whitepaper for each authorization condition. For prescriptive guidance on protecting network layer, see Protecting networks.\n            \n\n\n              Monitor and alert continually.\n            \n\nAWS Identity and Access Management Access Analyzer \n              helps identify resources in your organization and accounts that are shared with external entities. \n              You can integrate IAM Access Analyzer with AWS Security Hub \n              to send and aggregate findings for a resource from IAM Access Analyzer to Security Hub to help analyze the security posture of \n              your environment. To integrate, turn on both IAM Access Analyzer and Security Hub in each Region in each account. You can also \n              use AWS Config Rules to audit configuration and alert the appropriate party using \n              AWS Chatbot with AWS Security Hub. \n              You can then use AWS Systems Manager Automation documents \n              to remediate noncompliant resources. \n            \n\n\n              For prescriptive guidance on monitoring and alerting continuously on resources shared externally, \n              see Analyze public and cross-account access.\n            \n\n\n\nUse resource sharing in AWS services and restrict accordingly.\n\n\n          Many AWS services allow you to share resources with another account, or target a resource in another \n          account, such as Amazon Machine Images (AMIs) \n          and AWS Resource Access Manager (AWS RAM). \n          Restrict the ModifyImageAttribute API to specify the trusted accounts to share the AMI with. \n          Specify the ram:RequestedAllowsExternalPrincipals condition when using AWS RAM to constrain sharing \n          to your organization only, to help prevent access from untrusted identities. For prescriptive guidance and \n          considerations, see Resource sharing and external targets.\n        \n\n\nUse AWS RAM to share securely in an account or with other AWS accounts.\n\n\nAWS RAM helps you securely share the resources that you have \n          created with roles and users in your account and with other AWS accounts. In a multi-account \n          environment, AWS RAM allows you to create a resource once and share it with other accounts. This \n          approach helps reduce your operational overhead while providing consistency, visibility, and \n          auditability through integrations with Amazon CloudWatch and AWS CloudTrail, which you do not receive when \n          using cross-account access.\n        \n\n          If you have resources that you shared previously using a resource-based policy, you can use the \n          PromoteResourceShareCreatedFromPolicy API \n          or an equivalent to promote the resource share to a full AWS RAM resource share.\n        \n\n          In some cases, you might need to take additional steps to share resources. For example, \n          to share an encrypted snapshot, you need to share a AWS KMS key. \n        \n\nResources\n\nRelated best practices:", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_share_securely.html", "title": "SEC03-BP08 Share resources securely within your organization - Security Pillar", "description": "As the number of workloads grows, you might need to share access to resources in those workloads or provision the resources multiple times across multiple accounts. You might have constructs to compartmentalize your environment, such as having development, testing, and production environments. However, having separation constructs does not limit you from being able to share securely. By sharing components that overlap, you can reduce operational overhead and allow for a consistent experience without guessing what you might have missed while creating the same resource multiple times.", "language": "en-US"}}