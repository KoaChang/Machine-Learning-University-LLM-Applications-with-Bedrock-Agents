{"page_content": "SEC03-BP09 Share resources securely with a third party - AWS Well-Architected FrameworkSEC03-BP09 Share resources securely with a third party - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesSEC03-BP09 Share resources securely with a third party\n    The security of your cloud environment doesn\u2019t stop at your organization. Your organization might rely on a third party to manage a portion of your data. The permission management for the third-party managed system should follow the practice of just-in-time access using the principle of least privilege with temporary credentials. By working closely with a third party, you can reduce the scope of impact and risk of unintended access together.\n  \nDesired outcome: Long-term AWS Identity and Access Management (IAM) credentials, IAM access keys, and secret keys that are associated with a user can be used by anyone as long as the credentials are valid and active. Using an IAM role and temporary credentials helps you improve your overall security stance by reducing the effort to maintain long-term credentials, including the management and operational overhead of those sensitive details. By using a universally unique identifier (UUID) for the external ID in the IAM trust policy, and keeping the IAM policies attached to the IAM role under your control, you can audit and verify that the access granted to the third party is not too permissive. For prescriptive guidance on analyzing externally shared resources, see SEC03-BP07 Analyze public and cross-account access.\n  \nCommon anti-patterns:\n\n\n\n        Using the default IAM trust policy without any conditions.\n      \n\n\n        Using long-term IAM credentials and access keys.\n      \n\n\n        Reusing external IDs.\n      \n\nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      You might want to allow sharing resources outside of AWS Organizations or grant a third party access to your account. For example, a third party might provide a monitoring solution that needs to access resources within your account. In those cases, create an IAM cross-account role with only the privileges needed by the third party. Additionally, define a trust policy using the external ID condition. When using an external ID, you or the third party can generate a unique ID for each customer, third party, or tenancy. The unique ID should not be controlled by anyone but you after it\u2019s created. The third party must implement a process to relate the external ID to the customer in a secure, auditable, and reproduceable manner. \n    \n\n      You can also use IAM Roles Anywhere to manage IAM roles for applications outside of AWS that use AWS APIs. \n    \n\n      If the third party no longer requires access to your environment, remove the role. Avoid providing long-term credentials to a third party. Maintain awareness of other AWS services that support sharing. For example, the AWS Well-Architected Tool allows sharing a workload with other AWS accounts, and AWS Resource Access Manager helps you securely share an AWS resource you own with other accounts. \n    \n\nImplementation steps\n\n\n\n\nUse cross-account roles to provide access to external accounts.\n\n\nCross-account roles reduce the amount of sensitive information that is stored by external accounts and third parties for servicing their customers. Cross-account roles allow you to grant access to AWS resources in your account securely to a third party, such as AWS Partners or other accounts in your organization, while maintaining the ability to manage and audit that access. \n        \n\n          The third party might be providing service to you from a hybrid infrastructure or alternatively pulling data into an offsite location. IAM Roles Anywhere helps you allow third party workloads to securely interact with your AWS workloads and further reduce the need for long-term credentials.\n        \n\n          You should not use long-term credentials, or access keys associated with users, to provide external account access. Instead, use cross-account roles to provide the cross-account access.\n        \n\n\nUse an external ID with third parties.\n\n\n          Using an external ID allows you to designate who can assume a role in an IAM trust policy. The trust policy can require that the user assuming the role assert the condition and target in which they are operating. It also provides a way for the account owner to permit the role to be assumed only under specific circumstances. The primary function of the external ID is to address and prevent the confused deputy problem.\n        \n\n          Use an external ID if you are an AWS account owner and you have configured a role for a third party that accesses other AWS accounts in addition to yours, or when you are in the position of assuming roles on behalf of different customers. Work with your third party or AWS Partner to establish an external ID condition to include in IAM trust policy.\n        \n\n\nUse universally unique external IDs.\n\n\n          Implement a process that generates random unique value for an external ID, such as a universally unique identifier (UUID). A third party reusing external IDs across different customers does not address the confused deputy problem, because customer A might be able to view data of customer B by using the role ARN of customer B along with the duplicated external ID. In a multi-tenant environment, where a third party supports multiple customers with different AWS accounts, the third party must use a different unique ID as the external ID for each AWS account. The third party is responsible for detecting duplicate external IDs and securely mapping each customer to their respective external ID. The third party should test to verify that they can only assume the role when specifying the external ID. The third party should refrain from storing the customer role ARN and the external ID until the external ID is required.\n        \n\n          The external ID is not treated as a secret, but the external ID must not be an easily guessable value, such as a phone number, name, or account ID. Make the external ID a read-only field so that the external ID cannot be changed for the purpose of impersonating the setup.\n        \n\n          You or the third party can generate the external ID. Define a process to determine who is responsible for generating the ID. Regardless of the entity creating the external ID, the third party enforces uniqueness and formats consistently across customers. \n        \n\n\nDeprecate customer-provided long-term credentials.\n\n\n          Deprecate the use of long-term credentials and use cross-account roles or IAM Roles Anywhere. If you must use long-term credentials, establish a plan to migrate to role-based access. For details on managing keys, see Identity Management. Also work with your AWS account team and the third party to establish risk mitigation runbook. For prescriptive guidance on responding to and mitigating the potential impact of security incident, see Incident response.\n        \n\n\nVerify that setup has prescriptive guidance or is automated.\n\n\n          The policy created for cross-account access in your accounts must follow the least-privilege principle. The third party must provide a role policy document or automated setup mechanism that uses an AWS CloudFormation template or an equivalent for you. This reduces the chance of errors associated with manual policy creation and offers an auditable trail. For more information on using a AWS CloudFormation template to create cross-account roles, see Cross-Account Roles. \n        \n\n          The third party should provide an automated, auditable setup mechanism. However, by using the role policy document outlining the access needed, you should automate the setup of the role. Using a AWS CloudFormation template or equivalent, you should monitor for changes with drift detection as part of the audit practice. \n        \n\n\nAccount for changes.\n\n\n          Your account structure, your need for the third party, or their service offering being provided might change. You should anticipate changes and failures, and plan accordingly with the right people, process, and technology. Audit the level of access you provide on a periodic basis, and implement detection methods to alert you to unexpected changes. Monitor and audit the use of the role and the datastore of the external IDs. You should be prepared to revoke third-party access, either temporarily or permanently, as a result of unexpected changes or access patterns. Also, measure the impact to your revocation operation, including the time it takes to perform, the people involved, the cost, and the impact to other resources. \n        \n\n          For prescriptive guidance on detection methods, see the Detection best practices. \n        \n\nResources\n\nRelated best practices:\n\n\n\n\nSEC02-BP02 Use temporary credentials\n\n\n\nSEC03-BP05 Define permission guardrails for\n      your organization\n\n\n\nSEC03-BP06 Manage access based on lifecycle\n\n\n\nSEC03-BP07 Analyze public and cross-account access\n\n\n \n          SEC04 Detection\n        \n\n\nRelated documents:\n\n\n\n\n          Bucket owner granting cross-account permission to objects it does not own\n        \n\n\n          How to use trust policies with IAM roles\n        \n\n\n          Delegate access across AWS accounts using IAM roles\n        \n\n\n          How do I access resources in another AWS account using IAM?\n        \n\n\n          Security best practices in IAM\n        \n\n\n          Cross-account policy evaluation logic\n        \n\n\n          How to use an external ID when granting access to your AWS resources to a third party\n        \n\n\n          Collecting Information from AWS CloudFormation Resources Created in External Accounts with Custom Resources\n        \n\n \n          Securely Using External ID for Accessing AWS Accounts Owned by Others", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_permissions_share_securely_third_party.html", "title": "SEC03-BP09 Share resources securely with a third party - AWS Well-Architected Framework", "description": "The security of your cloud environment doesn\u2019t stop at your organization. Your organization might rely on a third party to manage a portion of your data. The permission management for the third-party managed system should follow the practice of just-in-time access using the principle of least privilege with temporary credentials. By working closely with a third party, you can reduce the scope of impact and risk of unintended access together.", "language": "en-US"}}