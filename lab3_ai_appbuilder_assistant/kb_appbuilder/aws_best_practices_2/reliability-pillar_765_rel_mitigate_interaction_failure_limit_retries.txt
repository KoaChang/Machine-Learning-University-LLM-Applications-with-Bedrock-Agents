{"page_content": "REL05-BP03 Control and limit retry calls - Reliability PillarREL05-BP03 Control and limit retry calls - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceImplementation stepsResourcesREL05-BP03 Control and limit retry callsUse exponential backoff to retry requests at progressively longer intervals between each retry. Introduce jitter between retries to randomize retry intervals. Limit the maximum number of retries.\nDesired outcome: Typical components in a distributed software system include servers, load balancers, databases, and DNS servers. During normal operation, these components can respond to requests with errors that are temporary or limited, and also errors that would be persistent regardless of retries. When clients make requests to services, the requests consume resources including memory, threads, connections, ports, or any other limited resources. Controlling and limiting retries is a strategy to release and minimize consumption of resources so that system components under strain are not overwhelmed. \n  \n    When client requests time out or receive error responses, they should determine whether or not to retry. If they do retry, they do so with exponential backoff with jitter and a maximum retry value. As a result, backend services and processes are given relief from load and time to self-heal, resulting in faster recovery and successful request servicing. \n  \nCommon anti-patterns:\n\n\n\n        Implementing retries without adding exponential backoff, jitter, and maximum retry values. Backoff and jitter help avoid artificial traffic spikes due to unintentionally coordinated retries at common intervals.\n      \n\n\n        Implementing retries without testing their effects or assuming retries are already built into an SDK without testing retry scenarios. \n      \n\n\n        Failing to understand published error codes from dependencies, leading to retrying all errors, including those with a clear cause that indicates lack of permission, configuration error, or another condition that predictably will not resolve without manual intervention.\n      \n\n\n        Not addressing observability practices, including monitoring and alerting on repeated service failures so that underlying issues are made known and can be addressed.\n      \n\n\n        Developing custom retry mechanisms when built-in or third-party retry capabilities suffice.\n      \n\n\n        Retrying at multiple layers of your application stack in a manner which compounds retry attempts further consuming resources in a retry storm. Be sure to understand how these errors affect your application the dependencies you rely on, then implement retries at only one level.\n      \n\n\n        Retrying service calls that are not idempotent, causing unexpected side effects like duplicated results.\n      \n\nBenefits of establishing this best practice: Retries help clients acquire desired results when requests fail but also consume more of a server\u2019s time to get the successful responses they want. When failures are rare or transient, retries work well. When failures are caused by resource overload, retries can make things worse. Adding exponential backoff with jitter to client retries allows servers to recover when failures are caused by resource overload. Jitter avoids alignment of requests into spikes, and backoff diminishes load escalation caused by adding retries to normal request load. Finally, it\u2019s important to configure a maximum number of retries or elapsed time to avoid creating backlogs that produce metastable failures.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n      Control and limit retry calls. Use exponential backoff to retry after progressively longer intervals. Introduce jitter to randomize retry intervals and limit the maximum number of retries.\n    \n\n      Some AWS SDKs implement retries and exponential backoff by default. Use these built-in AWS implementations where applicable in your workload. Implement similar logic in your workload when calling services that are idempotent and where retries improve your client availability. Decide what the timeouts are and when to stop retrying based on your use case. Build and exercise testing scenarios for those retry use cases.\n    \nImplementation steps\n\n\n\n          Determine the optimal layer in your application stack to implement retries for the services your application relies on. \n        \n\n\n          Be aware of existing SDKs that implement proven retry strategies with exponential backoff and jitter for your language of choice, and favor these over writing your own retry implementations. \n        \n\n\n          Verify that services are idempotent before implementing retries. Once retries are implemented, be sure they are both tested and regularly exercise in production. \n        \n\n\n          When calling AWS service APIs, use the AWS SDKs and AWS CLI and understand the retry configuration options. Determine if the defaults work for your use case, test, and adjust as needed. \n        \n\nResources\n\nRelated best practices:\n\n\n\n\nREL04-BP04 Make all responses idempotent\n\n\n\nREL05-BP02 Throttle requests\n\n\n\nREL05-BP04 Fail fast and limit queues\n\n\n\nREL05-BP05 Set client timeouts\n\n\n\nREL11-BP01 Monitor all components of the workload to detect\n  failures\n\n\n\nRelated documents:\n\n\n\n\nError\n          Retries and Exponential Backoff in AWS\n\n\n\nThe\n          Amazon Builders' Library: Timeouts, retries, and backoff with\n          jitter\n\n\n\n          Exponential Backoff and Jitter\n        \n\n \n          Making retries safe with idempotent APIs\n        \n\n\nRelated examples:\n\n\n\n\n          Spring Retry\n        \n\n\n          Resilience4j Retry\n        \n\n\nRelated videos:\n\n\n\n\nRetry,\n          backoff, and jitter: AWS re:Invent 2019: Introducing The\n          Amazon Builders\u2019 Library (DOP328)\n\n\n\nRelated tools:\n\n\n\nAWS SDKs and Tools: Retry behavior\n        \n\nAWS Command Line Interface: AWS CLI retries\n        \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL05-BP02 Throttle requestsREL05-BP04 Fail fast and limit queuesDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_limit_retries.html", "title": "REL05-BP03 Control and limit retry calls - Reliability Pillar", "description": "Use exponential backoff to retry requests at progressively longer intervals between each retry. Introduce jitter between retries to randomize retry intervals. Limit the maximum number of retries.", "language": "en-US"}}