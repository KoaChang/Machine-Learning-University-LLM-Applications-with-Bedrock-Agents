{"page_content": "SEC06-BP02 Reduce attack surface - AWS Well-Architected FrameworkSEC06-BP02 Reduce attack surface - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesSEC06-BP02 Reduce attack surface Reduce your exposure to unintended access by hardening operating systems and minimizing the\n    components, libraries, and externally consumable services in use. Start by reducing unused\n    components, whether they are operating system packages or applications, for Amazon Elastic Compute Cloud\n    (Amazon EC2)-based workloads, or external software modules in your code, for all workloads. You can\n    find many hardening and security configuration guides for common operating systems and server\n    software. For example, you can start with the\u00a0Center\n      for Internet Security\u00a0and iterate. In Amazon EC2, you can create your own Amazon Machine Images (AMIs), which you have patched and\n    hardened, to help you meet the specific security requirements for your organization. The patches\n    and other security controls you apply on the AMI are effective at the point in time in which\n    they were created\u2014they are not dynamic unless you modify after launching, for example, with\n    AWS Systems Manager. \n    You can simplify the process of building secure AMIs with EC2 Image Builder. EC2 Image Builder significantly reduces the effort required\n    to create and maintain golden images without writing and maintaining\n    automation. When software updates become available, Image Builder\n    automatically produces a new image without requiring users to\n    manually initiate image builds. EC2 Image Builder allows you to\n    easily validate the functionality and security of your images before\n    using them in production with AWS-provided tests and your own tests.\n    You can also apply AWS-provided security settings to further secure\n    your images to meet internal security criteria. For example, you can\n    produce images that conform to the Security Technical Implementation\n    Guide (STIG) standard using AWS-provided templates.\n   Using third-party static code analysis tools, you can identify common security issues such\n    as unchecked function input bounds, as well as applicable common vulnerabilities and exposures\n    (CVEs). You can use\u00a0Amazon CodeGuru\u00a0for supported\n    languages. Dependency checking tools can also be used to determine whether libraries your code\n    links against are the latest versions, are themselves free of CVEs, and have licensing\n    conditions that meet your software policy requirements.  Using Amazon Inspector, you can perform configuration assessments against your instances for known\n    CVEs, assess against security benchmarks, and automate the notification of defects. Amazon Inspector runs\n    on production instances or in a build pipeline, and it notifies developers and engineers when\n    findings are present. You can access findings programmatically and direct your team to backlogs\n    and bug-tracking systems.\u00a0EC2 Image Builder\u00a0can be\n    used to maintain server images (AMIs) with automated patching, AWS-provided security policy\n    enforcement, and other customizations. When using containers implement\u00a0ECR Image\n      Scanning\u00a0in your build pipeline and on a regular basis against your image repository\n    to look for CVEs in your containers. \n    While Amazon Inspector and other tools are effective at identifying\n    configurations and any CVEs that are present, other methods are\n    required to test your workload at the application\n    level.\u00a0Fuzzing\u00a0is\n    a well-known method of finding bugs using automation to inject\n    malformed data into input fields and other areas of your\n    application.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n\n\n          Harden operating system: Configure operating systems to meet\n          best practices.\n        \n\n\n\nSecuring Amazon\n                Linux\n\n\n\nSecuring\n                Microsoft Windows Server\n\n\n\n Harden containerized resources: Configure containerized resources to meet security\n          best practices. \n\n Implement AWS Lambda best practices. \n\n\n\nAWS Lambda best\n                practices\n\n\n\nResources\n\nRelated documents:\n\n\n\n\nAWS Systems Manager\n\n\n\nReplacing\n          a Bastion Host with Amazon EC2 Systems Manager\n\n\n\nSecurity\n          Overview of AWS Lambda\n\n\n\nRelated videos:\n\n\n\n\nRunning\n          high-security workloads on Amazon EKS\n\n\n\nSecuring\n          Serverless and Container Services\n\n\n\nSecurity best\n          practices for the Amazon EC2 instance metadata service\n\n\n\nRelated examples:\n\n\n\n\nLab:\n          Automated Deployment of Web Application Firewall\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC06-BP01 Perform vulnerability managementSEC06-BP03 Implement managed servicesDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_protect_compute_reduce_surface.html", "title": "SEC06-BP02 Reduce attack surface - AWS Well-Architected Framework", "description": "Reduce your exposure to unintended access by hardening operating systems and minimizing the components, libraries, and externally consumable services in use. Start by reducing unused components, whether they are operating system packages or applications for Amazon Elastic Compute Cloud (Amazon EC2)-based workloads, or external software modules in your code, for all workloads. You can find many hardening and security configuration guides for common operating systems and server software. For example, you can start with the Center for Internet Security and iterate.", "language": "en-US"}}