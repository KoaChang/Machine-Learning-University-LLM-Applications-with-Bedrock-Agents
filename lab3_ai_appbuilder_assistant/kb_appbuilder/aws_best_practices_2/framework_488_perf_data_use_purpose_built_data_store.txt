{"page_content": "PERF03-BP01 Use a purpose-built data store that best supports your data access and storage requirements - AWS Well-Architected FrameworkPERF03-BP01 Use a purpose-built data store that best supports your data access and storage requirements - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesPERF03-BP01 Use a purpose-built data store that best supports your\n  data access and storage requirements\n    Understand data characteristics (like shareable, size, cache size,\n    access patterns, latency, throughput, and persistence of data) to\n    select the right purpose-built data stores (storage or database) for\n    your workload.\n  \nCommon anti-patterns:\n\n\n\n        You stick to one data store because there is internal experience\n        and knowledge of one particular type of database solution.\n      \n\n\n        You assume that all workloads have similar data storage and\n        access requirements.\n      \n\n\n        You have not implemented a data catalog to inventory your data\n        assets.\n      \n\nBenefits of establishing this best\n    practice: Understanding data characteristics and\n    requirements allows you to determine the most efficient and\n    performant storage technology appropriate for your workload needs.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n      When selecting and implementing data storage, make sure that the\n      querying, scaling, and storage characteristics support the\n      workload data requirements. AWS provides numerous data storage and\n      database technologies including block storage, object storage,\n      streaming storage, file system, relational, key-value, document,\n      in-memory, graph, time series, and ledger databases. Each data\n      management solution has options and configurations available to\n      you to support your use-cases and data models. By understanding\n      data characteristics and requirements, you can break away from\n      monolithic storage technology and restrictive, one-size-fits-all\n      approaches to focus on managing data appropriately.\n    \nImplementation steps\n\n\n\n            Conduct an inventory of the various data types that exist in\n            your workload.\n          \n\n\n            Understand and document data characteristics and\n            requirements, including:\n          \n\n\n\n                Data type (unstructured, semi-structured, relational)\n              \n\n\n                Data volume and growth\n              \n\n\n                Data durability: persistent, ephemeral, transient\n              \n\n\n                ACID (atomicity, consistency, isolation, durability)\n                requirements\n              \n\n\n                Data access patterns (read-heavy or write-heavy)\n              \n\n\n                Latency\n              \n\n\n                Throughput\n              \n\n\n                IOPS (input/output operations per second)\n              \n\n\n                Data retention period\n              \n\n\n\n            Learn about different data stores available for your\n            workload on AWS that can meet your data characteristics (as\n            outlined in PERF01-BP01 Learn about and understand available cloud services and\n  features). Some examples of AWS storage\n            technologies and their key characteristics include:\n          \n\n\n\nType\n\n\nAWS Services\n\n\nKey characteristics\n\n\n\n\n\n                    Object storage\n                  \n\nAmazon S3\n\n\n                    Unlimited scalability, high availability, and multiple\n                    options for accessibility. Transferring and accessing\n                    objects in and out of Amazon S3 can use a service, such\n                    as\u00a0Transfer\n                      Acceleration\u00a0or\u00a0Access\n                        Points,\u00a0to support your location, security needs,\n                        and access patterns.\n                  \n\n\n\n                    Archiving storage\n                  \n\nAmazon S3 Glacier\n\n\n                    Built for data archiving.\n                  \n\n\n\n                    Streaming storage\n                  \n\n\nAmazon Kinesis\n\n \n                      Amazon Managed Streaming for Apache Kafka (Amazon MSK)\n                    \n\n\n                    Efficient ingestion and storage of streaming data.\n                  \n\n\n\n                    Shared file system\n                  \n\nAmazon Elastic File System (Amazon EFS)\n\n\n                    Mountable file system that can be accessed by multiple\n                    types of compute solutions.\n                  \n\n\n\n\n                    Shared file system\n                  \n\nAmazon FSx\n\n\n                    Built on the latest AWS compute solutions to support\n                    four commonly used file systems: NetApp ONTAP, OpenZFS,\n                    Windows File Server, and Lustre. Amazon FSx\u00a0latency,\n                      throughput, and IOPS\u00a0vary per file system and\n                    should be considered when selecting the right file\n                    system for your workload needs.\n                  \n\n\n\n                    Block storage\n                  \n\nAmazon Elastic Block Store (Amazon EBS)\n\n\n                    Scalable, high-performance block-storage service\n                    designed for Amazon Elastic Compute Cloud (Amazon EC2).\n                    Amazon EBS includes SSD-backed storage for\n                    transactional, IOPS-intensive workloads and HDD-backed\n                    storage for throughput-intensive workloads.\n                  \n\n\n\n                    Relational database\n                  \n\nAmazon Aurora,\u00a0Amazon RDS,\u00a0Amazon Redshift.\n                  \n\n                    Designed to support ACID (atomicity, consistency,\n                    isolation, durability) transactions, and maintain\n                    referential integrity and strong data consistency. Many\n                    traditional applications, enterprise resource planning\n                    (ERP), customer relationship management (CRM), and\n                    ecommerce use relational databases to store their data.\n                  \n\n\n\n                    Key-value database\n                  \n\nAmazon DynamoDB\n\n\n                    Optimized for common access patterns, typically to store\n                    and retrieve large volumes of data. High-traffic web\n                    apps, ecommerce systems, and gaming applications are\n                    typical use-cases for key-value databases.\n                  \n\n\n\n                    Document database\n                  \n\nAmazon\n                      DocumentDB\n\n\n                    Designed to store semi-structured data as JSON-like\n                    documents. These databases help developers build and\n                    update applications such as content management,\n                    catalogs, and user profiles quickly.\u00a0\n                  \n\n\n\n                    In-memory database\n                  \n\nAmazon ElastiCache\u00a0,\n                    Amazon\n                      MemoryDB for Redis\n\n\n                    Used for applications that require real-time access to\n                    data, lowest latency and highest throughput. You may use\n                    in-memory databases for application caching, session\n                    management, gaming leaderboards, low latency ML feature\n                    store, microservices messaging system, and a\n                    high-throughput streaming mechanism\n                  \n\n\n\n                    Graph database\n                  \n\nAmazon Neptune\n\n\n                    Used for applications that must navigate and query\n                    millions of relationships between highly connected graph\n                    datasets with millisecond latency at large scale. Many\n                    companies use graph databases for fraud detection,\n                    social networking, and recommendation engines.\n                  \n\n\n\n                    Time Series database\n                  \n\nAmazon Timestream\n\n\n                    Used to efficiently collect, synthesize, and derive\n                    insights from data that changes over time. IoT\n                    applications, DevOps, and industrial telemetry can\n                    utilize time-series databases.\n                  \n\n\n\n                    Wide column\n                  \n\nAmazon\n                      Keyspaces (for Apache Cassandra)\n\n\n                    Uses tables, rows, and columns, but unlike a relational\n                    database, the names and format of the columns can vary\n                    from row to row in the same table. You typically see a\n                    wide column store in high scale industrial apps for\n                    equipment maintenance, fleet management, and route\n                    optimization.\u00a0\n                  \n\n\n\n                    Ledger\n                  \n\nAmazon\n                      Quantum Ledger Database (Amazon QLDB)\n\n\n                    Provides a centralized and trusted authority to maintain\n                    a scalable, immutable, and cryptographically verifiable\n                    record of transactions for every application. We see\n                    ledger databases used for systems of record, supply\n                    chain, registrations, and even banking transactions.\u00a0\u00a0\n                  \n\n\n\n\n            If you are building a data platform, leverage\n            modern\n            data architecture on AWS to integrate your data lake,\n            data warehouse, and purpose-built data stores.\n          \n\n\n            The key questions that you need to consider when choosing a\n            data store for your workload are as follows:\n          \n\n\n\n                Question\n              \n\n                Things to consider\n              \n\n\n\n\n                How is the data structured?", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/perf_data_use_purpose_built_data_store.html", "title": "PERF03-BP01 Use a purpose-built data store that best supports your data access and storage requirements - AWS Well-Architected Framework", "description": "Understand data characteristics (like shareable, size, cache size, access patterns, latency, throughput, and persistence of data) to select the right purpose-built data stores (storage or database) for your workload.", "language": "en-US"}}