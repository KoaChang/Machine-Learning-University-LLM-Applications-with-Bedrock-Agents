{"page_content": "REL11-BP06 Send notifications when events impact availability - Reliability PillarREL11-BP06 Send notifications when events impact availability - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidance Resources REL11-BP06 Send notifications when events impact\n  availability\n    Notifications are sent upon the detection of thresholds breached,\n    even if the event causing the issue was automatically resolved.\n  \n    Automated healing allows your workload to be reliable. However, it\n    can also obscure underlying problems that need to be addressed.\n    Implement appropriate monitoring and events so that you can detect\n    patterns of problems, including those addressed by auto healing, so\n    that you can resolve root cause issues.\n  \n    Resilient systems are designed so that degradation events are\n    immediately communicated to the appropriate teams. These\n    notifications should be sent through one or many communication\n    channels.\n  \nDesired outcome:\u00c2\u00a0Alerts are\n    immediately sent to operations teams when thresholds are breached,\n    such as error rates, latency, or other critical key performance\n    indicator (KPI) metrics, so that these issues are resolved as soon as\n    possible and user impact is avoided or minimized.\n  \nCommon anti-patterns:\n\n\n\n        Sending too many alarms.\n      \n\n\n        Sending alarms that are not actionable.\n      \n\n\n        Setting alarm thresholds too high (over sensitive) or too low\n        (under sensitive).\n      \n\n\n        Not sending alarms for external dependencies.\n      \n\n\n        Not considering\n        gray\n          failures when designing monitoring and alarms.\n      \n\n\n        Performing healing automation, but not notifying the appropriate\n        team that healing was needed.\n      \n\nBenefits of establishing this best\n      practice: Notifications of recovery make operational and\n    business teams aware of service degradations so that they can react\n    immediately to minimize both mean time to detect (MTTD) and mean\n    time to repair (MTTR). Notifications of recovery events also assure\n    that you don't ignore problems that occur infrequently.\n  \nLevel of risk exposed if this best practice\n      is not established: Medium. Failure to implement\n    appropriate monitoring and events notification mechanisms can result\n    in failure to detect patterns of problems, including those addressed\n    by auto healing. A team will only be made aware of system\n    degradation when users contact customer service or by chance.\n  \nImplementation guidance \n\n      When defining a monitoring strategy, a triggered alarm is a common\n      event. This event would likely contain an identifier for the\n      alarm, the alarm state (such as IN ALARM or OK), and details of\n      what triggered it. In many cases, an alarm event should be\n      detected and an email notification sent. This is an example of an\n      action on an alarm. Alarm notification is critical in\n      observability, as it informs the right people that there is an\n      issue. However, when action on events mature in your observability\n      solution, it can automatically remediate the issue without the\n      need for human intervention.\n    \n\n      Once KPI-monitoring alarms have been established, alerts should be\n      sent to appropriate teams when thresholds are exceeded. Those\n      alerts may also be used to trigger automated processes that will\n      attempt to remediate the degradation.\n    \n\n      For more complex threshold monitoring, composite alarms should be\n      considered. Composite alarms use a number of KPI-monitoring alarms\n      to create an alert based on operational business logic. CloudWatch\n      Alarms can be configured to send emails, or to log incidents in\n      third-party incident tracking systems using Amazon SNS integration\n      or Amazon EventBridge.\n    \nImplementation steps \n\n        Create various types of alarms based on how the workloads are\n        monitored, such as:\n      \n\n\n\n            Application alarms are used to detect when\n            any part of your workload is not working properly.\n          \n\n\nInfrastructure\n              alarms indicate when to scale resources. Alarms\n            can be visually displayed on dashboards, send alerts\n            through Amazon SNS or email, and work with Auto Scaling to\n            scale workload resources in or out.\n          \n\n\n            Simple\n            static\n              alarms can be created to monitor when a\n            metric breaches a static threshold for a specified number\n            of evaluation periods.\n          \n\n\nComposite\n              alarms can account for complex alarms from multiple sources.\n          \n\n\n            Once the alarm has been created,\n            create appropriate notification events. You can directly\n            invoke an\n            Amazon SNS\n              API to send notifications and link any automation\n            for remediation or communication.\n          \n\n\n            Integrate Amazon\n              Health Aware monitoring to allow for monitoring\n            visibility to AWS resources that might have degradations.\n            For business essential workloads, this solution provides\n            access to proactive and real-time alerts for AWS services.\n          \n\nResources \n\nRelated Well-Architected best\n        practices:\n\n\n\n\nAvailability\n            Definition\n\n\n\nRelated documents:\n\n\n\n\nCreating\n            a CloudWatch Alarm Based on a Static Threshold\n\n\n\nWhat\n            Is Amazon EventBridge?\n\n\n\nWhat\n            is Amazon Simple Notification Service?\n\n\n\nPublishing\n            Custom Metrics\n\n\n\nUsing\n            Amazon CloudWatch Alarms\n\n\n\nAmazon\n            Health Aware (AHA)\n\n\n\nSetup\n            CloudWatch Composite alarms\n\n\n\nWhat's\n            new in AWS Observability at re:Invent 2022\n\n\n\nRelated tools:\n\n\n\n\nCloudWatch\n\n\n\nCloudWatch\n            X-Ray\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL11-BP05 Use static stability to prevent bimodal\n  behaviorREL11-BP07 Architect your product to meet availability targets and uptime service level agreements (SLAs)Did this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_withstand_component_failures_notifications_sent_system.html", "title": "REL11-BP06 Send notifications when events impact availability - Reliability Pillar", "description": "Notifications are sent upon the detection of thresholds breached, even if the event causing the issue was automatically resolved.", "language": "en-US"}}