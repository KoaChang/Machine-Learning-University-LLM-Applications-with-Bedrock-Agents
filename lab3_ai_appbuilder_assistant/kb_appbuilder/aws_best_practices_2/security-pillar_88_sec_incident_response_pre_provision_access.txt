{"page_content": "SEC10-BP05 Pre-provision access - Security PillarSEC10-BP05 Pre-provision access - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesSEC10-BP05 Pre-provision accessVerify that incident responders have the correct access pre-provisioned in AWS to reduce \n    the time needed for investigation through to recovery.\nCommon anti-patterns:\n\n\n\n        Using the root account for incident response.  \n      \n\n\n        Altering existing accounts. \n      \n\n\n        Manipulating IAM permissions directly when providing just-in-time privilege elevation. \n      \n\nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\nAWS recommends reducing or eliminating reliance on long-lived credentials wherever \n      possible, in favor of temporary credentials and just-in-time privilege escalation \n      mechanisms. Long-lived credentials are prone to security risk and increase operational \n      overhead. For most management tasks, as well as incident response tasks, we recommend you implement identity federation\n      alongside temporary \n        escalation for administrative access. In this model, a user requests elevation to a \n      higher level of privilege (such as an incident response role) and, provided the user \n      is eligible for elevation, a request is sent to an approver. If the request is approved, \n      the user receives a set of temporary AWS credentials which can be used to complete their \n      tasks. After these credentials expire, the user must submit a new elevation request.\n\n      We recommend the use of temporary privilege escalation in the majority of incident response scenarios. The correct way to do this is to use the \n      AWS Security Token Service and session policies \n      to scope access. \n    \n\n      There are scenarios where federated identities are unavailable, such as:\n    \n\n\n\n          Outage related to a compromised identity provider (IdP). \n        \n\n\n          Misconfiguration or human error causing broken federated access management system. \n        \n\n\n          Malicious activity such as a distributed denial of service (DDoS) event or rendering unavailability of the system. \n        \n\n\n      In the preceding cases, there should be emergency break glass access configured to allow \n      investigation and timely remediation of incidents. We recommend that you use a user,   \n      group, or role with appropriate permissions to perform tasks and access AWS resources.  Use the root user only for \n      tasks that require root user credentials.\n      To verify that incident responders have the correct level of access to AWS and other relevant systems, we recommend the pre-provisioning \n      of dedicated accounts. The accounts require privileged access, and must be \n      tightly controlled and monitored. The accounts must be built with the fewest privileges \n      required to perform the necessary tasks, and the level of access should be based on the \n      playbooks created as part of the incident management plan.\n    \n\n      Use purpose-built and dedicated users and roles as a best practice. Temporarily escalating \n      user or role access through the addition of IAM policies both makes it unclear what access \n      users had during the incident, and risks the escalated privileges not being revoked. \n    \n\n      It is important to remove as many dependencies as possible to verify that access can be \n      gained under the widest possible number of failure scenarios. To support this, create a \n      playbook to verify that incident response users are created as \n      users in a dedicated security account, and not managed through any existing Federation or \n      single sign-on (SSO) solution. Each individual responder must have their own named account. \n      The account configuration must enforce strong password policy and multi-factor authentication (MFA). \n      If the incident response playbooks only require access to the AWS Management Console, the user should not \n      have access keys configured and should be explicitly disallowed from creating access keys. \n      This can be configured with IAM policies or service control policies (SCPs) as mentioned in \n      the AWS Security Best Practices for AWS Organizations SCPs. The users should have no privileges \n      other than the ability to assume incident response roles in other accounts. \n    \n\n      During an incident it might be necessary to grant access to other internal or external individuals \n      to support investigation, remediation, or recovery activities. In this case, use the playbook \n      mechanism mentioned previously, and there must be a process to verify that any additional access is \n      revoked immediately after the incident is complete. \n    \n\n      To verify that the use of incident response roles can be properly monitored and audited, \n      it is essential that the IAM accounts created for this purpose are not shared between \n      individuals, and that the AWS account root user is not used unless required for a specific \n      task. If the root user is required (for example, IAM access to a specific account is unavailable), \n      use a separate process with a playbook available to verify availability of the root user sign-in credentials and \n      MFA token.\n    \n\n      To configure the IAM policies for the incident response roles, consider using IAM Access Analyzer \n      to generate policies based on AWS CloudTrail logs. To do this, grant administrator access to the \n      incident response role on a non-production account and run through your playbooks. Once \n      complete, a policy can be created that allows only the actions taken. This policy can then be \n      applied to all the incident response roles across all accounts. You might wish to create a separate \n      IAM policy for each playbook to allow easier management and auditing. Example playbooks could \n      include response plans for ransomware, data breaches, loss of production access, and other \n      scenarios.\n    \n\n      Use the incident response accounts to assume dedicated incident response IAM roles in \n      other AWS accounts. These roles must be configured to only be assumable by users in the \n      security account, and the trust relationship must require that the calling principal has \n      authenticated using MFA. The roles must use tightly-scoped IAM policies to control access. \n      Ensure that all AssumeRole requests for these roles are logged in CloudTrail and alerted \n      on, and that any actions taken using these roles are logged. \n    \n It is strongly recommended that both the IAM accounts and the IAM roles are\n      clearly named to allow them to be easily found in CloudTrail logs. An example of this would be to\n      name the IAM accounts <USER_ID>-BREAK-GLASS and\n      the IAM roles BREAK-GLASS-ROLE. \n\nCloudTrail is used to log API activity in your AWS accounts and should be used to configure \n      alerts on usage of the incident response roles. Refer to the blog post on configuring alerts \n      when root keys are used. The instructions can be modified to configure the Amazon CloudWatch metric \n      filter-to-filter on AssumeRole events related to the incident response IAM role:\n    \n{ $.eventName = \"AssumeRole\" && $.requestParameters.roleArn = \"<INCIDENT_RESPONSE_ROLE_ARN>\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != \"AwsServiceEvent\" }\n\n      As the incident response roles are likely to have a high level of access, it is important \n      that these alerts go to a wide group and are acted upon promptly. \n    \n\n      During an incident, it is possible that a responder might require access to systems which are \n      not directly secured by IAM. These could include Amazon Elastic Compute Cloud instances, Amazon Relational Database Service databases, or \n      software-as-a-service (SaaS) platforms. It is strongly recommended that rather than using \n      native protocols such as SSH or RDP, AWS Systems Manager Session Manager is used for all \n      administrative access to Amazon EC2 instances. This access can be controlled using IAM, which is \n      secure and audited. It might also be possible to automate parts of your playbooks using \n      AWS Systems Manager Run Command documents, which can reduce user error and improve \n      time to recovery. For access to databases and third-party tools, we recommend storing \n      access credentials in AWS Secrets Manager and granting access to the incident responder \n      roles. \n    \n\n      Finally, the management of the incident response IAM accounts should be added to your \n      Joiners, Movers, and Leavers processes and reviewed and tested periodically to verify that \n      only the intended access is allowed.\n    \nResources\n\nRelated documents:\n\n\n\n\nManaging temporary elevated access to your AWS environment\n\n\n\nAWS Security Incident Response Guide \n\n\nAWS Elastic Disaster Recovery\n\n\n\nAWS Systems Manager Incident Manager\n\n\n\nSetting an account password policy for IAM users\n\n\n\nUsing multi-factor authentication (MFA) in AWS\n\n\n\n          Configuring Cross-Account Access with MFA\n        \n\n\n          Using IAM Access Analyzer to generate IAM policies\n        \n\n\n          Best Practices for AWS Organizations Service Control Policies in a Multi-Account Environment\n        \n\n\n          How to Receive Notifications When Your AWS Account\u00e2\u20ac\u2122s Root Access Keys Are Used\n        \n\n\n          Create fine-grained session permissions using IAM managed policies\n        \n\n\nRelated videos:\n\n\n\n\n          Automating Incident Response and Forensics in AWS\n\n\nDIY guide to runbooks, incident reports, and\n            incident response\n\n\n\n          Prepare for and respond to security incidents in your AWS environment\n        \n\n\nRelated examples:\n\n\n\n\n          Lab: AWS Account Setup and Root User \n        \n\n\n          Lab: Incident Response with AWS Console and CLI", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_incident_response_pre_provision_access.html", "title": "SEC10-BP05 Pre-provision access - Security Pillar", "description": "Verify that incident responders have the correct access pre-provisioned in AWS to reduce the time needed for investigation through to recovery.", "language": "en-US"}}