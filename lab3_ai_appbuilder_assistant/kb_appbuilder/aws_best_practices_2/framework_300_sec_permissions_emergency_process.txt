{"page_content": "In the unlikely event that your centralized identity provider is\n      unavailable, your workforce users can't federate to AWS accounts\n      or manage their workloads. In this emergency event, you can\n      provide an emergency access process for a small set of\n      administrators to access AWS accounts to perform critical tasks\n      that cannot wait until your centralized identity providers are\n      back online. For example, your identity provider is unavailable\n      for 4 hours and during that period you need to modify the upper\n      limits of an Amazon EC2 Auto Scaling group in a Production account to\n      handle an unexpected spike in customer traffic. Your emergency\n      administrators should follow the emergency access process to gain\n      access to the specific production AWS account and make the\n      necessary changes.\n    \n\n      The emergency access process relies on a pre-created emergency\n      access AWS account that is used solely for emergency access and\n      has AWS resources (such as IAM roles and IAM users) to support the\n      emergency access process. During normal operations, no one should\n      access the emergency access account and you must monitor and alert\n      on the misuse of this account (for more detail, see the preceding\n      Common guidance section).\n    \n\n      The emergency access account has emergency access IAM roles with\n      permissions to assume cross-account roles in the AWS accounts that\n      require emergency access. These IAM roles are pre-created and\n      configured with trust policies that trust the emergency account's\n      IAM roles.\n    \n\n      The emergency access process can use one of the following\n      approaches:\n    \n\n\n\n          You can pre-create a set of\n          IAM users for your emergency administrators in the\n          emergency access account with associated strong passwords and\n          MFA tokens. These IAM users have permissions to assume the IAM\n          roles that then allow cross-account access to the AWS account\n          where emergency access is required. We recommend creating as\n          few such users as possible and assigning each user to a single\n          emergency administrator. During an emergency, an emergency\n          administrator user signs into the emergency access account\n          using their password and MFA token code, switches to the\n          emergency access IAM role in the emergency account, and\n          finally switches to the emergency access IAM role in the\n          workload account to perform the emergency change action. The\n          advantage of this approach is that each IAM user is assigned\n          to one emergency administrator and you can know which user\n          signed-in by reviewing CloudTrail events. The disadvantage is\n          that you have to maintain multiple IAM users with their\n          associated long-lived passwords and MFA tokens.\n        \n\n\n          You can use the emergency access\n          AWS account root user to sign into the emergency access\n          account, assume the IAM role for emergency access, and assume\n          the cross-account role in the workload account. We recommend\n          setting a strong password and multiple MFA tokens for the root\n          user. We also recommend storing the password and the MFA\n          tokens in a secure enterprise credential vault that enforces\n          strong authentication and authorization. You should secure the\n          password and MFA token reset factors: set the email address\n          for the account to an email distribution list that is\n          monitored by your cloud security administrators, and the phone\n          number of the account to a shared phone number that is also\n          monitored by security administrators. The advantage of this\n          approach is that there is one set of root user credentials to\n          manage. The disadvantage is that since this is a shared user,\n          multiple administrators have ability to sign in as the root\n          user. You must audit your enterprise vault log events to\n          identify which administrator checked out the root user\n          password.\n        \n\n\nFailure Mode 2: Identity provider\n      configuration on AWS is modified or has expired\n\n\n      To allow your workforce users to federate to AWS accounts, you can\n      configure the IAM Identity Center with an external identity\n      provider or create an IAM Identity Provider\n      (SEC02-BP04).\n      Typically, you configure these by importing a SAML meta-data XML\n      document provided by your identity provider. The meta-data XML\n      document includes a X.509 certificate corresponding to a private\n      key that the identity provider uses to sign its SAML assertions.\n    \n\n      These configurations on the AWS-side may be modified or deleted by\n      mistake by an administrator. In another scenario, the X.509\n      certificate imported into AWS may expire and a new meta-data XML\n      with a new certificate has not yet been imported into AWS. Both\n      scenarios can break federation to AWS for your workforce users,\n      resulting in an emergency.\n    \n\n      In such an emergency event, you can provide your identity\n      administrators access to AWS to fix the federation issues. For\n      example, your identity administrator uses the emergency access\n      process to sign into the emergency access AWS account, switches to\n      a role in the Identity Center administrator account, and updates\n      the external identity provider configuration by importing the\n      latest SAML meta-data XML document from your identity provider to\n      re-enable federation. Once federation is fixed, your workforce\n      users continue to use the normal operating process to federate\n      into their workload accounts.\n    \n\n      You can follow the approaches detailed in the previous Failure\n      Mode 1 to create an emergency access\n      process. You can grant least-privilege permissions to your\n      identity administrators to access only the Identity Center\n      administrator account and perform actions on Identity Center in\n      that account.\n    \n\nFailure Mode 3: Identity Center\n      disruption\n\n\n      In the unlikely event of an IAM Identity Center or AWS Region\n      disruption, we recommend that you set up a configuration that you\n      can use to provide temporary access to the AWS Management Console.\n    \n\n      The emergency access process uses direct federation from your\n      identity provider to IAM in an emergency account. For detail\n      on the process and design considerations, see\n      Set\n      up emergency access to the AWS Management Console.\n    \nImplementation steps \n\nCommon steps for all failure\n        modes\n\n\n\n\n            Create an AWS account dedicated to emergency access\n            processes. Pre-create the IAM resources needed in the\n            account such as IAM roles or IAM users, and optionally IAM\n            Identity Providers. Additionally, pre-create cross-account\n            IAM roles in the workload AWS accounts with trust\n            relationships with corresponding IAM roles in the emergency\n            access account. You can use\n            AWS CloudFormation\n            StackSets with AWS Organizations to create such\n            resources in the member accounts in your organization.\n          \n\n\n\n\n            Create AWS Organizations\n            service\n            control policies (SCPs) to deny the deletion and\n            modification of the cross-account IAM roles in the member\n            AWS accounts.\n          \n\n\n            Enable CloudTrail for the emergency access AWS account and\n            send the trail events to a central S3 bucket in your log\n            collection AWS account. If you are using AWS Control Tower\n            to set up and govern your AWS multi-account environment,\n            then every account you create using AWS Control Tower or enroll\n            in AWS Control Tower has CloudTrail enabled by default and sent\n            to an S3 bucket in a dedicated log archive AWS account.\n          \n\n\n            Monitor the emergency access account for activity by\n            creating EventBridge rules that match on console login and\n            API activity by the emergency IAM roles. Send notifications\n            to your security operations center when activity happens\n            outside of an ongoing emergency event tracked in your\n            incident management system.\n          \n\n\nAdditional steps for Failure Mode 1:\n        Identity provider used to federate to AWS is unavailable and\n        Failure Mode 2: Identity provider configuration on AWS is\n        modified or has expired\n\n\n\n\n            Pre-create resources depending on the mechanism you choose\n            for emergency access:\n          \n\n\n\nUsing IAM users:\n                pre-create the IAM users with strong passwords and\n                associated MFA devices.\n              \n\n\nUsing the emergency account root\n                user: configure the root user with a strong\n                password and store the password in your enterprise\n                credential vault. Associate multiple physical MFA\n                devices with the root user and store the devices in\n                locations that can be accessed quickly by members of\n                your emergency administrator team.\n              \n\n\n\nAdditional steps for Failure Mode 3:\n        Identity center disruption\n\n\n\n\n            As detailed in\n            Set\n            up emergency access to the AWS Management Console, in\n            the emergency access AWS account, create an IAM Identity\n            Provider to enable direct SAML federation from your identity\n            provider.\n          \n\n\n            Create emergency operations groups in your IdP with no\n            members.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_permissions_emergency_process.html", "title": "SEC03-BP03 Establish emergency access process - AWS Well-Architected Framework", "description": "Create a process that allows for emergency access to your workloads in the unlikely event of an issue with your centralized identity provider.", "language": "en-US"}}