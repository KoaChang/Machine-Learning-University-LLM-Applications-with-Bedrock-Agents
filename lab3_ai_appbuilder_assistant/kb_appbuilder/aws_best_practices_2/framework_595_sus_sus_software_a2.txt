{"page_content": "SUS03-BP01 Optimize software and architecture for asynchronous and scheduled jobs - AWS Well-Architected FrameworkSUS03-BP01 Optimize software and architecture for asynchronous and scheduled jobs - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesSUS03-BP01 Optimize software and architecture for asynchronous\n  and scheduled jobsUse efficient software and architecture patterns such as queue-driven to \n    maintain consistent high utilization of deployed resources.\nCommon anti-patterns:\n\n\n\n        You overprovision the resources in your cloud workload to meet unforeseen spikes in demand.\n      \n\n\n        Your architecture does not decouple senders and receivers of asynchronous messages by a messaging component. \n      \n\nBenefits of establishing this best practice:\n\n\n\n        Efficient software and architecture patterns minimize the unused resources in your workload and improve the overall efficiency.\n      \n\n\n        You can scale the processing independently of the receiving of asynchronous messages.\n      \n\n\n        Through a messaging component, you have relaxed availability requirements that you can meet with fewer resources.\n      \n\nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      Use efficient architecture patterns such as event-driven architecture that result in \n      even utilization of components and minimize overprovisioning in your workload. Using \n      efficient architecture patterns minimizes idle resources from lack of use due to changes \n      in demand over time. \n    \n\n      Understand the requirements of your workload components and adopt architecture patterns \n      that increase overall utilization of resources. Retire components that are no longer required.\n    \n\nImplementation steps\n\n\n\n\n          Analyze the demand for your workload to determine how to respond to those.\n        \n\n\n          For requests or jobs that don\u00e2\u20ac\u2122t require synchronous responses, use queue-driven \n          architectures and auto scaling workers to maximize utilization. Here are some \n          examples of when you might consider queue-driven architecture:\n        \n\n\nQueuing mechanism\nDescription\n\n\n\n\nAWS Batch job queues\n\n\nAWS Batch jobs are submitted to a job queue where \n                    they reside until they can be scheduled to run in a \n                    compute environment.\n\n\n\n\nAmazon Simple Queue Service and Amazon EC2 Spot Instances\n\n\nPairing Amazon SQS and Spot Instances to build fault tolerant and efficient architecture.\n\n\n\n\n\n          For requests or jobs that can be processed anytime, use scheduling mechanisms \n          to process jobs in batch for more efficiency. Here are some examples of scheduling \n          mechanisms on AWS: \n        \n\n\nScheduling mechanism\nDescription\n\n\n\n\nAmazon EventBridge Scheduler\n\n\nA capability from Amazon EventBridge that allows you to create, run, and manage scheduled tasks at scale.\n\n\n\n\nAWS Glue time-based schedule\n\n\nDefine a time-based schedule for your crawlers and jobs in AWS Glue.\n\n\n\n\nAmazon Elastic Container Service (Amazon ECS) scheduled tasks\n\n\nAmazon ECS supports creating scheduled tasks. Scheduled tasks use Amazon EventBridge rules to run tasks either on a schedule or in a response to an EventBridge event.\n\n\n\n\nInstance Scheduler\n\n\nConfigure start and stop schedules for your Amazon EC2 and Amazon Relational Database Service instances.\n\n\n\n\n\n          If you use polling and webhooks mechanisms in your architecture, replace those with events. \n          Use event-driven architectures to build highly efficient workloads. \n        \n\n\n          Leverage serverless on AWS to eliminate over-provisioned infrastructure.\n        \n\n\n          Right size individual components of your architecture to prevent idling resources waiting for input.\n        \n\nResources\n\nRelated documents:\n\n\n\n\nWhat\n          is Amazon Simple Queue Service?\n\n\n\nWhat\n          is Amazon MQ?\n\n\n\nScaling\n          based on Amazon SQS\n\n\n\nWhat\n          is AWS Step Functions?\n\n\n\nWhat\n          is AWS Lambda?\n\n\n\nUsing\n          AWS Lambda with Amazon SQS\n\n\n\nWhat\n          is Amazon EventBridge?\n\n\n\nRelated videos:\n\n\n\n\nMoving\n          to event-driven architectures\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSUS 3 How do you take advantage of software and architecture patterns to\n                  support your sustainability goals?SUS03-BP02 Remove or refactor workload components with low or\n  no useDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sus_sus_software_a2.html", "title": "SUS03-BP01 Optimize software and architecture for asynchronous and scheduled jobs - AWS Well-Architected Framework", "description": "Use efficient software and architecture patterns such as queue-driven to maintain consistent high utilization of deployed resources.", "language": "en-US"}}