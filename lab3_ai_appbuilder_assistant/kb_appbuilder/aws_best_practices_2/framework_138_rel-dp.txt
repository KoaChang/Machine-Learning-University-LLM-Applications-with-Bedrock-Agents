{"page_content": "Design principles - AWS Well-Architected FrameworkDesign principles - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkDesign principles\n      There are five design principles for reliability in the cloud:\n    \n\n\nAutomatically recover from failure: By monitoring a\n            workload for key performance indicators (KPIs), you can start automation when a\n            threshold is breached. These KPIs should be a measure of business value, not of the\n            technical aspects of the operation of the service. This provides for automatic\n            notification and tracking of failures, and for automated recovery processes that work\n            around or repair the failure. With more sophisticated automation, it\u2019s possible to\n            anticipate and remediate failures before they occur. \n\n\nTest recovery procedures: In\n        an on-premises environment, testing is often conducted to\n        prove that the workload works in a particular scenario. Testing\n        is not typically used to validate recovery strategies. In the\n        cloud, you can test how your workload fails, and you can\n        validate your recovery procedures. You can use automation to\n        simulate different failures or to recreate scenarios that led to\n        failures before. This approach exposes failure pathways that you\n        can test and fix before a real failure scenario occurs, thus\n        reducing risk.\n      \n\n\nScale horizontally to increase aggregate\n        workload availability: Replace one large resource\n        with multiple small resources to reduce the impact of a single\n        failure on the overall workload. Distribute requests across\n        multiple, smaller resources to verify that they don\u2019t share a\n        common point of failure.\n      \n\n\nStop guessing capacity: A\n        common cause of failure in on-premises workloads is resource\n        saturation, when the demands placed on a workload exceed the\n        capacity of that workload (this is often the objective of denial\n        of service attacks). In the cloud, you can monitor demand and\n        workload utilization, and automate the addition or removal of\n        resources to maintain the more efficient level to satisfy demand\n        without over- or under-provisioning. There are still limits, but\n        some quotas can be controlled and others can be managed (see\n        Manage Service Quotas and Constraints).\n      \n\n\nManage change in automation:\n        Changes to your infrastructure should be made using\n        automation. The changes that must be managed include changes\n        to the automation, which then can be tracked and reviewed.\n      \n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsReliabilityDefinitionDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel-dp.html", "title": "Design principles - AWS Well-Architected Framework", "description": "There are five design principles for reliability in the cloud.", "language": "en-US"}}