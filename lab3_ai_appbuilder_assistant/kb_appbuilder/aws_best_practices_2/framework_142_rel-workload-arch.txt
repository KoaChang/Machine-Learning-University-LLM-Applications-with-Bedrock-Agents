{"page_content": "Workload architecture - AWS Well-Architected FrameworkWorkload architecture - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkWorkload architecture\n      A reliable workload starts with upfront design decisions for both\n      software and infrastructure. Your architecture choices will\n      impact your workload behavior across all of the Well-Architected\n      pillars. For reliability, there are specific patterns you must\n      follow.\n    \n      With AWS, workload developers have their choice of languages and\n      technologies to use. AWS SDKs take the complexity out of coding by\n      providing language-specific APIs for AWS services. These SDKs,\n      plus the choice of languages, permits developers to implement the\n      reliability best practices listed here. Developers can also read\n      about and learn from how Amazon builds and operates software in\n      The\n      Amazon Builders' Library.\n    \n      The following questions focus on these considerations for\n      reliability.\n    \n\nREL 3:\u00a0 How do you design your workload service architecture?\n\n\n\nBuild highly scalable and reliable workloads using a service-oriented\n                  architecture (SOA) or a microservices architecture. Service-oriented architecture\n                  (SOA) is the practice of making software components reusable via service\n                  interfaces. Microservices architecture goes further to make components smaller and\n                  simpler.\n\n\n\nREL 4:\u00a0 How do you design interactions in a distributed system to prevent\n                  failures?\n\n\n\nDistributed systems rely on communications networks to interconnect\n                  components, such as servers or services. Your workload must operate reliably\n                  despite data loss or latency in these networks. Components of the distributed\n                  system must operate in a way that does not negatively impact other components or\n                  the workload. These best practices prevent failures and improve mean time between\n                  failures (MTBF).\n\n\n\nREL 5:\u00a0 How do you design interactions in a distributed system to mitigate or\n                  withstand failures?\n\n\n\nDistributed systems rely on communications networks to interconnect\n                  components (such as servers or services). Your workload must operate reliably\n                  despite data loss or latency over these networks. Components of the distributed\n                  system must operate in a way that does not negatively impact other components or\n                  the workload. These best practices permit workloads to withstand stresses or\n                  failures, more quickly recover from them, and mitigate the impact of such\n                  impairments. The result is improved mean time to recovery (MTTR).\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsFoundationsChange managementDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel-workload-arch.html", "title": "Workload architecture - AWS Well-Architected Framework", "description": "A reliable workload starts with upfront design decisions for both software and infrastructure. Your architecture choices will impact your workload behavior across all of the Well-Architected pillars. For reliability, there are specific patterns you must follow.", "language": "en-US"}}