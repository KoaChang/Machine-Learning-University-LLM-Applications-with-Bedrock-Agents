{"page_content": "SEC03-BP02 Grant least privilege access - Security PillarSEC03-BP02 Grant least privilege access - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesSEC03-BP02 Grant least privilege access\n      It's a best practice to grant only the access that identities\n      require to perform specific actions on specific resources under\n      specific conditions. Use group and identity attributes to\n      dynamically set permissions at scale, rather than defining\n      permissions for individual users. For example, you can allow a\n      group of developers access to manage only resources for their\n      project. This way, if a developer leaves the project, the\n      developer\u2019s access is automatically revoked without changing the\n      underlying access policies.\n    Desired outcome: Users should only have the permissions\n    required to do their job. Users should only be given access to production environments to\n    perform a specific task within a limited time period, and access should be revoked once that\n    task is complete. Permissions should be revoked when no longer needed, including when a user\n    moves onto a different project or job function. Administrator privileges should be given only to\n    a small group of trusted administrators. Permissions should be reviewed regularly to avoid\n    permission creep. Machine or system accounts should be given the smallest set of permissions\n    needed to complete their tasks. Common anti-patterns:\n\n Defaulting to granting users administrator permissions. \n\n Using the root user for day-to-day activities. \n\n Creating policies that are overly permissive, but without full administrator\n        privileges. \n\n Not reviewing permissions to understand whether they permit least privilege access.\n      \n\nLevel of risk exposed if this best practice is not established:\n    High \nImplementation guidance\n\n        The principle of\n        least\n        privilege states that identities should only be permitted\n        to perform the smallest set of actions necessary to fulfill a\n        specific task. This balances usability, efficiency, and\n        security. Operating under this principle helps limit unintended\n        access and helps track who has access to what resources. IAM\n        users and roles have no permissions by default. The root user\n        has full access by default and should be tightly controlled,\n        monitored, and used only for\n        tasks\n        that require root access.\n      \n\n        IAM policies are used to explicitly grant permissions to IAM\n        roles or specific resources. For example, identity-based\n        policies can be attached to IAM groups, while S3 buckets can be\n        controlled by resource-based policies.\n      \n\n        When creating an IAM policy, you can specify the service\n        actions, resources, and conditions that must be true for AWS to\n        allow or deny access. AWS supports a variety of conditions to\n        help you scope down access. For example, by using the\n        PrincipalOrgID\ncondition\n        key, you can deny actions if the requestor isn\u2019t a part\n        of your AWS Organization.\n      \n\n        You can also control requests that AWS services make on your\n        behalf, such as AWS CloudFormation creating an AWS Lambda\n        function, using the CalledVia condition key. You should layer\n        different policy types to establish defense-in-depth and limit\n        the overall permissions of your users. You can also restrict\n        what permissions can be granted and under what conditions. For\n        example, you can allow your application teams to create their\n        own IAM policies for systems they build, but must also apply a\n        Permission\n        Boundary to limit the maximum permissions the system can\n        receive.\n      \n\nImplementation steps\n\n\n\n\nImplement least privilege\n              policies: Assign access policies with least\n            privilege to\u00a0IAM groups and roles to reflect the user\u2019s role\n            or function that you have defined.\n          \n\n\n\nBase policies on API\n                  usage: One way to determine the needed\n                permissions is to review AWS CloudTrail logs. This review\n                allows you to create permissions tailored to the actions\n                that the user actually performs within AWS.\n                IAM\n                  Access Analyzer can automatically generate an IAM policy\n                  based\non\n                  activity. You can use IAM Access Advisor at the\n                organization or account level to\n                track\nthe\n                  last accessed information for a particular policy.\n              \n\n\n\nConsider using\n              AWS           managed policies for job functions. When\n            starting to create fine-grained permissions policies, it can\n            be difficult to know where to start. AWS has managed policies\n            for common job roles, for example billing, database\n            administrators, and data scientists. These policies can help\n            narrow the access that users have while determining how to\n            implement the least privilege policies.\n          \n\n\nRemove unnecessary permissions: Remove permissions that\n            are not needed and trim back overly permissive policies. IAM Access\n              Analyzer policy generation can help fine-tune permissions policies. \n\n\nEnsure that users have limited access to production\n              environments: Users should only have access to production environments with\n            a valid use case. After the user performs the specific tasks that required production\n            access, access should be revoked. Limiting access to production environments helps\n            prevent unintended production-impacting events and lowers the scope of impact of\n            unintended access. \n\nConsider permissions boundaries: A permissions\n            boundary is a feature for using a managed policy that sets the maximum permissions that\n            an identity-based policy can grant to an IAM entity. An entity's permissions boundary\n            allows it to perform only the actions that are allowed by both its identity-based\n            policies and its permissions boundaries. \u00a0\n\n\nConsider  resource tags for\n              permissions: An attribute-based access control model using resource tags\n            allows you to grant access based on resource purpose, owner, environment, or other\n            criteria. For example, you can use resource tags to differentiate between development\n            and production environments. Using these tags, you can restrict developers to the\n            development environment. By combining tagging and permissions policies, you can achieve\n            fine-grained resource access without needing to define complicated, custom policies for\n            every job function. \n\n\nUse\n          service\n            control policies for AWS Organizations. Service control policies centrally control the maximum available\n        permissions for member accounts in your organization.\n        Importantly, service control policies allow you to restrict root\n        user permissions in member accounts. Also consider using AWS Control Tower, which provides prescriptive managed controls that\n        enrich AWS Organizations. You can also define your own controls\n        within Control Tower.\n      \n\n\nEstablish a user lifecycle policy for\n              your organization: User lifecycle policies define\n            tasks to perform when users are onboarded onto AWS, change job\n            role or scope, or no longer need access to AWS. Permission\n            reviews should be done during each step of a user\u2019s lifecycle\n            to verify that permissions are properly restrictive and to\n            avoid permissions creep.\n          \n\n\nEstablish a regular schedule to review permissions and remove any\n              unneeded permissions: You should regularly review user access to verify\n            that users do not have overly permissive access. AWS Config and IAM Access Analyzer can help when auditing user permissions. \n\nEstablish a job role matrix: A job role matrix visualizes the various roles and access levels required within your AWS footprint. Using a job role matrix, you can define and separate permissions based on user responsibilities within your organization. Use groups instead of applying permissions directly to individual users or roles.\n\n\u00a0\n\nResources\n\nRelated documents:\n\n\n\n\nGrant\n          least privilege\n\n\n\nPermissions\n          boundaries for IAM entities\n\n\n\nTechniques\n          for writing least privilege IAM policies\n\n\n\nIAM\n          Access Analyzer makes it easier to implement least privilege\n          permissions by generating IAM\npolicies\n          based on access activity\n\n\n\nDelegate permission management to developers by using IAM permissions boundaries\n\n\n\nRefining\n          Permissions using last accessed information\n\n\n\nIAM\n          policy types and when to use them\n\n\n\nTesting\n          IAM policies with the IAM policy simulator\n\n\n\nGuardrails\n          in AWS Control Tower\n\n\n\nZero\n          Trust architectures: An AWS perspective\n\n\n\nHow\n            to implement the principle of least privilege with CloudFormation StackSets\n\n\n\nAttribute-based\n          access control (ABAC)\n\n\nReducing policy scope by viewing user activity\n\n\n\nView\n          role access\n\n\n\nUse\n          Tagging to Organize Your Environment and Drive\n          Accountability\n\n\n\nAWS           Tagging Strategies\n\n\n\nTagging\n          AWS resources\n\n\n\nRelated videos:\n\n\n\n\nNext-generation\n          permissions management\n\n\n\nZero\n          Trust: An AWS perspective\n\n\n\nRelated examples:\n\n\n\n\nLab:\n          IAM permissions boundaries delegating role creation\n\n\n\nLab:\n          IAM tag based access control for EC2", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_permissions_least_privileges.html", "title": "SEC03-BP02 Grant least privilege access - Security Pillar", "description": "It's a best practice to grant only the access that identities require to perform specific actions on specific resources under specific conditions. Use group and identity attributes to dynamically set permissions at scale, rather than defining permissions for individual users.", "language": "en-US"}}