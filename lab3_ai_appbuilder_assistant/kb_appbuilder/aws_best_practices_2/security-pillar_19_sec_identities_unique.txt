{"page_content": "SEC02-BP02 Use temporary credentials - Security PillarSEC02-BP02 Use temporary credentials - Security PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesSEC02-BP02 Use temporary credentials\n    When doing any type of authentication, it\u2019s best to use temporary\n    credentials instead of long-term credentials to reduce or eliminate\n    risks, such as credentials being inadvertently disclosed, shared, or\n    stolen.\n  Desired outcome: To reduce the risk of long-term\n    credentials, use temporary credentials wherever possible for both human and machine identities.\n    Long-term credentials create many risks, for example, they can be uploaded in code to public\n    GitHub repositories. By using temporary credentials, you significantly reduce the chances of\n    credentials becoming compromised. Common anti-patterns:\n\n Developers using long-term access keys from IAM users rather than obtaining temporary\n        credentials from the CLI using federation. \n\n Developers embedding long-term access keys in their code and uploading that code to\n        public Git repositories. \n\n Developers embedding long-term access keys in mobile apps that are then made available\n        in app stores. \n\n Users sharing long-term access keys with other users, or employees leaving the company\n        with long-term access keys still in their possession. \n\n Using long-term access keys for machine identities when temporary credentials could be\n        used. \n\nLevel of risk exposed if this best practice is not established:\n    High \nImplementation guidance\n\n      Use temporary security credentials instead of long-term\n      credentials for all AWS API and CLI requests. API and CLI requests\n      to AWS services must, in nearly every case, be signed using\n      AWS       access keys. These requests can be signed with either\n      temporary or long-term credentials. The only time you should use\n      long-term credentials, also known as long-term access keys, is if\n      you are using an\n      IAM\n      user or the\n      AWS account root user. When you federate to AWS or assume an\n      IAM\n      role through other methods, temporary credentials are\n      generated. Even when you access the AWS Management Console using\n      sign-in credentials, temporary credentials are generated for you\n      to make calls to AWS services. There are few situations where you\n      need long-term credentials and you can accomplish nearly all tasks\n      using temporary credentials.\n    \n\n      Avoiding the use of long-term credentials in favor of temporary\n      credentials should go hand in hand with a strategy of reducing the\n      usage of IAM users in favor of federation and IAM roles. While IAM\n      users have been used for both human and machine identities in the\n      past, we now recommend not using them to avoid the risks in using\n      long-term access keys.\n    \nImplementation steps\n\n        For human identities like employees, administrators, developers,\n        operators, and customers:\n      \n\n\n\n            You should\n            rely\n            on a centralized identity provider and\n            require\n            human users to use federation with an identity provider to\n            access AWS using temporary credentials.\n            Federation for your users can be done either\n            with\u00a0direct\n            federation to each AWS account\u00a0or\n            using\u00a0AWS IAM Identity Center\u00a0and the identity provider of your\n            choice. Federation provides a number of advantages over\n            using IAM users in addition to eliminating long-term\n            credentials. Your users can also request temporary\n            credentials from the command line for\n            direct\n            federation or by using\n            IAM Identity Center. This means that there are\n            few uses cases that require IAM users or long-term\n            credentials for your users.\u00a0\n          \n\n\n            When granting third parties, such as software as a service\n            (SaaS) providers, access to resources in your AWS account,\n            you can use\n            cross-account\n            roles and\n            resource-based\n            policies.\n          \n\n\n            If you need to grant applications for consumers or customers\n            access to your AWS resources, you can\n            use\u00a0Amazon Cognito\u00a0identity pools or\n            Amazon Cognito user pools to provide temporary credentials.\n            The permissions for the credentials are configured through\n            IAM roles.\u00a0You can also define a separate IAM role with\n            limited permissions for guest users who are not\n            authenticated.\n          \n\n\n        For machine identities, you might need to use long-term\n        credentials. In these cases, you should\n        require\n        workloads to use temporary credentials with IAM roles to access\n        AWS.\n      \n\n\n\n            For Amazon Elastic Compute Cloud (Amazon EC2), you can\n            use\u00a0roles\n            for Amazon EC2.\n          \n\n\n\n\nAWS Lambda allows you to configure a\n            Lambda\n            execution role to grant the service permissions to\n            perform AWS actions using temporary credentials. There are\n            many other similar models for AWS services to grant\n            temporary credentials using IAM roles.\n          \n\n\n            For IoT devices, you can use the\n            AWS IoT Core credential provider to request temporary\n            credentials.\n          \n\n\n            For on-premises\u00a0systems or systems that run outside of AWS\n            that need access to AWS resources, you can use\n            IAM\n            Roles Anywhere.\n          \n\n\n        There are scenarios where temporary credentials are not an\n        option and you might need to use long-term credentials. In these\n        situations,\n        audit\n        and rotate credentials periodically and\n        rotate\n        access keys regularly for use cases that require long-term\n        credentials. Some examples that might require long-term\n        credentials include WordPress plugins and third-party AWS\n        clients. In situations where you must use long-term credentials,\n        or for credentials other than AWS access keys, such as database\n        logins, you can use a service that is designed to handle the\n        management of secrets, such as\n        AWS Secrets Manager. Secrets Manager makes it simple to\n        manage, rotate, and securely store encrypted secrets using\n        supported\n        services. For more information about rotating long-term\n        credentials, see\n        rotating\n        access keys.\n      \nResources\n\nRelated best practices:\n\n\n\nSEC02-BP03 Store and use secrets securely\n\n\nSEC02-BP04 Rely on a centralized identity provider\n\n\nSEC03-BP08 Share resources securely within your organization\n\n\n\nRelated documents:\n\n\n\n\nTemporary\n          Security Credentials\n\n\n\nAWS           Credentials\n\n\n\nIAM\n          Security Best Practices\n\n\n\nIAM\n          Roles\n\n\n\nIAM Identity Center\n\n\n\nIdentity\n          Providers and Federation\n\n\n\nRotating\n          Access Keys\n\n\n\nSecurity\n          Partner Solutions: Access and Access Control\n\n\n\nThe\n          AWS Account Root User\n\n\n\nRelated videos:\n\n\n\n\nManaging\n          user permissions at scale with AWS IAM Identity Center\n\n\n\nMastering\n          identity at every layer of the cake\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsSEC02-BP01 Use strong sign-in mechanismsSEC02-BP03 Store and use secrets securelyDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/sec_identities_unique.html", "title": "SEC02-BP02 Use temporary credentials - Security Pillar", "description": "When doing any type of authentication, it\u2019s best to use temporary credentials instead of long-term credentials to reduce or eliminate risks, such as credentials being inadvertently disclosed, shared, or stolen.", "language": "en-US"}}