{"page_content": "REL12-BP03 Test functional requirements - AWS Well-Architected FrameworkREL12-BP03 Test functional requirements - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesREL12-BP03 Test functional requirements\n    Use techniques such as unit tests and integration tests that\n    validate required functionality.\n  \n    You achieve the best outcomes when these tests are run automatically\n    as part of build and deployment actions. For instance, using AWS CodePipeline, developers commit changes to a source repository where\n    CodePipeline automatically detects the changes. Those changes are\n    built, and tests are run. After the tests are complete, the built\n    code is deployed to staging servers for testing. From the staging\n    server, CodePipeline runs more tests, such as integration or load\n    tests. Upon the successful completion of those tests, CodePipeline\n    deploys the tested and approved code to production instances.\n  \n    Additionally, experience shows that synthetic transaction testing\n    (also known as canary testing, but not to be\n    confused with canary deployments) that can run and simulate customer\n    behavior is among the most important testing processes. Run these\n    tests constantly against your workload endpoints from diverse remote\n    locations. Amazon CloudWatch Synthetics allows you\n    to\u00a0create\n    canaries\u00a0to monitor your endpoints and APIs.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n \n          Test functional requirements. These include unit tests and\n          integration tests that validate required functionality.\n        \n\n\n\nUse CodePipeline with\n                AWS CodeBuild to test code and run builds\n\n\n\nAWS CodePipeline Adds Support for Unit and Custom Integration Testing with\n                AWS CodeBuild\n\n\n\nContinuous Delivery and Continuous Integration\n\n\n\nUsing Canaries\n                (Amazon CloudWatch Synthetics)\n\n\n\nSoftware test automation\n\n\nResources\n\nRelated documents:\n\n\n\n\nAPN\n          Partner: partners that can help with implementation of a\n          continuous integration pipeline\n\n\n\nAWS CodePipeline Adds Support for Unit and Custom Integration\n          Testing with AWS CodeBuild\n\n\n\nAWS Marketplace: products that can be used for continuous\n          integration\n\n\n\nContinuous\n          Delivery and Continuous Integration\n\n\n\nSoftware\n          test automation\n\n\n\nUse\n          CodePipeline with AWS CodeBuild to test code and run\n          builds\n\n\n\nUsing\n          Canaries (Amazon CloudWatch Synthetics)\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL12-BP02 Perform post-incident analysisREL12-BP04 Test scaling and performance requirementsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_testing_resiliency_test_functional.html", "title": "REL12-BP03 Test functional requirements - AWS Well-Architected Framework", "description": "Use techniques such as unit tests and integration tests that validate required functionality.", "language": "en-US"}}