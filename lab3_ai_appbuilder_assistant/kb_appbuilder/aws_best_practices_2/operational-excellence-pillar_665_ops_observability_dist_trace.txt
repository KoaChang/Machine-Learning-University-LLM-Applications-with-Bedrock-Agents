{"page_content": "OPS04-BP05 Implement distributed tracing - Operational Excellence PillarOPS04-BP05 Implement distributed tracing - Operational Excellence PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesOPS04-BP05 Implement distributed tracing\n    Distributed tracing offers a way to monitor and visualize requests as they traverse through various components of a distributed system. By capturing trace data from multiple sources and analyzing it in a unified view, teams can better understand how requests flow, where bottlenecks exist, and where optimization efforts should focus.\n  \nDesired outcome: Achieve a holistic view of requests flowing through your distributed system, allowing for precise debugging, optimized performance, and improved user experiences.\n  \nCommon anti-patterns:\n\n\n\n        Inconsistent instrumentation: Not all services in a distributed system are instrumented for tracing.\n      \n\n\n        Ignoring latency: Only focusing on errors and not considering the latency or gradual performance degradations.\n      \n\nBenefits of establishing this best\n    practice:\n\n\nComprehensive system overview: Visualizing the entire path of requests, from entry to exit.\n\n\n        Enhanced debugging: Quickly identifying where failures or performance issues occur.\n      \n\n\n        Improved user experience: Monitoring and optimizing based on actual user data, ensuring the system meets real-world demands.\n      \n\nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n      Begin by identifying all of the elements of your workload that require instrumentation. Once all components are accounted for, leverage tools such as AWS X-Ray and OpenTelemetry to gather trace data for analysis with tools like X-Ray and Amazon CloudWatch ServiceLens Map. Engage in regular reviews with developers, and supplement these discussions with tools like Amazon DevOps\u00a0Guru, X-Ray Analytics and X-Ray Insights to help uncover deeper findings. Establish alerts from trace data to notify when outcomes, as defined in the workload monitoring plan, are at risk.\n    \nImplementation steps\n\n        To implement distributed tracing effectively:\n      \n\n\n\nAdopt AWS X-Ray: Integrate X-Ray into your application to gain insights into its behavior, understand its performance, and pinpoint bottlenecks. Utilize X-Ray Insights for automatic trace analysis.\n          \n\n\nInstrument your services: Verify that every service, from an AWS Lambda function to an EC2 instance, sends trace data. The more services you instrument, the clearer the end-to-end view.\n          \n\n\nIncorporate CloudWatch Real User Monitoring and synthetic monitoring: Integrate Real User Monitoring (RUM) and synthetic monitoring with X-Ray. This allows for capturing real-world user experiences and simulating user interactions to identify potential issues.\n          \n\n\nUse the CloudWatch agent: The agent can send traces from either X-Ray or OpenTelemetry, enhancing the depth of insights obtained.\n          \n\n\nUse Amazon DevOps\u00a0Guru: DevOps\u00a0Guru uses data from X-Ray, CloudWatch, AWS Config, and AWS CloudTrail to provide actionable recommendations.\n          \n\n\nAnalyze traces: Regularly review the trace data to discern patterns, anomalies, or bottlenecks that might impact your application's performance.\n          \n\n\nSet up alerts: Configure alarms in CloudWatch for unusual patterns or extended latencies, allowing proactive issue addressing.\n          \n\n\nContinuous improvement: Revisit your tracing strategy as services are added or modified to capture all relevant data points.\n          \n\n\nLevel of effort for the implementation plan: Medium\n    \nResources\n\nRelated best practices:\n\n\n\n\nOPS04-BP01 Identify key performance indicators\n\n\n\nOPS04-BP02 Implement application telemetry\n\n\n\nOPS04-BP03 Implement user experience telemetry\n\n\n\nOPS04-BP04 Implement dependency telemetry\n\n\n\nRelated documents:\n\n\n\nAWS X-Ray Developer Guide\n        \n\n\n          Amazon CloudWatch agent User Guide\n        \n\n\n          Amazon DevOps\u00a0Guru User Guide\n        \n\n\nRelated videos:\n\n\n\n\n          Use AWS X-Ray Insights\n        \n\nAWS on Air ft. Observability: Amazon CloudWatch and AWS X-Ray\n\n\nRelated examples:\n\n\n\n\n          Instrumenting your Application with AWS X-Ray\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsOPS04-BP04 Implement dependency telemetryDesign for operationsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_observability_dist_trace.html", "title": "OPS04-BP05 Implement distributed tracing - Operational Excellence Pillar", "description": "Distributed tracing offers a way to monitor and visualize requests as they traverse through various components of a distributed system. By capturing trace data from multiple sources and analyzing it in a unified view, teams can better understand how requests flow, where bottlenecks exist, and where optimization efforts should focus.", "language": "en-US"}}