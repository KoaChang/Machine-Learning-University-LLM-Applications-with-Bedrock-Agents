{"page_content": "After these changes have been implemented, run the experiment again (shown by the dotted line in the chaos engineering flywheel) \n              to determine their effectiveness. If the verify step indicates the hypothesis holds true, then the workload \n              will be in steady state, and the cycle continues.\n            \n\n\n\n          Run experiments regularly.\n        \n A chaos experiment is a cycle, and experiments should be run regularly as part of\n          chaos engineering. After a workload meets the experiment\u2019s hypothesis, the experiment\n          should be automated to run continually as a regression part of your CI/CD pipeline. To\n          learn how to do this, see this blog on how to run AWS FIS experiments using AWS CodePipeline. This lab on recurrent AWS FIS\n            experiments in a CI/CD pipeline allows you to work hands-on. \n Fault injection experiments are also a part of game days (see REL12-BP06 Conduct game days regularly). \n          Game days simulate a failure or event to verify systems, processes, and team responses. \n          The purpose is to actually perform the actions the team would perform as if an exceptional event happened.\n        \n\n\n          Capture and store experiment results.\n        \nResults for fault injection experiments must be captured and persisted. Include all\n          necessary data (such as time, workload, and conditions) to be able to later\n          analyze experiment results and trends. Examples of results might include screenshots of\n          dashboards, CSV dumps from your metric\u2019s database, or a hand-typed record of events and\n          observations from the experiment. Experiment logging with AWS FIS\n          can be part of this data capture.\n\nResources\n\nRelated best practices:\n\n\n\n\nREL08-BP03 Integrate resiliency testing as part of your\n  deployment\n\n\n\nREL13-BP03 Test disaster recovery implementation to validate\n  the implementation\n\n\n\nRelated documents:\n\n\n\n\nWhat\n            is AWS Fault Injection Service?\n\n\n\nWhat is AWS Resilience Hub?\n\n\n\nPrinciples\n          of Chaos Engineering\n\n\n\nChaos Engineering: Planning your first experiment\n\n\n\nResilience Engineering: Learning\n            to Embrace Failure\n\n\n\nChaos Engineering\n            stories\n\n\n\nAvoiding fallback\n            in distributed systems\n\n\n\nCanary Deployment for Chaos Experiments\n\n\n\nRelated videos:\n\n\n\nAWS re:Invent 2020:\n            Testing resiliency using chaos engineering (ARC316)\n\n\n\nAWS re:Invent\n          2019: Improving resiliency with chaos engineering\n          (DOP309-R1)\n\n\n\nAWS re:Invent 2019: Performing\n            chaos engineering in a serverless world (CMY301)\n\n\n\nRelated examples:\n\n\n\n\nWell-Architected\n          lab: Level 300: Testing for Resiliency of Amazon EC2, Amazon RDS, and\n          Amazon S3\n\n\n\nChaos Engineering on AWS\n            lab\n\n\n\nResilient and Well-Architected Apps with Chaos Engineering lab\n\n\n\nServerless Chaos lab\n\n\n\nMeasure and Improve Your Application Resilience with AWS Resilience Hub lab\n\n\n\n\n        Related tools:\n      \n\n\n\n\nAWS Fault Injection Service\n\n\nAWS Marketplace: Gremlin Chaos\n            Engineering Platform\n\n\n\nChaos Toolkit\n\n\n\nChaos Mesh\n\n\n\nLitmus\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL12-BP04 Test scaling and performance requirementsREL12-BP06 Conduct game days regularlyDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_testing_resiliency_failure_injection_resiliency.html", "title": "REL12-BP05 Test resiliency using chaos engineering - AWS Well-Architected Framework", "description": "Run chaos experiments regularly in environments that are in or as close to production as possible to understand how your system responds to adverse conditions.", "language": "en-US"}}