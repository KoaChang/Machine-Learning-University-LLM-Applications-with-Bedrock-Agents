{"page_content": "REL11-BP04 Rely on the data plane and not the control plane during recovery - AWS Well-Architected FrameworkREL11-BP04 Rely on the data plane and not the control plane during recovery - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesREL11-BP04 Rely on the data plane and not the control plane\n  during recovery\n    Control planes provide the administrative APIs used to create, read and describe, update, delete, and list (CRUDL) resources, while data planes handle day-to-day service traffic. When implementing recovery or mitigation responses to potentially resiliency-impacting events, focus on using a minimal number of control plane operations to recover, rescale, restore, heal, or failover the service. Data plane action should supersede any activity during these degradation events.\n  \n    For example, the following are all control plane actions: launching a new compute instance, creating block storage, and describing queue services. When you launch compute instances, the control plane has to perform multiple tasks like finding a physical host with capacity, allocating network interfaces, preparing local block storage volumes, generating credentials, and adding security rules. Control planes tend to be complicated orchestration.\n  \nDesired outcome: When a resource enters an impaired state, the system is capable of automatically or manually recovering by shifting traffic from impaired to healthy resources.\n  \nCommon anti-patterns:\n\n\n\n        Dependence on changing DNS records to re-route traffic.\n      \n\n\n        Dependence on control-plane scaling operations to replace impaired components due to insufficiently provisioned resources.\n      \n\n\n        Relying on extensive, multi service, multi-API control plane actions to remediate any category of impairment.\n      \n\nBenefits of establishing this best practice: Increased success rate for automated remediation can reduce your mean time to recovery and improve availability of the workload.\n  \nLevel of risk exposed if this best practice\n      is not established: Medium:  For certain types of service degradations, control planes are affected. Dependencies on extensive use of the control plane for remediation may increase recovery time (RTO) and mean time to recovery (MTTR).\n  \nImplementation guidance\n\n      To limit data plane actions, assess each service for what actions are required to restore service. \n    \n\n      Leverage Amazon Route\u00a053 Application Recovery Controller to shift the DNS traffic. These features continually monitor your application\u2019s ability to recover from failures and allow you to control your application recovery across multiple AWS Regions, Availability Zones, and on premises. \n    \n\n      Route\u00a053 routing policies use the control plane, so do not rely on it for recovery. The Route\u00a053 data planes answer DNS queries and perform and evaluate health checks. They are globally distributed and designed for a 100% availability service level agreement (SLA).\n    \n\n      The Route\u00a053 management APIs and consoles where you create, update, and delete Route\u00a053 resources run on control planes that are designed to prioritize the strong consistency and durability that you need when managing DNS. To achieve this, the control planes are located in a single Region: US East (N. Virginia). While both systems are built to be very reliable, the control planes are not included in the SLA. There could be rare events in which the data plane\u2019s resilient design allows it to maintain availability while the control planes do not. For disaster recovery and failover mechanisms, use data plane functions to provide the best possible reliability. \n    \n\n      For Amazon EC2, use static stability designs to limit control plane actions. Control plane actions include the scaling up of resources individually or using Auto Scaling groups (ASG). For the highest levels of resilience, provision sufficient capacity in the cluster used for failover. If this capacity threshold must be limited, set throttles on the overall end-to-end system to safely limit the total traffic reaching the limited set of resources.\n    \n\n      For services like Amazon DynamoDB, Amazon API Gateway, load balancers, and AWS Lambda serverless, using those services leverages the data plane. However, creating new functions, load balancers, API gateways, or DynamoDB tables is a control plane action and should be completed before the degradation as preparation for an event and rehearsal of failover actions. For Amazon RDS, data plane actions allow for access to data.\n    \n\n      For more information about data planes, control planes, and how AWS builds services to meet high availability targets, see Static stability using Availability Zones.\n    \n\n      Understand which operations are on the data plane and which are on the control plane. \n    \nImplementation steps\n\n        For each workload that needs to be restored after a degradation event, evaluate the failover runbook, high availability design, auto healing design, or HA resource restoration plan. Identity each action that might be considered a control plane action.\n      \n\n      Consider changing the control action to a data plane action:\n    \n\n\n\n          Auto Scaling (control plane) compared to pre-scaled Amazon EC2 resources (data plane)\n        \n\n\n          Migrate to Lambda and its scaling methods (data plane) or Amazon EC2 and ASG (control plane)\n        \n\n\n          Assess any designs using Kubernetes and the nature of the control plane actions. Adding pods is a data plane action in Kubernetes. Actions should be limited to adding pods and not adding nodes. Using over-provisioned nodes is the preferred method to limit control plane actions\n        \n\n\n      Consider alternate approaches that allow for data plane actions to affect the same remediation.\n    \n\n\n\n          Route\u00a053 Record change (control plane) or Route 53 ARC (data plane)\n        \n\n\n          Route\u00a053 Health checks for more automated updates\n        \n\n\n      Consider some services in a secondary Region, if the service is mission critical, to allow for more control plane and data plane actions in an unaffected Region.\n    \n\n\n\n          Amazon EC2 Auto Scaling or Amazon EKS in a primary Region compared to Amazon EC2 Auto Scaling or Amazon EKS in a secondary Region and routing traffic to secondary Region (control plane action)\n        \n\n\n          Make read replica in secondary primary or attempting same action in primary Region (control plane action)\n        \n\nResources\n\nRelated best practices:\n\n\n\n\nAvailability\n            Definition\n\n\n\nREL11-BP01\n            Monitor all components of the workload to detect\n            failures\n\n\n\nRelated documents:\n\n\n\n\nAPN\n          Partner: partners that can help with automation of your fault\n          tolerance\n\n\n\nAWS Marketplace: products that can be used for fault\n          tolerance\n\n\n\nAmazon\n          Builders' Library: Avoiding overload in distributed systems by\n          putting the smaller service in control\n\n\n\nAmazon DynamoDB API (control plane and data plane)\n\n\n\nAWS Lambda Executions (split into the control plane and the data plane)\n        \n\n\nAWS Elemental MediaStore Data Plane\n\n\n\nBuilding\n          highly resilient applications using Amazon Route\u00a053 Application Recovery Controller, Part 1: Single-Region stack\n\n\n\nBuilding\n          highly resilient applications using Amazon Route\u00a053 Application Recovery Controller, Part 2: Multi-Region\n          stack\n\n\n\nCreating\n          Disaster Recovery Mechanisms Using Amazon Route\u00a053\n\n\n\nWhat\n          is Route\u00a053 Application Recovery Controller\n\n\n\n          Kubernetes Control Plane and data plane\n        \n\n\nRelated videos:\n\n\n\n\n          Back to Basics - Using Static Stability\n        \n\n\n          Building resilient multi-site workloads using AWS global services\n        \n\n\nRelated examples:\n\n\n\n\nIntroducing\n          Amazon Route\u00a053 Application Recovery Controller\n\n\n\n          Amazon Builders' Library: Avoiding overload in distributed systems by putting the smaller service in control\n        \n\n\n          Building highly resilient applications using Amazon Route\u00a053 Application Recovery Controller, Part 1: Single-Region stack\n        \n\n\n          Building highly resilient applications using Amazon Route\u00a053 Application Recovery Controller, Part 2: Multi-Region stack\n        \n\n\n          Static stability using Availability Zones\n        \n\n\nRelated tools:\n\n\n\n\n          Amazon CloudWatch\n        \n\nAWS X-Ray\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL11-BP03 Automate healing on all layersREL11-BP05 Use static stability to prevent bimodal\n  behaviorDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_withstand_component_failures_avoid_control_plane.html", "title": "REL11-BP04 Rely on the data plane and not the control plane during recovery - AWS Well-Architected Framework", "description": "Control planes provide the administrative APIs used to create, read and describe, update, delete, and list (CRUDL) resources, while data planes handle day-to-day service traffic. When implementing recovery or mitigation responses to potentially resiliency-impacting events, focus on using a minimal number of control plane operations to recover, rescale, restore, heal, or failover the service. Data plane action should supersede any activity during these degradation events.", "language": "en-US"}}