{"page_content": "REL06-BP01 Monitor all components for the workload (Generation) - AWS Well-Architected FrameworkREL06-BP01 Monitor all components for the workload (Generation) - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesREL06-BP01 Monitor all components for the workload\n  (Generation)\n    Monitor the components of the workload with Amazon CloudWatch or\n    third-party tools. Monitor AWS services with AWS Health Dashboard.\n  \n    All components of your workload should be monitored, including the\n    front-end, business logic, and storage tiers. Define key metrics,\n    describe how to extract them from logs (if necessary), and set\n    thresholds for invoking corresponding alarm events. Ensure metrics\n    are relevant to the key performance indicators (KPIs) of your\n    workload, and use metrics and logs to identify early warning signs\n    of service degradation. For example, a metric related to business\n    outcomes such as the number of orders successfully processed per\n    minute, can indicate workload issues faster than technical metric,\n    such as CPU Utilization. Use AWS Health Dashboard for a personalized\n    view into the performance and availability of the AWS services\n    underlying your AWS resources.\n  \n    Monitoring in the cloud offers new opportunities. Most cloud\n    providers have developed customizable hooks and can deliver insights\n    to help you monitor multiple layers of your workload. AWS services\n    such as Amazon CloudWatch apply statistical and machine learning\n    algorithms to continually analyze metrics of systems and\n    applications, determine normal baselines, and surface anomalies with\n    minimal user intervention. Anomaly detection algorithms account for\n    the seasonality and trend changes of metrics.\n  \n    AWS makes an abundance of monitoring and log information available\n    for consumption that can be used to define workload-specific\n    metrics, change-in-demand processes, and adopt machine learning\n    techniques regardless of ML expertise.\n  \n    In addition, monitor all of your external endpoints to ensure that\n    they are independent of your base implementation. This active\n    monitoring can be done with synthetic transactions (sometimes\n    referred to as user canaries, but not to be\n    confused with canary deployments) which periodically run a number of\n    common tasks matching actions performed by clients of the workload.\n    Keep these tasks short in duration and be sure not to overload your\n    workload during testing. Amazon CloudWatch Synthetics allows you\n    to\u00a0create\n    synthetic canaries\u00a0to monitor your endpoints and APIs. You\n    can also combine the synthetic canary client nodes with AWS X-Ray\n    console to pinpoint which synthetic canaries are experiencing issues\n    with errors, faults, or throttling rates for the selected time\n    frame.\n  \nDesired Outcome:\n\n    Collect and use critical metrics from all components of the workload\n    to ensure workload reliability and optimal user experience.\n    Detecting that a workload is not achieving business outcomes allows\n    you to quickly declare a disaster and recover from an incident.\n  \nCommon anti-patterns:\n\n\n\n        Only monitoring external interfaces to your workload.\n      \n\n\n        Not generating any workload-specific metrics and only relying on\n        metrics provided to you by the AWS services your workload uses.\n      \n\n\n        Only using technical metrics in your workload and not monitoring\n        any metrics related to non-technical KPIs the workload\n        contributes to.\n      \n\n\n        Relying on production traffic and simple health checks to\n        monitor and evaluate workload state.\n      \n\nBenefits of establishing this best\n    practice: Monitoring at all tiers in your workload\n    allows you to more rapidly anticipate and resolve problems in the\n    components that comprise the workload.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\n\n\nTurn on logging where\n          available. Monitoring data should be obtained from\n          all components of the workloads. Turn on additional logging,\n          such as S3 Access Logs, and permit your workload to log\n          workload specific data. Collect metrics for CPU, network I/O,\n          and disk I/O averages from services such as Amazon ECS, Amazon EKS, Amazon EC2, Elastic Load Balancing, AWS Auto Scaling, and\n          Amazon EMR. See\n          AWS           Services That Publish CloudWatch Metrics for a list of\n          AWS services that publish metrics to CloudWatch.\n        \n\n\nReview all default metrics and explore\n          any data collection gaps. Every service generates\n          default metrics. Collecting default metrics allows you to\n          better understand the dependencies between workload\n          components, and how component reliability and performance\n          affect the workload. You can also create and\n          publish\n          your own metrics to CloudWatch using the AWS CLI or an\n          API.\n        \n\n\nEvaluate all the metrics to decide\n          which ones to alert on for each AWS service in your\n          workload. You may choose to select a subset of\n          metrics that have a major impact on workload reliability.\n          Focusing on critical metrics and threshold allows you to\n          refine the number of\n          alerts\n          and can help minimize false-positives.\n        \n\n\nDefine alerts and the recovery process\n          for your workload after the alert is invoked.\n          Defining alerts allows you to quickly notify, escalate, and\n          follow steps necessary to recover from an incident and meet\n          your prescribed Recovery Time Objective (RTO). You can use\n          Amazon CloudWatch Alarms to invoke automated\n          workflows and initiate recovery procedures based on defined\n          thresholds.\n        \n\n\nExplore use of synthetic transactions\n          to collect relevant data about workloads state.\n          Synthetic monitoring follows the same routes and perform the\n          same actions as a customer, which makes it possible for you to\n          continually verify your customer experience even when you\n          don't have any customer traffic on your workloads. By using\n          synthetic\n          transactions, you can discover issues before your\n          customers do.\n        \n\nResources\n\nRelated best practices:\n\n\nREL11-BP03 Automate healing on all layers\n\nRelated documents:\n\n\n\n\nGetting\n          started with your AWS Health Dashboard \u2013 Your account\n          health\n\n\n\nAWS           Services That Publish CloudWatch Metrics\n\n\n\nAccess\n          Logs for Your Network Load Balancer\n\n\n\nAccess\n          logs for your application load balancer\n\n\n\nAccessing\n          Amazon CloudWatch Logs for AWS Lambda\n\n\n\nAmazon S3 Server Access Logging\n\n\n\nEnable\n          Access Logs for Your Classic Load Balancer\n\n\n\nExporting\n          log data to Amazon S3\n\n\n\nInstall\n          the CloudWatch agent on an Amazon EC2 instance\n\n\n\nPublishing\n          Custom Metrics\n\n\n\nUsing\n          Amazon CloudWatch Dashboards\n\n\n\nUsing\n          Amazon CloudWatch Metrics\n\n\n\nUsing\n          Canaries (Amazon CloudWatch Synthetics)\n\n\n\nWhat\n          are Amazon CloudWatch Logs?\n\n\nUser guides:\n\n\n\nCreating\n          a trail\n\n\n\nMonitoring\n          memory and disk metrics for Amazon EC2 Linux instances\n\n\n\nUsing\n          CloudWatch Logs with container instances\n\n\n\nVPC\n          Flow Logs\n\n\n\nWhat\n          is Amazon DevOps\u00a0Guru?\n\n\n\nWhat\n          is AWS X-Ray?\n\n\n\nRelated blogs:\n\n\n\n\nDebugging\n          with Amazon CloudWatch Synthetics and AWS X-Ray\n\n\n\nRelated examples and workshops:\n\n\n\n\nAWS           Well-Architected Labs: Operational Excellence - Dependency\n          Monitoring\n\n\n\nThe\n          Amazon Builders' Library: Instrumenting distributed systems\n          for operational visibility\n\n\n\nObservability\n          workshop\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document Conventions REL 6. How do you monitor workload resources? REL06-BP02 Define and calculate metrics (Aggregation)Did this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_monitor_aws_resources_monitor_resources.html", "title": "REL06-BP01 Monitor all components for the workload (Generation) - AWS Well-Architected Framework", "description": "Monitor the components of the workload with Amazon CloudWatch or third-party tools. Monitor AWS services with AWS Health Dashboard.", "language": "en-US"}}