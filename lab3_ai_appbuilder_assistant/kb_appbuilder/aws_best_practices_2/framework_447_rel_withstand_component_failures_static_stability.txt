{"page_content": "REL11-BP05 Use static stability to prevent bimodal behavior - AWS Well-Architected FrameworkREL11-BP05 Use static stability to prevent bimodal behavior - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidance Resources REL11-BP05 Use static stability to prevent bimodal\n  behavior\n    Workloads should be statically stable and only operate in a single\n    normal mode. Bimodal behavior is when your workload exhibits\n    different behavior under normal and failure modes.\n  \n    For example, you might try and recover from an Availability Zone\n    failure by launching new instances in a different Availability Zone.\n    This can result in a bimodal response during a failure mode. You\n    should instead build workloads that are statically stable and\n    operate within only one mode. In this example, those instances\n    should have been provisioned in the second Availability Zone before\n    the failure. This static stability design verifies that the workload\n    only operates in a single mode.\n  \nDesired outcome: Workloads do not exhibit bimodal behavior during normal and failure\n    modes.\n  \nCommon anti-patterns:\n\n\n\n        Assuming resources can always be provisioned regardless of the\n        failure scope.\n      \n\n\n        Trying to dynamically acquire resources during a failure.\n      \n\n\n        Not provisioning adequate resources across zones or Regions until a\n        failure occurs.\n      \n\n\n        Considering static stable designs for compute resources only.\n      \n\nBenefits of establishing this best\n      practice: Workloads running with statically stable designs are capable of\n    having predictable outcomes during normal and failure events.\n  \nLevel of risk exposed if this best practice\n      is not established: Medium\n  \nImplementation guidance \n\n      Bimodal behavior occurs when your workload exhibits different\n      behavior under normal and failure modes (for example, relying on\n      launching new instances if an Availability Zone fails). An example\n      of bimodal behavior is when stable Amazon EC2 designs provision enough\n      instances in each Availability Zone to handle the workload load if\n      one AZ were removed. Elastic Load Balancing or Amazon Route\u00a053\n      health would check to shift a load away from the impaired\n      instances. After traffic has shifted, use AWS Auto Scaling to\n      asynchronously replace instances from the failed zone and launch\n      them in the healthy zones. Static stability for compute deployment\n      (such as EC2 instances or containers) results in the highest\n      reliability.\n    \n\n\nStatic stability of EC2 instances across\n        Availability Zones\n\n\n      This must be weighed against the cost for this model and the\n      business value of maintaining the workload under all resilience\n      cases. It's less expensive to provision less compute capacity and\n      rely on launching new instances in the case of a failure, but for\n      large-scale failures (such as an Availability Zone or Regional\n      impairment), this approach is less effective because it relies on\n      both an operational plane, and sufficient resources being\n      available in the unaffected zones or Regions.\n    \n\n      Your solution should also weigh reliability against the costs\n      needs for your workload. Static stability architectures apply to a\n      variety of architectures including compute instances spread across\n      Availability Zones, database read replica designs, Kubernetes\n      (Amazon EKS) cluster designs, and multi-Region failover architectures.\n    \n\n      It is also possible to implement a more statically stable design\n      by using more resources in each zone. By adding more zones, you\n      reduce the amount of additional compute you need for static\n      stability.\n    \n\n      An example of bimodal behavior would be a network timeout that\n      could cause a system to attempt to refresh the configuration state\n      of the entire system. This would add an unexpected load to another\n      component and might cause it to fail, resulting in other\n      unexpected consequences. This negative feedback loop impacts the\n      availability of your workload. Instead, you can build systems that\n      are statically stable and operate in only one mode. A statically\n      stable design would do\u00a0constant work and always refresh the\n      configuration state on a fixed cadence. When a call fails, the\n      workload would use the previously cached value and initiate an\n      alarm.\n    \n\n      Another example of bimodal behavior is allowing clients to bypass\n      your workload cache when failures occur. This might seem to be a\n      solution that accommodates client needs but it can significantly\n      change the demands on your workload and is likely to result in\n      failures.\n    \n\n      Assess critical workloads to determine what workloads require\n      this type of resilience design. For those that are deemed\n      critical, each application component must be reviewed. Example\n      types of services that require static stability evaluations are:\n    \n\n\n\nCompute: Amazon EC2, EKS-EC2,\n          ECS-EC2, EMR-EC2\n        \n\n\nDatabases: Amazon Redshift, Amazon RDS,\n          Amazon Aurora\n        \n\n\nStorage: Amazon S3 (Single Zone),\n          Amazon EFS (mounts), Amazon FSx (mounts)\n        \n\n\nLoad balancers: Under certain\n          designs\n        \n\nImplementation steps \n\n\n\n            Build systems that are statically stable and operate in\n            only one mode. In this case, provision enough instances in\n            each Availability Zone or Region to handle the workload\n            capacity if one Availability Zone or Region were removed.\n            A variety of services can be used for routing to healthy\n            resources, such as:\n          \n\n\n\nCross\n                  Region DNS Routing\n\n\n\nMRAP\n                  Amazon S3 MultiRegion Routing\n\n\n\nAWS Global Accelerator\n\n\n\nAmazon Route\u00a053 Application Recovery Controller\n\n\n\n\n            Configure\n            database\n              read replicas to account for the loss of a single\n            primary instance or a read replica. If traffic is being\n            served by read replicas, the quantity in each Availability\n            Zone and each Region should equate to the overall need in\n            case of the zone or Region failure.\n          \n\n\n            Configure critical data in Amazon S3 storage that is designed to\n            be statically stable for data stored in case of an\n            Availability Zone failure. If\n            Amazon S3\n              One Zone-IA storage class is used, this should not\n            be considered statically stable, as the loss of that zone\n            minimizes access to this stored data.\n          \n\n\nLoad\n              balancers are sometimes configured incorrectly or\n            by design to service a specific Availability Zone. In this\n            case, the statically stable design might be to spread a\n            workload across multiple AZs in a more complex design. The\n            original design may be used to reduce interzone traffic\n            for security, latency, or cost reasons.\n          \n\nResources \n\nRelated Well-Architected best\n        practices:\n\n\n\n\nAvailability\n            Definition\n\n\n\nREL11-BP01\n            Monitor all components of the workload to detect\n            failures\n\n\n\nREL11-BP04\n            Rely on the data plane and not the control plane during\n            recovery\n\n\n\nRelated documents:\n\n\n\n\nMinimizing\n            Dependencies in a Disaster Recovery Plan\n\n\n\nThe\n            Amazon Builders' Library: Static stability using Availability\n            Zones\n\n\n\nFault\n            Isolation Boundaries\n\n\n\nStatic\n            stability using Availability Zones\n\n\n\nMulti-Zone RDS\n\n\n\nMinimizing\n            Dependencies in a Disaster Recovery Plan\n\n\n\nCross\n            Region DNS Routing\n\n\n\nMRAP\n            Amazon S3 MultiRegion Routing\n\n\n\nAWS Global Accelerator\n\n\n\nRoute 53 ARC\n\n\n\nSingle\n            Zone Amazon S3\n\n\n\nCross\n            Zone Load Balancing\n\n\n\nRelated videos:\n\n\n\n\nStatic\n            stability in AWS: AWS re:Invent 2019: Introducing The Amazon\n            Builders' Library (DOP328)\n\n\n\nRelated examples:\n\n\n\n\nThe\n            Amazon Builders' Library: Static stability using Availability\n            Zones\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL11-BP04 Rely on the data plane and not the control plane\n  during recoveryREL11-BP06 Send notifications when events impact\n  availabilityDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_withstand_component_failures_static_stability.html", "title": "REL11-BP05 Use static stability to prevent bimodal behavior - AWS Well-Architected Framework", "description": "Workloads should be statically stable and only operate in a single normal mode. Bimodal behavior is when your workload exhibits different behavior under normal and failure modes.", "language": "en-US"}}