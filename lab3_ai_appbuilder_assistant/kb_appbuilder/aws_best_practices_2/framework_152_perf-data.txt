{"page_content": "Data management - AWS Well-Architected FrameworkData management - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkData management\n            The optimal data management solution for a particular system varies\n            based on the kind of data type (block, file, or object), access\n            patterns (random or sequential), required throughput, frequency of\n            access (online, offline, archival), frequency of update (WORM,\n            dynamic), and availability and durability constraints.\n            Well-Architected workloads use purpose-built data stores which allow\n            different features to improve performance.\n           In AWS, storage is available in three forms: object, block, and file: \n\n\nObject storage provides a scalable, durable\n                platform to make data accessible from any internet location for user-generated\n                content, active archive, serverless computing, Big Data storage or backup and\n                recovery. Amazon Simple Storage Service (Amazon S3) is an object storage service that\n                offers industry-leading scalability, data availability, security, and performance.\n                Amazon S3 is designed for 99.999999999% (11 9's) of durability, and stores data for\n                millions of applications for companies all around the world. \n\n\nBlock storage provides highly available,\n                consistent, low-latency block storage for each virtual host and is analogous to\n                direct-attached storage (DAS) or a Storage Area Network (SAN). Amazon Elastic Block Store (Amazon EBS) is\n                designed for workloads that require persistent storage accessible by EC2 instances\n                that helps you tune applications with the right storage capacity, performance and\n                cost. \n\n\nFile storage provides access to a shared file system\n              across multiple systems. File storage solutions like Amazon Elastic File System (Amazon EFS) are ideal for use\n              cases such as large content repositories, development environments, media stores, or\n              user home directories. Amazon FSx makes it efficient and cost effective to launch and run\n              popular file systems so you can leverage the rich feature sets and fast performance of\n              widely used open source and commercially-licensed file systems. \n The following question focuses on these considerations for performance efficiency. \n\nPERF 3:\u00c2\u00a0 How do you store, manage, and access data in your workload?\n\n\n\n The more efficient storage solution for a system varies based on the kind of\n                    access operation (block, file, or object), patterns of access (random or\n                    sequential), required throughput, frequency of access (online, offline,\n                    archival), frequency of update (WORM, dynamic), and availability and durability\n                    constraints. Well-architected systems use multiple storage solutions and turn on\n                    different features to improve performance and use resources efficiently.\n                  \n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsCompute and hardwareNetworking and content deliveryDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/perf-data.html", "title": "Data management - AWS Well-Architected Framework", "description": "The optimal data management solution for a particular system varies based on the kind of data type (block, file, or object), access patterns (random or sequential), required throughput, frequency of access (online, offline, archival), frequency of update (WORM, dynamic), and availability and durability constraints. Well-Architected workloads use purpose-built data stores which allow different features to improve performance.", "language": "en-US"}}