{"page_content": "REL03-BP01 Choose how to segment your workload - Reliability PillarREL03-BP01 Choose how to segment your workload - Reliability PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceImplementation stepsResourcesREL03-BP01 Choose how to segment your workload\n    Workload segmentation is important when determining the resilience requirements of your application. \n    Monolithic architecture should be avoided whenever possible. Instead, carefully consider which \n    application components can be broken out into microservices. Depending on your application requirements, \n    this may end up being a combination of a service-oriented architecture (SOA) with microservices where \n    possible. Workloads that are capable of statelessness are more capable of being deployed as microservices.\n  \nDesired outcome: Workloads should be supportable, scalable, and as \n    loosely coupled as possible. \n  \n    When making choices about how to segment your workload, balance the benefits against the complexities. \n    What is right for a new product racing to first launch is different than what a workload built to scale \n    from the start needs. When refactoring an existing monolith, you will need to consider how well the application \n    will support a decomposition towards statelessness. Breaking services into smaller pieces allows small, \n    well-defined teams to develop and manage them. However, smaller services can introduce complexities which \n    include possible increased latency, more complex debugging, and increased operational burden.\n  \nCommon anti-patterns:\n\n\n The microservice Death Star is a situation in\n        which the atomic components become so highly interdependent that a failure of one results in\n        a much larger failure, making the components as rigid and fragile as a monolith. \n\nBenefits of establishing this practice:\n\n\n\n        More specific segments lead to greater agility, organizational flexibility, and scalability.\n      \n\n\n        Reduced impact of service interruptions.\n      \n\n\n        Application components may have different availability requirements, which can be supported by a more atomic segmentation.\n      \n\n\n        Well-defined responsibilities for teams supporting the workload.\n      \n\nLevel of risk exposed if this best practice\n      is not established: High\n  \nImplementation guidance\n\n    Choose your architecture type based on how you will segment your workload. Choose an SOA \n    or microservices architecture (or in some rare cases, a monolithic architecture). Even if you choose to start with a \n    monolith architecture, you must ensure that it\u2019s modular and can ultimately evolve to SOA or microservices as your \n    product scales with user adoption. SOA and microservices offer respectively smaller segmentation, which is preferred as a \n    modern scalable and reliable architecture, but there are trade-offs to consider, especially when deploying a microservice \n    architecture.\n  \n\n    One primary trade-off is that you now have a distributed compute architecture that can make it harder to achieve user \n    latency requirements and there is additional complexity in the debugging and tracing of user interactions. You can use \n    AWS X-Ray to assist you in solving this problem. Another effect to consider is increased operational complexity as you \n    increase the number of applications that you are managing, which requires the deployment of multiple independency \n    components.\n  \n\n\nMonolithic, service-oriented, and microservices architectures\n\nImplementation steps\n\n\n\n        Determine the appropriate architecture to refactor or build your application.\n        SOA and microservices offer respectively smaller segmentation, which is \n        preferred as a modern scalable and reliable architecture. SOA can be a \n        good compromise for achieving smaller segmentation while avoiding some of \n        the complexities of microservices. For more details, see Microservice Trade-Offs.      \n        \n\n \n          If your workload is amenable to it, and your organization can support it, you \n          should use a microservices architecture to achieve the best agility and reliability.\n          For more details, see Implementing\n            Microservices on AWS.\n\n\n Consider following the Strangler Fig pattern to refactor a monolith into\n          smaller components. This involves gradually replacing specific application components with\n          new applications and services. AWS Migration Hub Refactor Spaces acts as the starting point for incremental refactoring. For\n          more details, see Seamlessly migrate on-premises legacy workloads using a strangler pattern. \n\n Implementing microservices may require a service discovery mechanism to allow these\n          distributed services to communicate with each other. AWS App Mesh can be used\n          with service-oriented architectures to provide reliable discovery and access of services.\n            AWS Cloud Map can also be used for dynamic, DNS-based\n          service discovery. \n\n If you\u2019re migrating from a monolith to SOA, Amazon MQ can help bridge\n          the gap as a service bus when redesigning legacy applications in the cloud.\n\n For existing monoliths with a single, shared database, choose how to reorganize the\n          data into smaller segments. This could be by business unit, access pattern, or data\n          structure. At this point in the refactoring process, you should choose to move forward\n          with a relational or non-relational (NoSQL) type of database. For more details, see From SQL to NoSQL. \n\n\nLevel of effort for the implementation plan: High\n    \nResources\n\nRelated best practices:\n\n\n\n\nREL03-BP02 Build services focused on specific business domains\n  and functionality\n\n\n\nRelated documents:\n\n\n\n\nAmazon API Gateway: Configuring a REST API Using OpenAPI\n\n\n\nWhat is Service-Oriented\n            Architecture?\n\n\n\nBounded\n          Context (a central pattern in Domain-Driven Design)\n\n\n\nImplementing\n          Microservices on AWS\n\n\n\nMicroservice\n          Trade-Offs\n\n\n\nMicroservices\n          - a definition of this new architectural term\n\n\n\nMicroservices\n          on AWS\n\n\n\nWhat\n          is AWS App Mesh?\n\n\n\nRelated examples:\n\n\n\n\nIterative App Modernization Workshop\n\n\n\nRelated videos:\n\n\n\n\nDelivering Excellence with\n            Microservices on AWS\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsDesign your workload service architectureREL03-BP02 Build services focused on specific business domains\n  and functionalityDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_service_architecture_monolith_soa_microservice.html", "title": "REL03-BP01 Choose how to segment your workload - Reliability Pillar", "description": "Workload segmentation is important when determining the resilience requirements of your application.", "language": "en-US"}}