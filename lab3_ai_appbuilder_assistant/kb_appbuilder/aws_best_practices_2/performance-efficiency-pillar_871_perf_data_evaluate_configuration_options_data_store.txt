{"page_content": "PERF03-BP02 Evaluate available configuration options for data store - Performance Efficiency PillarPERF03-BP02 Evaluate available configuration options for data store - Performance Efficiency PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesPERF03-BP02 Evaluate available configuration options for data\n  store\n    Understand and evaluate the various features and configuration\n    options available for your data stores to optimize storage space and\n    performance for your workload.\n  \nCommon anti-patterns:\n\n\n\n        You only use one storage type, such as Amazon EBS, for all\n        workloads.\n      \n\n\n        You use provisioned IOPS for all workloads without real-world\n        testing against all storage tiers.\n      \n\n\n        You are not aware of the configuration options of your chosen\n        data management solution.\n      \n\n\n        You rely solely on increasing instance size without looking at\n        other available configuration options.\n      \n\n\n        You are not testing the scaling characteristics of your data\n        store.\n      \n\nBenefits of establishing this best\n    practice: By exploring and experimenting with the data\n    store configurations, you may be able to reduce the cost of\n    infrastructure, improve performance, and lower the effort required\n    to maintain your workloads.\n  \nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      A workload could have one or more data stores used based on data\n      storage and access requirements. To optimize your performance\n      efficiency and cost, you must evaluate data access patterns to\n      determine the appropriate data store configurations. While you\n      explore data store options, take into consideration various\n      aspects such as the storage options, memory, compute, read\n      replica, consistency requirements, connection pooling, and caching\n      options. Experiment with these various configuration options to\n      improve performance efficiency metrics.\n    \nImplementation steps\n\n\n\n            Understand the current configurations (like instance type,\n            storage size, or database engine version) of your data\n            store.\n          \n\n\n            Review AWS documentation and best practices to learn about\n            recommended configuration options that can help improve the\n            performance of your data store. Key data store options to\n            consider are the following:\n          \n\n\n\n                    Configuration option\n                  \n\n                    Examples\n                  \n\n\n\n\n                    Offloading reads (like read replicas and caching)\n                  \n\n\n\n\n                          For DynamoDB tables, you can offload reads using\n                          DAX for caching.\n                        \n\n\n                          You can create an Amazon ElastiCache for Redis cluster\n                          and configure your application to read from the\n                          cache first, falling back to the database if the\n                          requested item is not present.\n                        \n\n\n                          Relational databases such as Amazon RDS and\n                          Aurora, and provisioned NoSQL databases such as\n                          Neptune and Amazon DocumentDB all support adding\n                          read replicas to offload the read portions of the\n                          workload.\n                        \n\n\n                          Serverless databases such as DynamoDB will scale\n                          automatically. Ensure that you have enough read\n                          capacity units (RCU) provisioned to handle the\n                          workload.\n                        \n\n\n\n\n\n                    Scaling writes (like partition key sharding or\n                    introducing a queue)\n                  \n\n\n\n\n                          For relational databases, you can increase the\n                          size of the instance to accommodate an increased\n                          workload or increase the provisioned IOPs to allow\n                          for an increased throughput to the underlying\n                          storage.\n                        \n\n\n                          You can also introduce a queue in front of your\n                          database rather than writing directly to the\n                          database. This pattern allows you to decouple the\n                          ingestion from the database and control the\n                          flow-rate so the database does not get\n                          overwhelmed.\u00a0\n                        \n\n\n                          Batching your write requests rather than creating\n                          many short-lived transactions can help improve\n                          throughput in high-write volume relational\n                          databases.\n                        \n\n\n                          Serverless databases like DynamoDB can scale the\n                          write throughput automatically or by adjusting the\n                          provisioned write capacity units (WCU) depending\n                          on the capacity mode.\u00a0\n                        \n\n\n                          You can still run into issues with hot partitions\n                          when you reach the throughput limits for a given\n                          partition key. This can be mitigated by choosing a\n                          more evenly distributed partition key or by\n                          write-sharding the partition key.\u00a0\n                        \n\n\n\n\n\n                    Policies to manage the lifecycle of your datasets\n                  \n\n\n\n\n                          You can\n                          use\u00a0Amazon S3 Lifecycle\u00a0to manage your objects\n                          throughout their lifecycle. If your access\n                          patterns are unknown, changing, or unpredictable,\n                          you can\n                          use\u00a0Amazon S3 Intelligent-Tiering, which monitors\n                          access patterns and automatically moves objects\n                          that have not been accessed to lower-cost access\n                          tiers. You can\n                          leverage\u00a0Amazon S3 Storage Lens\u00a0metrics to identify\n                          optimization opportunities and gaps in lifecycle\n                          management.\n                        \n\n\nAmazon EFS lifecycle management\u00a0automatically\n                          manages file storage for your file systems.\n                        \n\n\n\n\n\n                    Connection management and pooling\n                  \n\n\n\n\n                          Amazon RDS Proxy can be used with Amazon RDS and Aurora\n                          to manage connections to the database.\u00a0\n                        \n\n\n                          Serverless databases such as DynamoDB do not have\n                          connections associated with them, but consider the\n                          provisioned capacity and automatic scaling\n                          policies to deal with spikes in load.\n                        \n\n\n\n\n\n\n            Perform experiments and benchmarking in non-production\n            environment to identify which configuration option can\n            address your workload requirements.\n          \n\n\n            Once you have experimented, plan your migration and validate\n            your performance metrics.\n          \n\n\n            Use AWS monitoring (like Amazon CloudWatch) and optimization\n            (like Amazon S3 Storage Lens) tools to continuously optimize your\n            data store using real-world usage pattern.\n          \n\nResources\n\nRelated documents:\n\n\n\n\nCloud\n          Storage with AWS\n\n\n\nAmazon EBS Volume Types\n\n\n\nAmazon EC2 Storage\n\n\n\nAmazon EFS: Amazon EFS Performance\n\n\n\nAmazon FSx for Lustre Performance\n\n\n\nAmazon FSx for Windows File Server Performance\n\n\n\nAmazon S3 Glacier: S3 Glacier Documentation\n\n\n\nAmazon S3: Request Rate and Performance Considerations\n\n\n\nCloud\n          Storage with AWS\n\n\n\nCloud\n          Storage with AWS\n\n\n\nAmazon EBS\n          I/O Characteristics\n\n\n\nCloud\n          Databases with AWS\u00a0\n\n\n\nAWS           Database Caching\u00a0\n\n\n\nDynamoDB Accelerator\n\n\n\nAmazon Aurora best practices\u00a0\n\n\n\nAmazon Redshift performance\u00a0\n\n\n\nAmazon Athena top 10 performance tips\u00a0\n\n\n\nAmazon Redshift Spectrum best practices\u00a0\n\n\n\nAmazon DynamoDB best practices\n\n\n\nRelated videos:\n\n\n\n\nDeep\n            dive on Amazon EBS\n\n\n\nOptimize\n            your storage performance with Amazon S3\n\n\nModernize apps with purpose-built databases\n\n\n          Amazon Aurora storage demystified: How it all works\n        \n\n\n          Amazon DynamoDB deep dive: Advanced design patterns\n        \n\n\nRelated examples:\n\n\n\n\nAmazon EFS CSI Driver\n\n\n\nAmazon EBS CSI Driver\n\n\n\nAmazon EFS\n          Utilities\n\n\n\nAmazon EBS Autoscale\n\n\n\nAmazon S3 Examples\n\n\n\nAmazon DynamoDB Examples\n\n\n\nAWS           Database migration samples\n\n\n\nDatabase\n          Modernization Workshop\n\n\n\nWorking\n          with parameters on your Amazon RDS for Postgress DB\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsPERF03-BP01 Use a purpose-built data store that best supports your\n  data access and storage requirementsPERF03-BP03 Collect and record data store performance\n  metricsDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/perf_data_evaluate_configuration_options_data_store.html", "title": "PERF03-BP02 Evaluate available configuration options for data store - Performance Efficiency Pillar", "description": "Understand and evaluate the various features and configuration options available for your data stores to optimize storage space and performance for your workload.", "language": "en-US"}}