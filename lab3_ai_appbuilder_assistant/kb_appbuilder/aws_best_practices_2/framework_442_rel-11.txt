{"page_content": "REL 11. How do you design your workload to withstand component failures? - AWS Well-Architected FrameworkREL 11. How do you design your workload to withstand component failures? - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkREL 11. How do you design your workload to withstand component\n                  failures?Workloads with a requirement for high availability and low mean time to recovery (MTTR) must be architected for resiliency.Best practicesREL11-BP01 Monitor all components of the workload to detect\n  failuresREL11-BP02 Fail over to healthy resourcesREL11-BP03 Automate healing on all layersREL11-BP04 Rely on the data plane and not the control plane\n  during recoveryREL11-BP05 Use static stability to prevent bimodal\n  behaviorREL11-BP06 Send notifications when events impact\n  availabilityREL11-BP07 Architect your product to meet availability targets and uptime service level agreements (SLAs) Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL10-BP04 Use bulkhead architectures to limit scope of\n  impactREL11-BP01 Monitor all components of the workload to detect\n  failuresDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel-11.html", "title": "REL 11. How do you design your workload to withstand component failures? - AWS Well-Architected Framework", "description": "Workloads with a requirement for high availability and low mean time to recovery (MTTR) must be architected for resiliency.", "language": "en-US"}}