{"page_content": "REL05-BP06 Make services stateless where possible - AWS Well-Architected FrameworkREL05-BP06 Make services stateless where possible - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesREL05-BP06 Make services stateless where possible\n    Services should either not require state, or should offload state\n    such that between different client requests, there is no dependence\n    on locally stored data on disk and in memory. This allows servers\n    to be replaced at will without causing an availability impact.\n    Amazon ElastiCache or Amazon DynamoDB are good destinations for\n    offloaded state.\n  \n\nFigure 7: In this stateless web application, session state\n        is offloaded to Amazon ElastiCache.\n\n    When users or services interact with an application, they often\n    perform a series of interactions that form a session. A session is\n    unique data for users that persists between requests while they use\n    the application. A stateless application is an application that does\n    not need knowledge of previous interactions and does not store\n    session information.\n  \n    Once designed to be stateless, you can then use serverless compute\n    services, such as AWS Lambda or AWS Fargate.\n  \n    In addition to server replacement, another benefit of stateless\n    applications is that they can scale horizontally because any of the\n    available compute resources (such as EC2 instances and AWS Lambda\n    functions) can service any request.\n  \nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n\n       Make your applications stateless. Stateless applications allow\n       horizontal scaling and are tolerant to the failure of an\n       individual node.\n     \n\n\n Remove state that could actually be stored in request parameters. \n\n After examining whether the state is required, move any state tracking to a\n              resilient multi-zone cache or data store like Amazon ElastiCache, Amazon RDS, Amazon DynamoDB, or a\n              third-party distributed data solution. Store a state that could not be moved to\n              resilient data stores. \n\n\n Some data (like cookies) can be passed in headers or query parameters.\n                \n\n Refactor to remove state that can be quickly passed in requests. \n\n Some data may not actually be needed per request and can be retrieved on\n                  demand. \n\n Remove data that can be asynchronously retrieved. \n\n Decide on a data store that meets the requirements for a required state.\n                \n\n Consider a NoSQL database for non-relational data. \n\n\nResources\n\nRelated documents:\n\n\n\n\nThe\n          Amazon Builders' Library: Avoiding fallback in distributed\n          systems\n\n\n\nThe\n          Amazon Builders' Library: Avoiding insurmountable queue\n          backlogs\n\n\n\nThe\n          Amazon Builders' Library: Caching challenges and\n          strategies\n\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL05-BP05 Set client timeoutsREL05-BP07 Implement emergency leversDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel_mitigate_interaction_failure_stateless.html", "title": "REL05-BP06 Make services stateless where possible - AWS Well-Architected Framework", "description": "Services should either not require state, or should offload state such that between different client requests, there is no dependence on locally stored data on disk and in memory. This allows servers to be replaced at will without causing an availability impact. Amazon ElastiCache or Amazon DynamoDB are good destinations for offloaded state.", "language": "en-US"}}