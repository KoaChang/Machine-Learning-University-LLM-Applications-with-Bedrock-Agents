{"page_content": "SEC01-BP07 Identify threats and prioritize mitigations using a threat model - AWS Well-Architected FrameworkSEC01-BP07 Identify threats and prioritize mitigations using a threat model - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFrameworkImplementation guidanceResourcesSEC01-BP07 Identify threats and prioritize mitigations using a threat\n  model\n\nThis best practice was updated with new guidance on December 6, 2023.\n\n\n    Perform threat modeling to identify and maintain an up-to-date register of potential threats and associated mitigations for your workload. Prioritize your threats and adapt your security control mitigations to prevent, detect, and respond. Revisit and maintain this in the context of your workload, and the evolving security landscape.\n  \nLevel of risk exposed if this best practice\n    is not established: High\n  \nImplementation guidance\n\nWhat is threat modeling?\n\n\n      \u201cThreat modeling works to identify, communicate, and understand threats and mitigations within the context of protecting something of value.\u201d \u2013 The Open Web Application Security Project (OWASP) Application Threat Modeling\n\n\nWhy should you threat model?\n\n\n      Systems are complex, and are becoming increasingly more complex and capable over time, delivering more business value and increased customer satisfaction and engagement. This means that IT design decisions need to account for an ever-increasing number of use cases. This complexity and number of use-case permutations typically makes unstructured approaches ineffective for finding and mitigating threats. Instead, you need a systematic approach to enumerate the potential threats to the system, and to devise mitigations and prioritize these mitigations to make sure that the limited resources of your organization have the maximum impact in improving the overall security posture of the system.\n    \n\n      Threat modeling is designed to provide this systematic approach, with the aim of finding and addressing issues early in the design process, when the mitigations have a low relative cost and effort compared to later in the lifecycle. This approach aligns with the industry principle of shift-left security. Ultimately, threat modeling integrates with an organization\u2019s risk management process and helps drive decisions on which controls to implement by using a threat driven approach.\n    \n\nWhen should threat modeling be performed?\n\n\n      Start threat modeling as early as possible in the lifecycle of your workload, this gives you better flexibility on what to do with the threats you have identified. Much like software bugs, the earlier you identify threats, the more cost effective it is to address them. A threat model is a living document and should continue to evolve as your workloads change. Revisit your threat models over time, including when there is a major change, a change in the threat landscape, or when you adopt a new feature or service. \n    \nImplementation steps\n\nHow can we perform threat modeling?\n\n\n      There are many different ways to perform threat modeling. Much like programming languages, there are advantages and disadvantages to each, and you should choose the way that works best for you. One approach is to start with Shostack\u2019s 4 Question Frame for Threat Modeling, which poses open-ended questions to provide structure to your threat modeling exercise:\n    \n\n\n\nWhat are working on?\n\n\n          The purpose of this question is to help you understand and agree upon the system you are building and the details about that system that are relevant to security. Creating a model or diagram is the most popular way to answer this question, as it helps you to visualize what you are building, for example, using a data flow diagram. Writing down assumptions and important details about your system also helps you define what is in scope. This allows everyone contributing to the threat model to focus on the same thing, and avoid time-consuming detours into out-of-scope topics (including out of date versions of your system). For example, if you are building a web application, it is probably not worth your time threat modeling the operating system trusted boot sequence for browser clients, as you have no ability to affect this with your design.\n        \n\n\nWhat can go wrong?\n\n\n          This is where you identify threats to your system. Threats are accidental or intentional actions or events that have unwanted impacts and could affect the security of your system. Without a clear understanding of what could go wrong, you have no way of doing anything about it.\n        \n\n          There is no canonical list of what can go wrong. Creating this list requires brainstorming and collaboration between all of the individuals within your team and relevant personas involved in the threat modeling exercise. You can aid your brainstorming by using a model for identifying threats, such as STRIDE, which suggests different categories to evaluate: Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, and Elevation of privilege. In addition, you might want to aid the brainstorming by reviewing existing lists and research for inspiration, including the OWASP Top 10, HiTrust Threat Catalog, and your organization\u2019s own threat catalog.\n        \n\n\nWhat are we going to do about it?\n\n\n          As was the case with the previous question, there is no canonical list of all possible mitigations. The inputs into this step are the identified threats, actors, and areas of improvement from the previous step. \n        \n\n          Security and compliance is a shared responsibility between you and AWS. It\u2019s important to understand that when you ask \u201cWhat are we going to do about it?\u201d, that you are also asking \u201cWho is responsible for doing something about it?\u201d. Understanding the balance of responsibilities between you and AWS helps you scope your threat modeling exercise to the mitigations that are under your control, which are typically a combination of AWS service configuration options and your own system-specific mitigations. \n        \n\n          For the AWS portion of the shared responsibility, you will find that AWS services are in-scope of many compliance programs. These programs help you to understand the robust controls in place at AWS to maintain security and compliance of the cloud. The audit reports from these programs are available for download for AWS customers from AWS Artifact.\n        \n\n          Regardless of which AWS services you are using, there\u2019s always an element of customer responsibility, and mitigations aligned to these responsibilities should be included in your threat model. For security control mitigations for the AWS services themselves, you want to consider implementing security controls across domains, including domains such as identity and access management (authentication and authorization), data protection (at rest and in transit), infrastructure security, logging, and monitoring. The documentation for each AWS service has a dedicated security chapter that provides guidance on the security controls to consider as mitigations. Importantly, consider the code that you are writing and its code dependencies, and think about the controls that you could put in place to address those threats. These controls could be things such as input validation, session handling, and  bounds handling. Often, the majority of vulnerabilities are introduced in custom code, so focus on this area.\n        \n\n\nDid we do a good job?\n\n\n          The aim is for your team and organization to improve both the quality of threat models and the velocity at which you are performing threat modeling over time. These improvements come from a combination of practice, learning, teaching, and reviewing. To go deeper and get hands on, it\u2019s recommended that you and your team complete the Threat modeling the right way for builders training course or workshop. In addition, if you are looking for guidance on how to integrate threat modeling into your organization\u2019s application development lifecycle, see How to approach threat modeling post on the AWS Security Blog.\n        \n\n\nThreat Composer\n\n\n        To aid and guide you in performing threat modeling, consider using the Threat Composer tool, which aims to your reduce time-to-value when threat modeling. The tool helps you do the following:\n      \n\n\n\n            Write useful threat statements aligned to threat grammar that work in a natural non-linear workflow\n          \n\n\n            Generate a human-readable threat model\n          \n\n\n            Generate a machine-readable threat model to allow you treat threat models as code\n          \n\n\n            Help you to quickly identify areas of quality and coverage improvement using the Insights Dashboard\n          \n\n\n        For further reference, visit Threat Composer and switch to the system-defined Example Workspace.\n      \nResources\n\nRelated best practices:\n\n\n\n\nSEC01-BP03 Identify and validate control objectives\n\n\n\nSEC01-BP04 Keep up-to-date with security threats \n\n\n\nSEC01-BP05 Keep up-to-date with security\n  recommendations\n\n\n\nSEC01-BP08 Evaluate and implement new security services and\n  features regularly \n\n\n\nRelated documents:\n\n\n\n\nHow to approach threat modeling (AWS Security Blog)\n        \n\n\n          NIST: Guide to Data-Centric System Threat Modelling\n        \n\n\nRelated videos:\n\n\n\nAWS Summit ANZ 2021 - How to approach threat modelling \n        \n\nAWS Summit ANZ 2022 - Scaling security \u2013 Optimise for fast and secure delivery\n        \n\n\nRelated training:\n\n\n\n\n          Threat modeling the right way for builders \u2013 AWS Skill Builder virtual self-paced training\n        \n\n\n          Threat modeling the right way for builders \u2013 AWS Workshop\n        \n\n\nRelated tools:\n\n\n\n\nThreat Composer", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/sec_securely_operate_threat_model.html", "title": "SEC01-BP07 Identify threats and prioritize mitigations using a threat model - AWS Well-Architected Framework", "description": "Perform threat modeling to identify and maintain an up-to-date register of potential threats and associated mitigations for your workload. Prioritize your threats and adapt your security control mitigations to prevent, detect, and respond. Revisit and maintain this in the context of your workload, and the evolving security landscape.", "language": "en-US"}}