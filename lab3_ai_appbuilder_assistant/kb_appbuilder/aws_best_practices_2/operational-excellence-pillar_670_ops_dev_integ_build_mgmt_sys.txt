{"page_content": "OPS05-BP04 Use build and deployment management systems - Operational Excellence PillarOPS05-BP04 Use build and deployment management systems - Operational Excellence PillarAWSDocumentationAWS Well-ArchitectedAWS Well-Architected FrameworkImplementation guidanceResourcesOPS05-BP04 Use build and deployment management systems\n    Use build and deployment management systems. These systems reduce errors caused by manual processes and reduce the level of effort to deploy changes.\n  \n    In AWS, you can build continuous integration/continuous deployment\n    (CI/CD) pipelines using services such as\n    AWS     Developer Tools (for example, AWS CodeCommit,\n    AWS CodeBuild,\n    AWS CodePipeline,\n    AWS CodeDeploy, and\n    AWS CodeStar).\n  \nDesired outcome: Your build and deployment management systems support your organization's continuous integration continuous delivery (CI/CD) system that provide capabilities for automating safe rollouts with the correct configurations.\n  \nCommon anti-patterns:\n\n\n\n        After compiling your code on your development system, you copy\n        the executable onto your production systems and it fails to\n        start. The local log files indicates that it has failed due to\n        missing dependencies.\n      \n\n\n        You successfully build your application with new features in\n        your development environment and provide the code to quality\n        assurance (QA). It fails QA because it is missing static assets.\n      \n\n\n        On Friday, after much effort, you successfully built your\n        application manually in your development environment including\n        your newly coded features. On Monday, you are unable to repeat\n        the steps that allowed you to successfully build your\n        application.\n      \n\n\n        You perform the tests you have created for your new release.\n        Then you spend the next week setting up a test environment and\n        performing all the existing integration tests followed by the\n        performance tests. The new code has an unacceptable performance\n        impact and must be redeveloped and then retested.\n      \n\nBenefits of establishing this best\n    practice: By providing mechanisms to manage build and\n    deployment activities you reduce the level of effort to perform\n    repetitive tasks, free your team members to focus on their high\n    value creative tasks, and limit the introduction of error from\n    manual procedures.\n  \nLevel of risk exposed if this best practice\n    is not established: Medium\n  \nImplementation guidance\n\n      Build and deployment management systems are used to track and implement change, reduce errors caused by manual processes, and reduce the level of effort required for safe deployments. Fully automate the integration and deployment pipeline from code check-in through build, testing, deployment, and validation. This reduces lead time, decreases cost, encourages increased frequency of change, reduces the level of effort, and increases collaboration.\n    \nImplementation steps\n\n\nDiagram showing a CI/CD pipeline using AWS CodePipeline and related services\n\n \n\n\n\n          Use AWS CodeCommit to version control, store, and manage assets (such as documents, source code, and binary files).\n        \n\n\n          Use CodeBuild to compile your source code, runs unit tests, and produces artifacts that are ready to deploy.\n        \n\n\n          Use CodeDeploy as a deployment service that automates application deployments to Amazon EC2 instances, on-premises instances, serverless AWS Lambda functions, or Amazon ECS.\n        \n\n\n          Monitor your deployments.\n        \n\nResources\n\nRelated best practices:\n\n\n\n\nOPS06-BP04 Automate testing and rollback\n\n\n\nRelated documents:\n\n\n\n\nAWS           Developer Tools\n\n\n\n          What is AWS CodeCommit?\n        \n\n\nWhat\n          is AWS CodeBuild?\n\n\nAWS CodeBuild\n\n\nWhat\n          is AWS CodeDeploy?\n\n\n\nRelated videos:\n\n\n\nAWS re:Invent 2022 - AWS Well-Architected best practices for DevOps on AWS\n\n Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsOPS05-BP03 Use configuration management systemsOPS05-BP05 Perform patch managementDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/ops_dev_integ_build_mgmt_sys.html", "title": "OPS05-BP04 Use build and deployment management systems - Operational Excellence Pillar", "description": "Use build and deployment management systems. These systems reduce errors caused by manual processes and reduce the level of effort to deploy changes.", "language": "en-US"}}