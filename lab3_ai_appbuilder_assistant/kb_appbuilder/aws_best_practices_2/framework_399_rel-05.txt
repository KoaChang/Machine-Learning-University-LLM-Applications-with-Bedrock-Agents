{"page_content": "REL 5. How do you design interactions in a distributed system to mitigate or withstand failures? - AWS Well-Architected FrameworkREL 5. How do you design interactions in a distributed system to mitigate or withstand failures? - AWS Well-Architected FrameworkAWSDocumentationAWS Well-ArchitectedFramework REL 5. How do you design interactions in a distributed system to mitigate\n                  or withstand failures? Distributed systems rely on communications networks to interconnect components (such as servers or services). Your workload must operate reliably despite data loss or latency over these networks. Components of the distributed system must operate in a way that does not negatively impact other components or the workload. These best practices permit workloads to withstand stresses or failures, more quickly recover from them, and mitigate the impact of such impairments.  The result is improved mean time to recovery (MTTR).Best practicesREL05-BP01 Implement graceful degradation to transform\n  applicable hard dependencies into soft dependenciesREL05-BP02 Throttle requestsREL05-BP03 Control and limit retry callsREL05-BP04 Fail fast and limit queuesREL05-BP05 Set client timeoutsREL05-BP06 Make services stateless where possibleREL05-BP07 Implement emergency levers Javascript is disabled or is unavailable in your browser.To use the Amazon Web Services Documentation, Javascript must be enabled. Please refer to your browser's Help pages for instructions.Document ConventionsREL04-BP04 Make all responses idempotentREL05-BP01 Implement graceful degradation to transform\n  applicable hard dependencies into soft dependenciesDid this page help you? - YesThanks for letting us know we're doing a good job!If you've got a moment, please tell us what we did right so we can do more of it.Did this page help you? - NoThanks for letting us know this page needs work. We're sorry we let you down.If you've got a moment, please tell us how we can make the documentation better.", "metadata": {"source": "https://docs.aws.amazon.com/wellarchitected/latest/framework/rel-05.html", "title": "REL 5. How do you design interactions in a distributed system to mitigate or withstand failures? - AWS Well-Architected Framework", "description": "Distributed systems rely on communications networks to interconnect components (such as servers or services). Your workload must operate reliably despite data loss or latency over these networks. Components of the distributed system must operate in a way that does not negatively impact other components or the workload. These best practices permit workloads to withstand stresses or failures, more quickly recover from them, and mitigate the impact of such impairments. The result is improved mean time to recovery (MTTR).", "language": "en-US"}}